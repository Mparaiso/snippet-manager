// Generated by CoffeeScript 1.7.1

/*
    coffee/model.coffee
    Copyright Â© 2014 mparaiso <mparaiso@online.fr>. All Rights Reserved.
 */

(function() {
  var Sequelize, bcrypt;

  bcrypt = require('bcrypt-nodejs');

  Sequelize = require('sequelize');

  module.exports = function(c) {
    var q, _;
    _ = c._, q = c.q;
    c.set('sequelize', c.share(function(c) {
      var sequelize;
      return sequelize = new Sequelize(c.db.database, c.db.user, c.db.password, {
        host: c.db.host,
        logging: c.debug === true ? console.log : false,
        dialect: "mysql",
        syncOnAssociation: false,
        pool: {
          maxConnections: 2,
          maxIdleTime: 30
        }
      });
    }));
    c.set('Snippet', c.share(function(c) {
      var Snippet;
      return Snippet = c.sequelize.define("Snippet", {
        title: Sequelize.STRING,
        description: Sequelize.STRING,
        content: Sequelize.STRING,
        "private": Sequelize.BOOLEAN,
        user_id: Sequelize.INTEGER,
        category_id: Sequelize.INTEGER,
        tags: Sequelize.STRING
      }, {
        underscored: true,
        tableName: 'snippets',
        instanceMethods: {
          getResourceId: function() {
            return "snippet";
          },
          toString: function() {
            return this.title;
          }
        },
        classMethods: {
          "new": function(data) {
            return this.build(data);
          },
          persist: function(snippet) {
            return snippet.save();
          },
          listAll: function(options, limit, offset) {
            if (options == null) {
              options = {};
            }
            if (offset == null) {
              offset = 0;
            }
            c._.defaults(options, {
              order: [['created_at', 'DESC']],
              where: {},
              include: [c.Category, c.User],
              attributes: ['id', 'title', 'description', 'category_id', 'user_id', 'created_at']
            });
            options.offset = offset;
            if (limit) {
              options.limit = limit;
            }
            return this.findAll(options);
          },
          findById: function(id) {
            return this.find({
              where: {
                id: id
              },
              include: [c.Category, c.User]
            });
          }
        }
      });
    }));
    c.set('Category', c.share(function(c) {
      var Category;
      Category = c.sequelize.define('Category', {
        title: Sequelize.STRING,
        description: Sequelize.STRING
      }, {
        timestamps: false,
        underscored: true,
        tableName: "categories",
        instanceMethods: {
          toString: function() {
            return this.title;
          }
        },
        classMethods: {
          findByIdWithSnippets: function(id, limit, offset) {
            return this.find({
              where: {
                id: id
              }
            }).then(function(category) {
              if (!category) {
                throw "category not found";
              } else {
                return [
                  category, category.getSnippets({
                    attributes: ['id', 'title', 'description', 'created_at'],
                    include: [c.Category, c.User],
                    limit: limit,
                    offset: offset,
                    order: [['created_at', 'DESC']]
                  })
                ];
              }
            }).spread(function(category, snippets) {
              category.snippets = snippets;
              return category;
            });
          }
        }
      });
      Category.hasMany(c.Snippet);
      c.Snippet.belongsTo(Category);
      return Category;
    }));

    /* user data access object */
    c.set('User', c.share(function(c) {
      var User;
      User = c.sequelize.define('User', {
        username: Sequelize.STRING(100),
        email: Sequelize.STRING(100),
        password: Sequelize.STRING(100),
        role_id: Sequelize.INTEGER
      }, {
        timestamps: false,
        underscored: true,
        tableName: "users",
        instanceMethods: {
          countSnippets: function() {
            return this.getSnippets({
              attributes: ['id']
            }).then(function(s) {
              return s.length;
            });
          },
          countFavorites: function() {
            return this.getFavorites({
              attributes: ['id']
            }).then(function(s) {
              return s.length;
            });
          },
          hasFavoriteSync: function(favorite) {
            return this.favorites.some(function(f) {
              return f.id === favorite.id;
            });
          },
          toString: function() {
            return this.username;
          },
          getRoleId: function() {
            return this.role.name;
          },
          getLatestSnippets: function(limit) {
            if (limit == null) {
              limit = 5;
            }
            return this.getSnippets({
              limit: limit,
              order: [['created_at', 'DESC']],
              attributes: ['id', 'title', 'description', 'created_at'],
              include: [
                {
                  model: c.User,
                  attributes: ['id', 'username']
                }, {
                  model: c.Category,
                  attributes: ['id', 'title']
                }
              ]
            });
          }
        },
        classMethods: {
          findById: function(id) {
            return c.User.find({
              where: {
                id: id
              },
              include: [
                {
                  model: c.Role,
                  attributes: ['name', 'id']
                }, {
                  model: c.Snippet,
                  attributes: ['id']
                }, {
                  model: c.Snippet,
                  as: 'Favorites',
                  attributes: ['id']
                }
              ]
            });
          },
          findByEmail: function(email) {
            return c.User.find({
              where: {
                email: email
              }
            });
          },
          findByEmailOrUsername: function(email, username) {
            return c.User.find({
              where: Sequelize.or({
                email: email
              }, {
                username: username
              })
            });
          },
          generateHash: function(password) {
            return bcrypt.hashSync(password, bcrypt.genSaltSync(8), null);
          },
          validPassword: function(encrypted, password) {
            return bcrypt.compareSync(password, encrypted);
          },
          "new": function(userData) {
            if (userData == null) {
              userData = {};
            }
            return c.User.build(userData);
          },
          persist: function(user) {
            return user.save();
          },
          register: function(user) {
            return this.findByEmailOrUsername(user.email, user.username).then(function(foundUser) {
              if (foundUser) {
                if (foundUser.email === user.email) {
                  throw new Error("That email is already taken");
                }
                if (foundUser.username === user.username) {
                  throw new Error("That username is already taken");
                }
              }
            }).then((function(_this) {
              return function() {
                user.password = _this.generateHash(user.password);
                return user.save();
              };
            })(this));
          }
        }
      });
      User.hasMany(c.Snippet, {
        as: "Favorites",
        through: 'favorites'
      });
      c.Snippet.hasMany(User, {
        as: "Fans",
        through: 'favorites'
      });
      c.Role.hasMany(User);
      User.belongsTo(c.Role);
      User.hasMany(c.Snippet);
      c.Snippet.belongsTo(User);
      return User;
    }));
    c.set('CategoryWithSnippetCount', c.share(function(c) {
      return c.sequelize.define('CategoryWithSnippetCount', {
        title: Sequelize.STRING,
        snippet_count: Sequelize.INTEGER
      }, {
        tableName: 'categories_with_snippet_count',
        underscored: true,
        timestamps: false
      });
    }));

    /* user role data access object */
    c.set('Role', c.share(function(c) {
      var Role;
      return Role = c.sequelize.define('Role', {
        name: Sequelize.STRING
      }, {
        timestamps: false,
        underscored: true,
        tableName: 'roles',
        instanceMethods: {
          toString: function() {
            return this.name;
          }
        }
      });
    }));
    return c.set('Search', c.share(function(c) {
      return {
        indexSnippet: function(snippet) {
          throw "not implemented yet";
        },
        search: function(query, order, limit, offset) {
          var request;
          if (order == null) {
            order = [['created_at', "DESC"]];
          }
          if (limit == null) {
            limit = c.snippet_per_page;
          }
          if (offset == null) {
            offset = 0;
          }
          request = {
            order: order,
            limit: limit,
            offset: offset,
            where: ['snippets.title like ? or snippets.description like ? or snippets.content like ? or category.title LIKE ? ', "%" + query + "%", "%" + query + "%", "%" + query + "%", "%" + query + "%"],
            include: [c.Category]
          };
          return c.Snippet.findAll(request);
        }
      };
    }));
  };

}).call(this);
