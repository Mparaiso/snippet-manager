// Generated by CoffeeScript 1.7.1

/*
    coffee/controller.coffee
    Copyright Â© 2014 mparaiso <mparaiso@online.fr>. All Rights Reserved.
 */


/*
    controller service provider
 */

(function() {
  module.exports = function(c) {
    c.set('IndexController', c.share(function(c) {
      return {
        index: function(req, res, next) {
          var offset;
          offset = +req.query.offset > 0 ? +req.query.offset * c.snippet_per_page : 0;
          return c.Snippet.listAll(void 0, c.snippet_per_page, offset).then(function(snippets) {
            return res.render('index', {
              offset: +req.query.offset || 0,
              snippets: snippets,
              item_per_page: c.snippet_per_page,
              item_count: snippets.length,
              route: 'home'
            });
          })["catch"](next);
        },
        readSnippet: function(req, res, next) {
          return c.Snippet.findById(req.params.snippetId).then(function(snippet) {
            if (snippet) {
              return res.render('snippet', {
                snippet: snippet,
                category: snippet.category
              });
            } else {
              if (!snippet) {
                return res.send(404);
              }
            }
          })["catch"](function(err) {
            return next(err);
          });
        },
        readCategory: function(req, res, next) {
          var offset;
          offset = +req.query.offset > 0 ? +req.query.offset * c.snippet_per_page : 0;
          return c.Category.findByIdWithSnippets(req.params.categoryId, c.snippet_per_page, offset).then(function(category) {
            return res.render('category', {
              offset: +req.query.offset || 0,
              item_per_page: c.snippet_per_page,
              item_count: category.snippets.length,
              snippets: category.snippets,
              category: category
            });
          })["catch"](next);
        },
        search: function(req, res, next) {}
      };
    }));
    c.set('UserController', c.share(function(c) {
      return {
        profileIndex: function(req, res, next) {
          return c.q([req.user.countSnippets(), req.user.countFavorites(), req.user.getLatestSnippets()]).spread(function(snippetCount, favoriteCount, latestSnippets) {
            return res.render('profile', {
              route: 'profile',
              snippetCount: snippetCount,
              favoriteCount: favoriteCount,
              latestSnippets: latestSnippets
            });
          })["catch"](next);
        },
        profileSnippetDelete: function(req, res, next) {
          return req.user.getSnippets({
            where: {
              id: req.params.snippetId
            }
          }).then(function(snippets) {
            return snippets[0].destroy();
          }).then(function() {
            return res.redirect('/profile');
          })["catch"](next);
        },
        profileSnippetUpdate: function(req, res, next) {
          return c.Category.findAll().then(function(categories) {
            return [
              categories, req.user.getSnippets({
                where: {
                  id: req.params.snippetId
                }
              })
            ];
          }).spread(function(categories, snippets) {
            var form, snippet;
            snippet = snippets[0];
            form = c.forms.createSnippetForm(categories).setModel(snippet);
            if (req.method === "POST" && form.bind(req.body) && form.validateSync()) {
              return c.qevent.emit(c.events.SNIPPET_BEFORE_UPDATE, snippet, req, res, next).then(snippet.save.bind(snippet, null)).then(c.qevent.emit.bind(c.qevent, c.events.SNIPPET_AFTER_UPDATE, snippet, req, res, next)).then(function() {
                return res.redirect('/snippet/' + snippet.id);
              });
            }
            return res.render('profile/snippet-update', {
              snippet: snippet,
              form: form
            });
          })["catch"](next);
        },

        /*
            create a snippet
         */
        profileSnippetCreate: function(req, res, next) {
          return c.Category.findAll().then(function(categories) {
            var form, snippet;
            snippet = c.Snippet["new"]();
            form = c.forms.createSnippetForm(categories);
            form.setModel(snippet);
            if (req.method === "POST" && form.bind(req.body) && form.validateSync()) {
              snippet.user_id = req.user.id;
              return snippet.save().then(function(snippet) {
                return res.redirect('/snippet/' + snippet.id);
              });
            }
            return res.render('profile/snippet-create', {
              form: form
            });
          })["catch"](next);
        },

        /*
            snippet list for user
         */
        profileSnippet: function(req, res, next) {
          return req.user.getSnippets().then(function(snippets) {
            snippets.forEach(function(s) {
              return s.user = req.user;
            });
            return res.render('profile/snippets', {
              pageTitle: 'Your snippets',
              snippets: snippets
            });
          })["catch"](function(err) {
            return next(err);
          });
        },
        profileFavorite: function(req, res, next) {
          return req.user.getFavorites().then(function(snippets) {
            snippets.forEach(function(s) {
              return s.user = req.user;
            });
            return res.render('profile/favorite', {
              pageTitle: 'Your favorites',
              snippets: snippets
            });
          })["catch"](function(err) {
            return next(err);
          });
        },
        profileSnippetFavoriteToggle: function(req, res, next) {
          return c.Snippet.findById(req.params.snippetId).then(function(snippet) {
            if (!snippet) {
              return res.send(404, "snippet with id " + req.params.snippetId + " not found");
            } else if (req.user.hasFavoriteSync(snippet)) {
              return req.user.removeFavorite(snippet);
            } else {
              return req.user.addFavorite(snippet);
            }
          }).then(function() {
            return res.redirect('/snippet/' + req.params.snippetId);
          })["catch"](function(err) {
            return next(err);
          });
        },
        signOut: function(req, res) {
          req.logout();
          return res.redirect('/');
        },
        signIn: function(req, res, next) {
          var form;
          form = c.forms.createSignInForm();
          return res.render('signin', {
            form: form,
            route: 'signin'
          });
        },
        register: function(req, res, next) {
          var registrationForm, user;
          registrationForm = c.forms.createRegistrationForm();
          user = c.User["new"]();
          registrationForm.setModel(user);
          if (req.method === "POST" && registrationForm.bind(req.body) && registrationForm.validateSync() === true) {
            return c.User.register(user).then(function(user) {
              return c.q.ninvoke(req, 'logIn', user, {});
            }).then(function() {
              return res.redirect('/profile');
            })["catch"](function(err) {
              console.log(err);
              return res.render('join', {
                form: registrationForm,
                error: err.message,
                route: 'join'
              });
            });
          }
          return res.render('join', {
            route: 'join',
            form: registrationForm
          });
        }
      };
    }));
    c.set('ErrorController', c.share(function(c) {
      return {
        '500': function(err, req, res, next) {
          var errorMessage;
          errorMessage = (function() {
            switch (err.status) {
              case 404:
                res.status(404);
                return "Page Not Found";
              default:
                res.status(500);
                return "Server error";
            }
          })();
          console.log(err);
          return res.render('500.twig', {
            errorMessage: errorMessage
          });
        }
      };
    }));
    return c.set('AdminController', c.share(function(c) {

      /*
          Admin actions
       */
    }));
  };

}).call(this);
