// Generated by CoffeeScript 1.7.1
(function() {
  module.exports = function(container) {
    return container.set('app', container.share(function(c) {
      var app, express, path, q, _;
      _ = c._, q = c.q, path = c.path, express = c.express;
      app = express();

      /* static assets */
      app.disable('x-powered-by');
      app.use('/css', require('less-middleware')(path.join(__dirname, '..', 'public', 'css'), {
        once: c.debug ? false : true
      }));
      app.use(express["static"](path.join(__dirname, "..", "public"), {
        maxAge: 100000
      }));

      /* logging */

      /* passport user management */
      app.use(express.cookieParser(c.secret));

      /* session middleware */
      app.use(c.sessionMiddleware);
      app.use(c.flash());
      app.use(c.passport.initialize());
      app.use(c.passport.session());
      app.use(express.bodyParser());
      app.use(express.methodOverride());
      app.engine('twig', c.swig.renderFile);
      app.set('view engine', 'twig');
      app.use(function(req, res, next) {
        _.defaults(res.locals, c.locals);
        res.locals.flash = req.flash();
        return next();
      });

      /* errors */
      if (c.debug) {
        app.enable('verbose errors');
        app.use(express.errorHandler());
        app.use(express.logger('dev'));
      } else {
        app.disable('verbose errors');
        app.disable('view cache');
      }
      app.use(function(req, res, next) {
        if (req.isAuthenticated()) {
          res.locals.user = req.user;
          res.locals.isAuthenticated = true;
        } else {
          res.locals.user = void 0;
          res.locals.isAuthenticated = false;
        }
        return next();
      });

      /* firewall */
      app.use(c.middlewares.firewall(c.acl));

      /* subroute for profile */
      app.use('/profile', (function(r, res, next) {
        res.locals.route = "profile";
        return next();
      }));
      app.get('/profile', c.UserController.profileIndex);
      app.all('/profile/snippet/create', c.UserController.profileSnippetCreate);
      app.all('/profile/snippet/:snippetId/update', c.UserController.profileSnippetUpdate);
      app.post('/profile/snippet/:snippetId/delete', c.UserController.profileSnippetDelete);
      app.post('/profile/snippet/:snippetId/favorite', c.UserController.profileSnippetFavoriteToggle);
      app.get('/profile/snippet', c.UserController.profileSnippet);
      app.get('/profile/favorite', c.UserController.profileFavorite);
      app.get('/profile/signout', c.UserController.signOut);

      /* public routes */
      app.get('/*', function(req, res, next) {
        return c.CategoryWithSnippetCount.findAll({
          limit: 10
        }).then(function(categories) {
          res.locals.categoriesWithSnippetCount = categories;
          return next('route');
        })["catch"](next);
      });
      app.get('/snippet/:snippetId/:snippetTitle?', c.IndexController.readSnippet);
      app.get('/category/:categoryId/:categoryTitle?', c.IndexController.readCategory);
      app.all('/join', c.UserController.register);
      app.get('/signin', c.UserController.signIn);
      app.post('/signin', c.middlewares.signIn());
      app.get('/', c.IndexController.index);
      app.all('/*', function(req, res, next) {
        var err;
        err = new Error('not found');
        err.status = 404;
        return next(err);
      });
      if (!c.debug) {
        app.use(c.ErrorController['500']);
      }
      return app;
    }));
  };

}).call(this);
