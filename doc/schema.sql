-- MySQL dump 10.13  Distrib 5.5.8, for Win32 (x86)
--
-- Host: localhost    Database: simplerest
-- ------------------------------------------------------
-- Server version	5.5.8

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `category`
--

DROP TABLE IF EXISTS `category`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `category` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(128) COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`id`),
  KEY `IDX_64C19C15E237E06` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=28 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `category`
--

LOCK TABLES `category` WRITE;
/*!40000 ALTER TABLE `category` DISABLE KEYS */;
INSERT INTO `category` VALUES (1,'ActionScript'),(2,'Apache'),(3,'Bash'),(4,'C'),(5,'C#'),(6,'C++'),(7,'CSS'),(8,'Diff'),(9,'Erlang'),(10,'Go'),(13,'Haskell'),(14,'Haxe'),(11,'HTML'),(12,'HTTP'),(15,'Ini'),(17,'Java'),(18,'Javascript'),(16,'JSON'),(19,'Lisp'),(20,'Other'),(22,'Perl'),(21,'PHP'),(23,'Python'),(24,'Ruby'),(26,'Scala'),(25,'SQL'),(27,'Visual Basic');
/*!40000 ALTER TABLE `category` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `snippet`
--

DROP TABLE IF EXISTS `snippet`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `snippet` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `category_id` int(11) NOT NULL,
  `title` varchar(256) COLLATE utf8_unicode_ci NOT NULL,
  `description` varchar(256) COLLATE utf8_unicode_ci NOT NULL,
  `content` longtext COLLATE utf8_unicode_ci NOT NULL,
  `prettyContent` longtext COLLATE utf8_unicode_ci NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `IDX_961C8CD512469DE2` (`category_id`),
  CONSTRAINT `FK_961C8CD512469DE2` FOREIGN KEY (`category_id`) REFERENCES `category` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=83 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `snippet`
--

LOCK TABLES `snippet` WRITE;
/*!40000 ALTER TABLE `snippet` DISABLE KEYS */;
INSERT INTO `snippet` VALUES (61,7,'LESS FUNCTIONS','LESS FUNCTIONS','Function Reference\n\nIndex\n\nescape(@string);               // URL encodes a string\ne(@string);                    // escape string content\n%(@string, values...);         // formats a string\n\nunit(@dimension, [@unit: \"\"]); // remove or change the unit of a dimension\ncolor(@string);                // parses a string to a color\ndata-uri([mimetype,] url);       // * inlines a resource and falls back to url()\n\nceil(@number);                 // rounds up to an integer\nfloor(@number);                // rounds down to an integer\npercentage(@number);           // converts to a %, e.g. 0.5 -> 50%\nround(number, [places: 0]);    // rounds a number to a number of places\nsqrt(number);                  // * calculates square root of a number\nabs(number);                   // * absolute value of a number\nsin(number);                   // * sine function\nasin(number);                  // * arcsine - inverse of sine function\ncos(number);                   // * cosine function\nacos(number);                  // * arccosine - inverse of cosine function\ntan(number);                   // * tangent function\natan(number);                  // * arctangent - inverse of tangent function\npi();                          // * returns pi\npow(@base, @exponent);     // * first argument raised to the power of the second argument\nmod(number, number);       // * first argument modulus second argument\n\nconvert(number, units);    // * converts between number types\nunit(number, units);       // *changes number units without converting it\ncolor(string);             // converts string or escaped value into color\n\nrgb(@r, @g, @b);                             // converts to a color\nrgba(@r, @g, @b, @a);                        // converts to a color\nargb(@color);                                // creates a #AARRGGBB\nhsl(@hue, @saturation, @lightness);          // creates a color\nhsla(@hue, @saturation, @lightness, @alpha); // creates a color\nhsv(@hue, @saturation, @value);              // creates a color\nhsva(@hue, @saturation, @value, @alpha);     // creates a color\n\nhue(@color);           // returns the `hue` channel of @color in the HSL space\nsaturation(@color);    // returns the `saturation` channel of @color in the HSL space\nlightness(@color);     // returns the \'lightness\' channel of @color in the HSL space\nhsvhue(@color);        // * returns the `hue` channel of @color in the HSV space\nhsvsaturation(@color); // * returns the `saturation` channel of @color in the HSV space\nhsvvalue(@color);      // * returns the \'value\' channel of @color in the HSV space\nred(@color);           // returns the \'red\' channel of @color\ngreen(@color);         // returns the \'green\' channel of @color\nblue(@color);          // returns the \'blue\' channel of @color\nalpha(@color);         // returns the \'alpha\' channel of @color\nluma(@color);          // returns the \'luma\' value (perceptual brightness) of @color\n\nsaturate(@color, 10%);                  // return a color 10% points *more* saturated\ndesaturate(@color, 10%);                // return a color 10% points *less* saturated\nlighten(@color, 10%);                   // return a color 10% points *lighter*\ndarken(@color, 10%);                    // return a color 10% points *darker*\nfadein(@color, 10%);                    // return a color 10% points *less* transparent\nfadeout(@color, 10%);                   // return a color 10% points *more* transparent\nfade(@color, 50%);                      // return @color with 50% transparency\nspin(@color, 10);                       // return a color with a 10 degree larger in hue\nmix(@color1, @color2, [@weight: 50%]);  // return a mix of @color1 and @color2\ngreyscale(@color);                      // returns a grey, 100% desaturated color\ncontrast(@color1, [@darkcolor: black], [@lightcolor: white], [@threshold: 43%]); \n                                        // return @darkcolor if @color1 is > 43% luma\n                                        // otherwise return @lightcolor, see notes\n\nmultiply(@color1, @color2);\nscreen(@color1, @color2);\noverlay(@color1, @color2);\nsoftlight(@color1, @color2);\nhardlight(@color1, @color2);\ndifference(@color1, @color2);\nexclusion(@color1, @color2);\naverage(@color1, @color2);\nnegation(@color1, @color2);\n\niscolor(@colorOrAnything);              // returns true if passed a color, including keyword colors\nisnumber(@numberOrAnything);            // returns true if a number of any unit\nisstring(@stringOrAnything);            // returns true if it is passed a string\niskeyword(@keywordOrAnything);          // returns true if it is passed keyword\nisurl(@urlOrAnything);                  // returns true if it is a string and a url\nispixel(@pixelOrAnything);              // returns true if it is a number and a px\nispercentage(@percentageOrAnything);    // returns true if it is a number and a %\nisem(@emOrAnything);                    // returns true if it is a number and an em\nisunit(@numberOrAnything, \"rem\");       // * returns if a parameter is a number and is in a particular unit\n\n// * These functions are only available in the 1.4.0 beta','Function Reference\n\nIndex\n\nescape(<span class=\"annotation\">@string</span>);               <span class=\"comment\">// URL encodes a string</span>\ne(<span class=\"annotation\">@string</span>);                    <span class=\"comment\">// escape string content</span>\n%(<span class=\"annotation\">@string</span>, values...);         <span class=\"comment\">// formats a string</span>\n\nunit(<span class=\"annotation\">@dimension</span>, [<span class=\"annotation\">@unit</span>: <span class=\"string\">\"\"</span>]); <span class=\"comment\">// remove or change the unit of a dimension</span>\ncolor(<span class=\"annotation\">@string</span>);                <span class=\"comment\">// parses a string to a color</span>\ndata-uri([mimetype,] url);       <span class=\"comment\">// * inlines a resource and falls back to url()</span>\n\nceil(<span class=\"annotation\">@number</span>);                 <span class=\"comment\">// rounds up to an integer</span>\nfloor(<span class=\"annotation\">@number</span>);                <span class=\"comment\">// rounds down to an integer</span>\npercentage(<span class=\"annotation\">@number</span>);           <span class=\"comment\">// converts to a %, e.g. 0.5 -&gt; 50%</span>\nround(number, [places: <span class=\"number\">0</span>]);    <span class=\"comment\">// rounds a number to a number of places</span>\nsqrt(number);                  <span class=\"comment\">// * calculates square root of a number</span>\nabs(number);                   <span class=\"comment\">// * absolute value of a number</span>\nsin(number);                   <span class=\"comment\">// * sine function</span>\nasin(number);                  <span class=\"comment\">// * arcsine - inverse of sine function</span>\ncos(number);                   <span class=\"comment\">// * cosine function</span>\nacos(number);                  <span class=\"comment\">// * arccosine - inverse of cosine function</span>\ntan(number);                   <span class=\"comment\">// * tangent function</span>\natan(number);                  <span class=\"comment\">// * arctangent - inverse of tangent function</span>\npi();                          <span class=\"comment\">// * returns pi</span>\npow(<span class=\"annotation\">@base</span>, <span class=\"annotation\">@exponent</span>);     <span class=\"comment\">// * first argument raised to the power of the second argument</span>\nmod(number, number);       <span class=\"comment\">// * first argument modulus second argument</span>\n\nconvert(number, units);    <span class=\"comment\">// * converts between number types</span>\nunit(number, units);       <span class=\"comment\">// *changes number units without converting it</span>\ncolor(string);             <span class=\"comment\">// converts string or escaped value into color</span>\n\nrgb(<span class=\"annotation\">@r</span>, <span class=\"annotation\">@g</span>, <span class=\"annotation\">@b</span>);                             <span class=\"comment\">// converts to a color</span>\nrgba(<span class=\"annotation\">@r</span>, <span class=\"annotation\">@g</span>, <span class=\"annotation\">@b</span>, <span class=\"annotation\">@a</span>);                        <span class=\"comment\">// converts to a color</span>\nargb(<span class=\"annotation\">@color</span>);                                <span class=\"comment\">// creates a #AARRGGBB</span>\nhsl(<span class=\"annotation\">@hue</span>, <span class=\"annotation\">@saturation</span>, <span class=\"annotation\">@lightness</span>);          <span class=\"comment\">// creates a color</span>\nhsla(<span class=\"annotation\">@hue</span>, <span class=\"annotation\">@saturation</span>, <span class=\"annotation\">@lightness</span>, <span class=\"annotation\">@alpha</span>); <span class=\"comment\">// creates a color</span>\nhsv(<span class=\"annotation\">@hue</span>, <span class=\"annotation\">@saturation</span>, <span class=\"annotation\">@value</span>);              <span class=\"comment\">// creates a color</span>\nhsva(<span class=\"annotation\">@hue</span>, <span class=\"annotation\">@saturation</span>, <span class=\"annotation\">@value</span>, <span class=\"annotation\">@alpha</span>);     <span class=\"comment\">// creates a color</span>\n\nhue(<span class=\"annotation\">@color</span>);           <span class=\"comment\">// returns the `hue` channel of @color in the HSL space</span>\nsaturation(<span class=\"annotation\">@color</span>);    <span class=\"comment\">// returns the `saturation` channel of @color in the HSL space</span>\nlightness(<span class=\"annotation\">@color</span>);     <span class=\"comment\">// returns the \'lightness\' channel of @color in the HSL space</span>\nhsvhue(<span class=\"annotation\">@color</span>);        <span class=\"comment\">// * returns the `hue` channel of @color in the HSV space</span>\nhsvsaturation(<span class=\"annotation\">@color</span>); <span class=\"comment\">// * returns the `saturation` channel of @color in the HSV space</span>\nhsvvalue(<span class=\"annotation\">@color</span>);      <span class=\"comment\">// * returns the \'value\' channel of @color in the HSV space</span>\nred(<span class=\"annotation\">@color</span>);           <span class=\"comment\">// returns the \'red\' channel of @color</span>\ngreen(<span class=\"annotation\">@color</span>);         <span class=\"comment\">// returns the \'green\' channel of @color</span>\nblue(<span class=\"annotation\">@color</span>);          <span class=\"comment\">// returns the \'blue\' channel of @color</span>\nalpha(<span class=\"annotation\">@color</span>);         <span class=\"comment\">// returns the \'alpha\' channel of @color</span>\nluma(<span class=\"annotation\">@color</span>);          <span class=\"comment\">// returns the \'luma\' value (perceptual brightness) of @color</span>\n\nsaturate(<span class=\"annotation\">@color</span>, <span class=\"number\">10</span>%);                  <span class=\"comment\">// return a color 10% points *more* saturated</span>\ndesaturate(<span class=\"annotation\">@color</span>, <span class=\"number\">10</span>%);                <span class=\"comment\">// return a color 10% points *less* saturated</span>\nlighten(<span class=\"annotation\">@color</span>, <span class=\"number\">10</span>%);                   <span class=\"comment\">// return a color 10% points *lighter*</span>\ndarken(<span class=\"annotation\">@color</span>, <span class=\"number\">10</span>%);                    <span class=\"comment\">// return a color 10% points *darker*</span>\nfadein(<span class=\"annotation\">@color</span>, <span class=\"number\">10</span>%);                    <span class=\"comment\">// return a color 10% points *less* transparent</span>\nfadeout(<span class=\"annotation\">@color</span>, <span class=\"number\">10</span>%);                   <span class=\"comment\">// return a color 10% points *more* transparent</span>\nfade(<span class=\"annotation\">@color</span>, <span class=\"number\">50</span>%);                      <span class=\"comment\">// return @color with 50% transparency</span>\nspin(<span class=\"annotation\">@color</span>, <span class=\"number\">10</span>);                       <span class=\"comment\">// return a color with a 10 degree larger in hue</span>\nmix(<span class=\"annotation\">@color</span>1, <span class=\"annotation\">@color</span>2, [<span class=\"annotation\">@weight</span>: <span class=\"number\">50</span>%]);  <span class=\"comment\">// return a mix of @color1 and @color2</span>\ngreyscale(<span class=\"annotation\">@color</span>);                      <span class=\"comment\">// returns a grey, 100% desaturated color</span>\ncontrast(<span class=\"annotation\">@color</span>1, [<span class=\"annotation\">@darkcolor</span>: black], [<span class=\"annotation\">@lightcolor</span>: white], [<span class=\"annotation\">@threshold</span>: <span class=\"number\">43</span>%]); \n                                        <span class=\"comment\">// return @darkcolor if @color1 is &gt; 43% luma</span>\n                                        <span class=\"comment\">// otherwise return @lightcolor, see notes</span>\n\nmultiply(<span class=\"annotation\">@color</span>1, <span class=\"annotation\">@color</span>2);\nscreen(<span class=\"annotation\">@color</span>1, <span class=\"annotation\">@color</span>2);\noverlay(<span class=\"annotation\">@color</span>1, <span class=\"annotation\">@color</span>2);\nsoftlight(<span class=\"annotation\">@color</span>1, <span class=\"annotation\">@color</span>2);\nhardlight(<span class=\"annotation\">@color</span>1, <span class=\"annotation\">@color</span>2);\ndifference(<span class=\"annotation\">@color</span>1, <span class=\"annotation\">@color</span>2);\nexclusion(<span class=\"annotation\">@color</span>1, <span class=\"annotation\">@color</span>2);\naverage(<span class=\"annotation\">@color</span>1, <span class=\"annotation\">@color</span>2);\nnegation(<span class=\"annotation\">@color</span>1, <span class=\"annotation\">@color</span>2);\n\niscolor(<span class=\"annotation\">@colorOrAnything</span>);              <span class=\"comment\">// returns true if passed a color, including keyword colors</span>\nisnumber(<span class=\"annotation\">@numberOrAnything</span>);            <span class=\"comment\">// returns true if a number of any unit</span>\nisstring(<span class=\"annotation\">@stringOrAnything</span>);            <span class=\"comment\">// returns true if it is passed a string</span>\niskeyword(<span class=\"annotation\">@keywordOrAnything</span>);          <span class=\"comment\">// returns true if it is passed keyword</span>\nisurl(<span class=\"annotation\">@urlOrAnything</span>);                  <span class=\"comment\">// returns true if it is a string and a url</span>\nispixel(<span class=\"annotation\">@pixelOrAnything</span>);              <span class=\"comment\">// returns true if it is a number and a px</span>\nispercentage(<span class=\"annotation\">@percentageOrAnything</span>);    <span class=\"comment\">// returns true if it is a number and a %</span>\nisem(<span class=\"annotation\">@emOrAnything</span>);                    <span class=\"comment\">// returns true if it is a number and an em</span>\nisunit(<span class=\"annotation\">@numberOrAnything</span>, <span class=\"string\">\"rem\"</span>);       <span class=\"comment\">// * returns if a parameter is a number and is in a particular unit</span>\n\n<span class=\"comment\">// * These functions are only available in the 1.4.0 beta</span>','2013-06-18 13:45:19','2013-06-18 18:37:53'),(62,7,'Linear Gradient','Linear Gradient','.gradient{\n     background-image:linear-gradient(white, black);\n}','<span class=\"class\">.gradient</span><span class=\"rules\">{\n     <span class=\"rule\"><span class=\"attribute\">background-image</span>:<span class=\"value\">linear-<span class=\"function\">gradient(white, black)</span>;</span></span>\n<span class=\"rule\">}</span></span>','2013-06-18 13:45:19','2013-06-18 18:38:08'),(63,7,'BOX Shadow','BOX shadow','box-shadow: inset 0px 0px 15px #000, 0px 0px 15px #ccc;','<span class=\"tag\">box</span>-<span class=\"tag\">shadow</span>: <span class=\"tag\">inset</span> 0<span class=\"tag\">px</span> 0<span class=\"tag\">px</span> 15<span class=\"tag\">px</span> <span class=\"id\">#000</span>, 0<span class=\"tag\">px</span> 0<span class=\"tag\">px</span> 15<span class=\"tag\">px</span> <span class=\"id\">#ccc</span>;','2013-06-18 13:45:19','2013-06-18 18:40:18'),(64,7,'Style a Select Box Using Only CSS','Style a Select Box Using Only CSS','.styled-select select {\n   background: transparent;\n   width: 268px;\n   padding: 5px;\n   font-size: 16px;\n   line-height: 1;\n   border: 0;\n   border-radius: 0;\n   height: 34px;\n   -webkit-appearance: none;\n   }','<span class=\"class\">.styled-select</span> <span class=\"tag\">select</span> <span class=\"rules\">{\n   <span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"> transparent;</span></span>\n   <span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"> <span class=\"number\">268</span>px;</span></span>\n   <span class=\"rule\"><span class=\"attribute\">padding</span>:<span class=\"value\"> <span class=\"number\">5</span>px;</span></span>\n   <span class=\"rule\"><span class=\"attribute\">font-size</span>:<span class=\"value\"> <span class=\"number\">16</span>px;</span></span>\n   <span class=\"rule\"><span class=\"attribute\">line-height</span>:<span class=\"value\"> <span class=\"number\">1</span>;</span></span>\n   <span class=\"rule\"><span class=\"attribute\">border</span>:<span class=\"value\"> <span class=\"number\">0</span>;</span></span>\n   <span class=\"rule\"><span class=\"attribute\">border-radius</span>:<span class=\"value\"> <span class=\"number\">0</span>;</span></span>\n   <span class=\"rule\"><span class=\"attribute\">height</span>:<span class=\"value\"> <span class=\"number\">34</span>px;</span></span>\n   <span class=\"rule\"><span class=\"attribute\">-webkit-appearance</span>:<span class=\"value\"> none;</span></span>\n   <span class=\"rule\">}</span></span>','2013-06-18 13:45:19','2013-06-18 18:41:39'),(65,18,'Getting Started with highlight.js','Getting Started with highlight.js','// https://github.com/isagalaev/highlight.js\nvar hljs = require(\'highlight.js\');\n\n// If you know the language\nhljs.highlight(lang, code).value;\n\n// Automatic language detection\nhljs.highlightAuto(code).value;','<span class=\"comment\">// https://github.com/isagalaev/highlight.js</span>\n<span class=\"keyword\">var</span> hljs = require(<span class=\"string\">\'highlight.js\'</span>);\n\n<span class=\"comment\">// If you know the language</span>\nhljs.highlight(lang, code).<span class=\"keyword\">value</span>;\n\n<span class=\"comment\">// Automatic language detection</span>\nhljs.highlightAuto(code).<span class=\"keyword\">value</span>;','2013-06-18 13:45:19','2013-06-18 18:41:06'),(66,16,'node-webkit Manifest format','node-webkit Manifest format','{\n  \"main\": \"index.html\",\n  \"name\": \"nw-demo\",\n  \"description\": \"demo app of node-webkit\",\n  \"version\": \"0.1.0\",\n  \"keywords\": [ \"demo\", \"node-webkit\" ],\n  \"window\": {\n    \"icon\": \"link.png\",\n    \"toolbar\": true,\n    \"frame\": false,\n    \"width\": 800,\n    \"height\": 500,\n    \"position\": \"mouse\",\n    \"min_width\": 400,\n    \"min_height\": 200,\n    \"max_width\": 800,\n    \"max_height\": 600\n  },\n  \"webkit\": {\n    \"plugin\": true\n  }\n}','{\n  \"<span class=\"attribute\">main</span>\": <span class=\"value\"><span class=\"string\">\"index.html\"</span></span>,\n  \"<span class=\"attribute\">name</span>\": <span class=\"value\"><span class=\"string\">\"nw-demo\"</span></span>,\n  \"<span class=\"attribute\">description</span>\": <span class=\"value\"><span class=\"string\">\"demo app of node-webkit\"</span></span>,\n  \"<span class=\"attribute\">version</span>\": <span class=\"value\"><span class=\"string\">\"0.1.0\"</span></span>,\n  \"<span class=\"attribute\">keywords</span>\": <span class=\"value\">[ <span class=\"string\">\"demo\"</span>, <span class=\"string\">\"node-webkit\"</span> ]</span>,\n  \"<span class=\"attribute\">window</span>\": <span class=\"value\">{\n    \"<span class=\"attribute\">icon</span>\": <span class=\"value\"><span class=\"string\">\"link.png\"</span></span>,\n    \"<span class=\"attribute\">toolbar</span>\": <span class=\"value\"><span class=\"literal\">true</span></span>,\n    \"<span class=\"attribute\">frame</span>\": <span class=\"value\"><span class=\"literal\">false</span></span>,\n    \"<span class=\"attribute\">width</span>\": <span class=\"value\"><span class=\"number\">800</span></span>,\n    \"<span class=\"attribute\">height</span>\": <span class=\"value\"><span class=\"number\">500</span></span>,\n    \"<span class=\"attribute\">position</span>\": <span class=\"value\"><span class=\"string\">\"mouse\"</span></span>,\n    \"<span class=\"attribute\">min_width</span>\": <span class=\"value\"><span class=\"number\">400</span></span>,\n    \"<span class=\"attribute\">min_height</span>\": <span class=\"value\"><span class=\"number\">200</span></span>,\n    \"<span class=\"attribute\">max_width</span>\": <span class=\"value\"><span class=\"number\">800</span></span>,\n    \"<span class=\"attribute\">max_height</span>\": <span class=\"value\"><span class=\"number\">600</span>\n  }</span></span>,\n  \"<span class=\"attribute\">webkit</span>\": <span class=\"value\">{\n    \"<span class=\"attribute\">plugin</span>\": <span class=\"value\"><span class=\"literal\">true</span>\n  }</span>\n}</span>','2013-06-18 13:45:19','2013-06-20 02:54:57'),(67,18,'AngularJS Animation module','AngularJS Animation module.\nsource: http://www.yearofmoo.com/2013/04/animation-in-angularjs.html','//you can inject stuff!\nmyModule.animation(\'cool-animation\', [\'$rootScope\', function($rootScope) {\n  return { \n    setup : function(element) {\n      //this is called before the animation\n      jQuery(element).css({\n        \'border-width\':0\n      }); \n    },\n    start : function(element, done, memo) {\n      //this is where the animation is expected to be run\n      jQuery(element).animate({\n        \'border-width\':20\n      }, function() {\n        //call done to close when the animation is complete\n        done(); \n      });\n    },\n    cancel : function(element, done) {\n      //this is called when another animation is started\n      //whilst the previous animation is still chugging away\n    }   \n  };\n}]);','<span class=\"comment\">//you can inject stuff!</span>\nmyModule.animation(<span class=\"string\">\'cool-animation\'</span>, [<span class=\"string\">\'$rootScope\'</span>, <span class=\"keyword\">function</span>($rootScope) {\n  <span class=\"keyword\">return</span> { \n    setup : <span class=\"keyword\">function</span>(element) {\n      <span class=\"comment\">//this is called before the animation</span>\n      jQuery(element).css({\n        <span class=\"string\">\'border-width\'</span>:<span class=\"number\">0</span>\n      }); \n    },\n    start : <span class=\"keyword\">function</span>(element, done, memo) {\n      <span class=\"comment\">//this is where the animation is expected to be run</span>\n      jQuery(element).animate({\n        <span class=\"string\">\'border-width\'</span>:<span class=\"number\">20</span>\n      }, <span class=\"keyword\">function</span>() {\n        <span class=\"comment\">//call done to close when the animation is complete</span>\n        done(); \n      });\n    },\n    cancel : <span class=\"keyword\">function</span>(element, done) {\n      <span class=\"comment\">//this is called when another animation is started</span>\n      <span class=\"comment\">//whilst the previous animation is still chugging away</span>\n    }   \n  };\n}]);','2013-06-18 13:45:19','2013-06-20 02:54:48'),(68,7,'LESS MIXINS','LESS MIXINS','.rounded-corners (@radius: 5px) {\n  -webkit-border-radius: @radius;\n  -moz-border-radius: @radius;\n  -ms-border-radius: @radius;\n  -o-border-radius: @radius;\n  border-radius: @radius;\n}\n\n#header {\n  .rounded-corners;\n}\n#footer {\n  .rounded-corners(10px);\n}','.rounded-corners (<span class=\"variable\">@radius</span><span class=\"symbol\">:</span> <span class=\"number\">5</span>px) {\n  -webkit-border-<span class=\"symbol\">radius:</span> <span class=\"variable\">@radius</span>;\n  -moz-border-<span class=\"symbol\">radius:</span> <span class=\"variable\">@radius</span>;\n  -ms-border-<span class=\"symbol\">radius:</span> <span class=\"variable\">@radius</span>;\n  -o-border-<span class=\"symbol\">radius:</span> <span class=\"variable\">@radius</span>;\n  border-<span class=\"symbol\">radius:</span> <span class=\"variable\">@radius</span>;\n}\n\n<span class=\"comment\">#header {</span>\n  .rounded-corners;\n}\n<span class=\"comment\">#footer {</span>\n  .rounded-corners(<span class=\"number\">10</span>px);\n}','2013-06-18 13:45:19','2013-06-20 02:53:30'),(69,18,'Angular JS and Radio buttons','Angular JS and Radio buttons','=== script.js ===\nfunction Ctrl($scope) {\n    \n  $scope.items = [{ color: \"red\" },{ color: \"green\" },{ color: \"blue\" }]\n    \n  $scope.color = \'blue\';\n}\n\n=== index.html ===\n<div ng-app=\"\">\n  <form name=\"myForm\" ng-controller=\"Ctrl\">\n    <input ng-repeat=\"item in items\" \n      type=\"radio\" ng-model=\"$parent.color\" value=\"{{item.color}}\">  <br/>\n    <tt>color = {{color}}</tt><br/>\n   </form>\n</div>','=== script.js ===\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Ctrl</span><span class=\"params\">($scope)</span> {</span>\n    \n  $scope.items = [{ color: <span class=\"string\">\"red\"</span> },{ color: <span class=\"string\">\"green\"</span> },{ color: <span class=\"string\">\"blue\"</span> }]\n    \n  $scope.color = <span class=\"string\">\'blue\'</span>;\n}\n\n=== index.html ===\n<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">ng-app</span>=<span class=\"value\">\"\"</span>&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"title\">form</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"myForm\"</span> <span class=\"attribute\">ng-controller</span>=<span class=\"value\">\"Ctrl\"</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">input</span> <span class=\"attribute\">ng-repeat</span>=<span class=\"value\">\"item in items\"</span> \n      <span class=\"attribute\">type</span>=<span class=\"value\">\"radio\"</span> <span class=\"attribute\">ng-model</span>=<span class=\"value\">\"$parent.color\"</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"{{item.color}}\"</span>&gt;</span>  <span class=\"tag\">&lt;<span class=\"title\">br</span>/&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">tt</span>&gt;</span>color = {{color}}<span class=\"tag\">&lt;/<span class=\"title\">tt</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">br</span>/&gt;</span>\n   <span class=\"tag\">&lt;/<span class=\"title\">form</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></span>','2013-06-18 13:45:19','2013-06-18 18:42:46'),(70,7,'CSS Word wrap','CSS Word wrap','/* http://www.alsacreations.com/tuto/lire/1038-gerer-debordement-contenu-css.html */\np {\n  width: 100px;\n  margin: auto;\n  padding: 10px;\n  background: green;\n  color: #fff;\n  font-size: 1.2em;  \n  word-wrap: break-word;   \n}','<span class=\"comment\">/* http://www.alsacreations.com/tuto/lire/1038-gerer-debordement-contenu-css.html */</span>\n<span class=\"tag\">p</span> <span class=\"rules\">{\n  <span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"> <span class=\"number\">100</span>px;</span></span>\n  <span class=\"rule\"><span class=\"attribute\">margin</span>:<span class=\"value\"> auto;</span></span>\n  <span class=\"rule\"><span class=\"attribute\">padding</span>:<span class=\"value\"> <span class=\"number\">10</span>px;</span></span>\n  <span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"> green;</span></span>\n  <span class=\"rule\"><span class=\"attribute\">color</span>:<span class=\"value\"> <span class=\"hexcolor\">#fff</span>;</span></span>\n  <span class=\"rule\"><span class=\"attribute\">font-size</span>:<span class=\"value\"> <span class=\"number\">1.2</span>em;</span></span>  \n  <span class=\"rule\"><span class=\"attribute\">word-wrap</span>:<span class=\"value\"> break-word;</span></span>   \n<span class=\"rule\">}</span></span>','2013-06-18 13:45:19','2013-06-20 02:53:15'),(71,18,'Create a Runtime JavaScript Script Tag Using a Blob','Create a Runtime JavaScript Script Tag Using a Blob','function () {\n            window.URL = window.URL || window.webkitURL;\n            function contentLoaded() {\n                var blob = new Blob([\'alert(\"hello\")\'], { type: \'text/javascript\' });\n                var script = document.createElement(\'script\');\n                script.setAttribute(\'src\', window.URL.createObjectURL(blob));\n                document.body.appendChild(script);\n            }\n            window.addEventListener(\'DOMContentLoaded\', contentLoaded, false);\n        }','<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n            window.URL = window.URL || window.webkitURL;\n            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">contentLoaded</span><span class=\"params\">()</span> {</span>\n                <span class=\"keyword\">var</span> blob = <span class=\"keyword\">new</span> Blob([<span class=\"string\">\'alert(\"hello\")\'</span>], { type: <span class=\"string\">\'text/javascript\'</span> });\n                <span class=\"keyword\">var</span> script = document.createElement(<span class=\"string\">\'script\'</span>);\n                script.setAttribute(<span class=\"string\">\'src\'</span>, window.URL.createObjectURL(blob));\n                document.body.appendChild(script);\n            }\n            window.addEventListener(<span class=\"string\">\'DOMContentLoaded\'</span>, contentLoaded, <span class=\"literal\">false</span>);\n        }','2013-06-18 13:45:19','2013-06-18 18:39:48'),(73,7,'CSS nth-child','Snippet Descrition','=== index.html ===\n<ul>\n    <li>Look at me!</li>\n    <li>I\'m so f---ing awesome!</li>\n    <li>How awesome?</li>\n    <li>Too awesome for jQuery.</li>\n    <li>jQuery SUCKS!</li>\n    <li>Seriously, dude, there is literally no reason to use it.</li>\n    <li>jQuery is like a sledgehammer.</li>\n    <li>It might be good at some tasks, like sledgehamming :p</li>\n    <li>But for the most part it is excessive.</li>\n    <li>You wouldn\'t hang a picture with a sledgehammer, would you?</li>\n    <li>Well, bye!</li>\n</ul>\n\n=== index.css ===\n\nli:nth-child(4n+5) {border-top:1px solid black}','=== index.html ===\n<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"title\">ul</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span>Look at me!<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span>I\'m so f---ing awesome!<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span>How awesome?<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span>Too awesome for jQuery.<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span>jQuery SUCKS!<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span>Seriously, dude, there is literally no reason to use it.<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span>jQuery is like a sledgehammer.<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span>It might be good at some tasks, like sledgehamming :p<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span>But for the most part it is excessive.<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span>You wouldn\'t hang a picture with a sledgehammer, would you?<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span>Well, bye!<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">ul</span>&gt;</span>\n\n=== index.css ===\n\nli:nth-child(4n+5) {border-top:1px solid black}</span>','2013-06-18 13:45:19','2013-06-20 02:55:18'),(74,18,'AngularJS Using Filters in select','AngularJS Using Filters in select','=== index.html ===\n<body ng-app=\"selectOptions\" ng-controller=\"MainCtrl\">\n	<h1>Options in Array | No Null Option</h1>\n    <select ng-options=\"option | lowercase for option in optionsArrayA\" ng-model=\"chosenFromArrayA\"></select>\n    <p>Chosen: <i>{{chosenFromArrayA}}</i></p>\n    \n	<h1>Options in Array | Null is an Option</h1>\n    <select ng-options=\"option | lowercase for option in optionsArrayB\" ng-model=\"chosenFromArrayB\">\n    	<option value=\"\">-- Pick One -- </option>\n    </select>\n    <p>Chosen: <i>{{chosenFromArrayB}}</i></p>\n    \n	<h1>Options in Object | No Null Option</h1>\n    <select ng-options=\"value.name | uppercase for (key, value) in optionsObjectA\" ng-model=\"chosenFromObjectA\"></select>\n    <p>Chosen: <i>{{chosenFromObjectA}}</i></p>\n    \n	<h1>Options in Object | No Null Option</h1>\n    <select ng-options=\"value.name | uppercase for (key, value) in optionsObjectB\" ng-model=\"chosenFromObjectB\">\n        <option value=\"\">-- Pick One -- </option>\n    </select>\n    <p>Chosen: <i>{{chosenFromObjectB}}</i></p>\n</body>\n\n=== script.js ===\n\nvar app = angular.module(\'selectOptions\', []);\n\napp.controller(\'MainCtrl\', function ($scope) {\n    $scope.optionsArrayA = [\n        \'FOO\',\n        \'BAR\',\n        \'BAZ\'\n    ];\n\n    $scope.chosenFromArrayA = \"BAR\";\n\n    $scope.optionsArrayB = [\n        \'FOO\',\n        \'BAR\',\n        \'BAZ\'\n    ];\n\n    $scope.chosenFromArrayB = null;\n\n    $scope.optionsObjectA = {\n        \'john\': {\n            \'name\': \'John\',\n            \'age\': 30\n        },\n        \'bill\': {\n            \'name\': \'Bill\',\n            \'age\': 40\n        },\n        \'sue\': {\n            \'name\': \'Sue\',\n            \'age\': 50\n        },\n        \'mary\': {\n            \'name\': \'Mary\',\n            \'age\': 60\n        }\n    };\n\n    $scope.chosenFromObjectA = $scope.optionsObjectA[\'john\'];\n\n    $scope.optionsObjectB = {\n        \'john\': {\n            \'name\': \'John\',\n            \'age\': 30\n        },\n        \'bill\': {\n            \'name\': \'Bill\',\n            \'age\': 40\n        },\n        \'sue\': {\n            \'name\': \'Sue\',\n            \'age\': 50\n        },\n        \'mary\': {\n            \'name\': \'Mary\',\n            \'age\': 60\n        }\n    };\n\n    $scope.chosenFromObjectB = null;\n});\n\n=== styles.css ===\n\nbody {padding: 10px; font-family:\'arial\';}\nh1 {color:gray; font-size:20px; margin:10px 0; border-top:3px solid #fea; padding-top:10px;}\nh1:first-child {border-top:none;}\nselect {margin-bottom:10px;}','=== index.html ===\n<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"title\">body</span> <span class=\"attribute\">ng-app</span>=<span class=\"value\">\"selectOptions\"</span> <span class=\"attribute\">ng-controller</span>=<span class=\"value\">\"MainCtrl\"</span>&gt;</span>\n	<span class=\"tag\">&lt;<span class=\"title\">h1</span>&gt;</span>Options in Array | No Null Option<span class=\"tag\">&lt;/<span class=\"title\">h1</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">select</span> <span class=\"attribute\">ng-options</span>=<span class=\"value\">\"option | lowercase for option in optionsArrayA\"</span> <span class=\"attribute\">ng-model</span>=<span class=\"value\">\"chosenFromArrayA\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">select</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span>Chosen: <span class=\"tag\">&lt;<span class=\"title\">i</span>&gt;</span>{{chosenFromArrayA}}<span class=\"tag\">&lt;/<span class=\"title\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span>\n    \n	<span class=\"tag\">&lt;<span class=\"title\">h1</span>&gt;</span>Options in Array | Null is an Option<span class=\"tag\">&lt;/<span class=\"title\">h1</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">select</span> <span class=\"attribute\">ng-options</span>=<span class=\"value\">\"option | lowercase for option in optionsArrayB\"</span> <span class=\"attribute\">ng-model</span>=<span class=\"value\">\"chosenFromArrayB\"</span>&gt;</span>\n    	<span class=\"tag\">&lt;<span class=\"title\">option</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"\"</span>&gt;</span>-- Pick One -- <span class=\"tag\">&lt;/<span class=\"title\">option</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"title\">select</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span>Chosen: <span class=\"tag\">&lt;<span class=\"title\">i</span>&gt;</span>{{chosenFromArrayB}}<span class=\"tag\">&lt;/<span class=\"title\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span>\n    \n	<span class=\"tag\">&lt;<span class=\"title\">h1</span>&gt;</span>Options in Object | No Null Option<span class=\"tag\">&lt;/<span class=\"title\">h1</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">select</span> <span class=\"attribute\">ng-options</span>=<span class=\"value\">\"value.name | uppercase for (key, value) in optionsObjectA\"</span> <span class=\"attribute\">ng-model</span>=<span class=\"value\">\"chosenFromObjectA\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">select</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span>Chosen: <span class=\"tag\">&lt;<span class=\"title\">i</span>&gt;</span>{{chosenFromObjectA}}<span class=\"tag\">&lt;/<span class=\"title\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span>\n    \n	<span class=\"tag\">&lt;<span class=\"title\">h1</span>&gt;</span>Options in Object | No Null Option<span class=\"tag\">&lt;/<span class=\"title\">h1</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">select</span> <span class=\"attribute\">ng-options</span>=<span class=\"value\">\"value.name | uppercase for (key, value) in optionsObjectB\"</span> <span class=\"attribute\">ng-model</span>=<span class=\"value\">\"chosenFromObjectB\"</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">option</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"\"</span>&gt;</span>-- Pick One -- <span class=\"tag\">&lt;/<span class=\"title\">option</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"title\">select</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span>Chosen: <span class=\"tag\">&lt;<span class=\"title\">i</span>&gt;</span>{{chosenFromObjectB}}<span class=\"tag\">&lt;/<span class=\"title\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">body</span>&gt;</span>\n\n=== script.js ===\n\nvar app = angular.module(\'selectOptions\', []);\n\napp.controller(\'MainCtrl\', function ($scope) {\n    $scope.optionsArrayA = [\n        \'FOO\',\n        \'BAR\',\n        \'BAZ\'\n    ];\n\n    $scope.chosenFromArrayA = \"BAR\";\n\n    $scope.optionsArrayB = [\n        \'FOO\',\n        \'BAR\',\n        \'BAZ\'\n    ];\n\n    $scope.chosenFromArrayB = null;\n\n    $scope.optionsObjectA = {\n        \'john\': {\n            \'name\': \'John\',\n            \'age\': 30\n        },\n        \'bill\': {\n            \'name\': \'Bill\',\n            \'age\': 40\n        },\n        \'sue\': {\n            \'name\': \'Sue\',\n            \'age\': 50\n        },\n        \'mary\': {\n            \'name\': \'Mary\',\n            \'age\': 60\n        }\n    };\n\n    $scope.chosenFromObjectA = $scope.optionsObjectA[\'john\'];\n\n    $scope.optionsObjectB = {\n        \'john\': {\n            \'name\': \'John\',\n            \'age\': 30\n        },\n        \'bill\': {\n            \'name\': \'Bill\',\n            \'age\': 40\n        },\n        \'sue\': {\n            \'name\': \'Sue\',\n            \'age\': 50\n        },\n        \'mary\': {\n            \'name\': \'Mary\',\n            \'age\': 60\n        }\n    };\n\n    $scope.chosenFromObjectB = null;\n});\n\n=== styles.css ===\n\nbody {padding: 10px; font-family:\'arial\';}\nh1 {color:gray; font-size:20px; margin:10px 0; border-top:3px solid #fea; padding-top:10px;}\nh1:first-child {border-top:none;}\nselect {margin-bottom:10px;}</span>','2013-06-18 15:39:25','2013-06-19 15:24:33'),(75,18,'AngularJS interceptor ( method 1 )','AngularJS interceptor ( method 1 )','myModule.factory(\'myHttpInterceptor\', function ($q) {\n    return function (promise) {\n        return promise.then(function (response) {\n            // do something on success\n            if(response.headers()[\'content-type\'] === \"application/json; charset=utf-8\"){\n                // Validate response if not ok reject\n                var data = examineJSONResponse(response); // assumes this function is available\n\n                if(!data)\n                    return $q.reject(response);\n            }\n            return response;\n        }, function (response) {\n            // do something on error\n            return $q.reject(response);\n        });\n    };\n});\nmyModule.config(function ($httpProvider) {\n    $httpProvider.responseInterceptors.push(\'myHttpInterceptor\');\n});','myModule.factory(<span class=\"string\">\'myHttpInterceptor\'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(<span class=\"variable\">$q</span>)</span> {</span>\n    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(promise)</span> {</span>\n        <span class=\"keyword\">return</span> promise.then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(response)</span> {</span>\n            <span class=\"comment\">// do something on success</span>\n            <span class=\"keyword\">if</span>(response.headers()[<span class=\"string\">\'content-type\'</span>] === <span class=\"string\">\"application/json; charset=utf-8\"</span>){\n                <span class=\"comment\">// Validate response if not ok reject</span>\n                <span class=\"keyword\">var</span> data = examineJSONResponse(response); <span class=\"comment\">// assumes this function is available</span>\n\n                <span class=\"keyword\">if</span>(!data)\n                    <span class=\"keyword\">return</span> <span class=\"variable\">$q</span>.reject(response);\n            }\n            <span class=\"keyword\">return</span> response;\n        }, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(response)</span> {</span>\n            <span class=\"comment\">// do something on error</span>\n            <span class=\"keyword\">return</span> <span class=\"variable\">$q</span>.reject(response);\n        });\n    };\n});\nmyModule.config(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(<span class=\"variable\">$httpProvider</span>)</span> {</span>\n    <span class=\"variable\">$httpProvider</span>.responseInterceptors.push(<span class=\"string\">\'myHttpInterceptor\'</span>);\n});','2013-06-18 18:27:20','2013-06-18 18:38:29'),(78,18,'HTML5 Notification API','HTML5 Notification API','new Notification(\"New Email Received\",\n                 { iconUrl: \"mail.png\",\n                   onshow: function() { setTimeout(notification.close(), 15000); }\n                 });\n\nnew Notification(\"Meeting about to begin\",\n                 { iconUrl: \"calendar.gif\",\n                   body: \"Room 101\",\n                   onclose: function() { cancelReminders(event); }\n                 });\n\n//Using the tag member for multiple instances\n                                 \n                                             \n// Instance notices there is new mail.       \nnew Notification(\"New mail from John Doe\",   \n                 { tag: \'message1\' });','<span class=\"keyword\">new</span> Notification(<span class=\"string\">\"New Email Received\"</span>,\n                 { iconUrl: <span class=\"string\">\"mail.png\"</span>,\n                   onshow: <span class=\"keyword\">function</span>() { setTimeout(notification.close(), <span class=\"number\">15000</span>); }\n                 });\n\n<span class=\"keyword\">new</span> Notification(<span class=\"string\">\"Meeting about to begin\"</span>,\n                 { iconUrl: <span class=\"string\">\"calendar.gif\"</span>,\n                   body: <span class=\"string\">\"Room 101\"</span>,\n                   onclose: <span class=\"keyword\">function</span>() { cancelReminders(event); }\n                 });\n\n<span class=\"comment\">//Using the tag member for multiple instances</span>\n                                 \n                                             \n<span class=\"comment\">// Instance notices there is new mail.       </span>\n<span class=\"keyword\">new</span> Notification(<span class=\"string\">\"New mail from John Doe\"</span>,   \n                 { tag: <span class=\"string\">\'message1\'</span> });','2013-06-18 20:05:35','2013-06-18 20:13:44'),(79,21,'Doctrine DBAL query builder LIKE','Doctrine DBAL query builder LIKE','<?php\n$connection = $this->provider->getConnection();\n        /** @var Connection $connection */\n        $qb = $connection->createQueryBuilder();\n        $qb->select(\" * \")->from(\"{$this->provider->getName()}\", \"s\");\n        $qb->where(\"s.title LIKE :search \");\n        $qb->setParameter(\"search\", \"%\" . $search . \"%\");\n        $stmt = $qb->execute();','&lt;?php\n<span class=\"variable\">$connection</span> = <span class=\"variable\">$this</span>-&gt;provider-&gt;getConnection();\n        <span class=\"regexp\">/** @var Connection $connection */</span>\n        <span class=\"variable\">$qb</span> = <span class=\"variable\">$connection</span>-&gt;createQueryBuilder();\n        <span class=\"variable\">$qb</span>-&gt;select(<span class=\"string\">\" * \"</span>)-&gt;from(<span class=\"string\">\"{<span class=\"variable\">$this</span>-&gt;provider-&gt;getName()}\"</span>, <span class=\"string\">\"s\"</span>);\n        <span class=\"variable\">$qb</span>-&gt;where(<span class=\"string\">\"s.title LIKE :search \"</span>);\n        <span class=\"variable\">$qb</span>-&gt;setParameter(<span class=\"string\">\"search\"</span>, <span class=\"string\">\"<span class=\"variable\">%\"</span> . <span class=\"variable\">$search</span> . \"</span><span class=\"variable\">%\"</span>);\n        <span class=\"variable\">$stmt</span> = <span class=\"variable\">$qb</span>-&gt;execute();','2013-06-19 15:02:05','2013-06-19 15:04:59'),(80,25,'SQL DELETE','SQL DELETE','DELETE FROM \"nom de table\"\nWHERE {condition}\n\nDELETE FROM Store_Information\nWHERE store_name = \"Los Angeles\"','<span class=\"operator\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> <span class=\"string\">\"nom de table\"</span>\n<span class=\"keyword\">WHERE</span> {condition}\n\n<span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> Store_Information\n<span class=\"keyword\">WHERE</span> store_name = <span class=\"string\">\"Los Angeles\"</span>','2013-06-19 15:36:42','2013-06-19 15:36:42'),(81,21,'Creating Web Page Templates with PHP and Twig','shell> pear channel-discover pear.twig-project.org shell> pear install twig/Twig','<html>\n  <head></head>\n  <body>\n  <h2>Account successfully created!</h2>\n\n  <p>Hello {{ name }}</p>\n\n  <p>Thank you for registering with us. Your account details are as follows: </p>\n\n  <p style=\"margin-left: 10px\">\n  Username: {{ username }} <br/>\n  Password: {{ password }}\n  </p>\n\n  <p>You\'ve already been logged in, so go on in and have some fun!</p>\n  </body>\n</html>','<span class=\"tag\">&lt;<span class=\"title\">html</span>&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"title\">head</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">head</span>&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"title\">body</span>&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"title\">h2</span>&gt;</span>Account successfully created!<span class=\"tag\">&lt;/<span class=\"title\">h2</span>&gt;</span>\n\n  <span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span>Hello {{ name }}<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span>\n\n  <span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span>Thank you for registering with us. Your account details are as follows: <span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span>\n\n  <span class=\"tag\">&lt;<span class=\"title\">p</span> <span class=\"attribute\">style</span>=<span class=\"value\">\"margin-left: 10px\"</span>&gt;</span>\n  Username: {{ username }} <span class=\"tag\">&lt;<span class=\"title\">br</span>/&gt;</span>\n  Password: {{ password }}\n  <span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span>\n\n  <span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span>You\'ve already been logged in, so go on in and have some fun!<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span>\n  <span class=\"tag\">&lt;/<span class=\"title\">body</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">html</span>&gt;</span>','2013-06-19 15:38:02','2013-06-19 15:38:02'),(82,3,'Extract Audio from Video Files to WAV using FFmpeg','Extract Audio from Video Files to WAV using FFmpeg','ffmpeg -i video.mkv -acodec pcm_s16le -ac 2 audio.wav','ffmpeg -i video.mkv -acodec pcm_s16le -ac 2 audio.wav','2013-06-20 02:10:27','2013-06-20 02:10:27');
/*!40000 ALTER TABLE `snippet` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2013-06-23  1:07:58
