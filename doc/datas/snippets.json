[
    {
        "id":"1",
        "0":"1",
        "title":"Javascript Alert",
        "1":"Javascript Alert",
        "description":"Javascript Alert",
        "2":"Javascript Alert",
        "content":"<script type='text\/javascript'>\r\nwindow.alert(\"blop\");\r\n<\/script>",
        "3":"<script type='text\/javascript'>\r\nwindow.alert(\"blop\");\r\n<\/script>",
        "created":"1334158915",
        "4":"1334158915",
        "updated":"1334158915",
        "5":"1334158915",
        "category_id":"2",
        "6":"2",
        "user_id":"2",
        "7":"2",
        "private":"1",
        "8":"1",
        "rating":"0",
        "9":"0",
        "favorite":"0",
        "10":"0",
        "active":"0",
        "11":"0"
    },
    {
        "id":"2",
        "0":"2",
        "title":"SQL DELETE",
        "1":"SQL DELETE",
        "description":"SQL DELETE",
        "2":"SQL DELETE",
        "content":"\r\nDELETE FROM \"nom de table\"\r\nWHERE {condition}\r\n\r\nDELETE FROM Store_Information\r\nWHERE store_name = \"Los Angeles\"\r\n\r\n",
        "3":"\r\nDELETE FROM \"nom de table\"\r\nWHERE {condition}\r\n\r\nDELETE FROM Store_Information\r\nWHERE store_name = \"Los Angeles\"\r\n\r\n",
        "created":"1334158967",
        "4":"1334158967",
        "updated":"1334158967",
        "5":"1334158967",
        "category_id":"6",
        "6":"6",
        "user_id":"2",
        "7":"2",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"0",
        "10":"0",
        "active":"0",
        "11":"0"
    },
    {
        "id":"3",
        "0":"3",
        "title":"Manipulating Configuration Data with Zend_Config",
        "1":"Manipulating Configuration Data with Zend_Config",
        "description":"Manipulating Configuration Data with Zend_Config",
        "2":"Manipulating Configuration Data with Zend_Config",
        "content":"\/\/ XML\r\n\r\n<?xml version='1.0'?>\r\n<config>\r\n  <dialer>\r\n    <number>12345678<\/number>\r\n    <retries>15<\/retries>\r\n    <protocol>ppp<\/protocol>\r\n  <\/dialer>\r\n<\/config>\r\n\r\n\/\/ PHP \r\n\r\n<?php\r\n\/\/ include auto-loader class\r\nrequire_once 'Zend\/Loader\/Autoloader.php';\r\n\r\n\/\/ register auto-loader\r\n$loader = Zend_Loader_Autoloader::getInstance();\r\n\r\n\/\/ read XML config file\r\n$config = new Zend_Config_Xml('config.xml', 'dialer');\r\n\r\n\/\/ access individual nodes\r\nprintf(\"Number: %s \\r\\n\", $config->number);\r\nprintf(\"Retries: %s \\r\\n\", $config->retries);\r\nprintf(\"Protocol: %s \\r\\n\", $config->protocol);\r\n?>",
        "3":"\/\/ XML\r\n\r\n<?xml version='1.0'?>\r\n<config>\r\n  <dialer>\r\n    <number>12345678<\/number>\r\n    <retries>15<\/retries>\r\n    <protocol>ppp<\/protocol>\r\n  <\/dialer>\r\n<\/config>\r\n\r\n\/\/ PHP \r\n\r\n<?php\r\n\/\/ include auto-loader class\r\nrequire_once 'Zend\/Loader\/Autoloader.php';\r\n\r\n\/\/ register auto-loader\r\n$loader = Zend_Loader_Autoloader::getInstance();\r\n\r\n\/\/ read XML config file\r\n$config = new Zend_Config_Xml('config.xml', 'dialer');\r\n\r\n\/\/ access individual nodes\r\nprintf(\"Number: %s \\r\\n\", $config->number);\r\nprintf(\"Retries: %s \\r\\n\", $config->retries);\r\nprintf(\"Protocol: %s \\r\\n\", $config->protocol);\r\n?>",
        "created":"1334159127",
        "4":"1334159127",
        "updated":"1334159127",
        "5":"1334159127",
        "category_id":"1",
        "6":"1",
        "user_id":"2",
        "7":"2",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"0",
        "10":"0",
        "active":"0",
        "11":"0"
    },
    {
        "id":"4",
        "0":"4",
        "title":"C# convert video using FFMPEG",
        "1":"C# convert video using FFMPEG",
        "description":"C# convert video using FFMPEG",
        "2":"C# convert video using FFMPEG",
        "content":"\/\/ console application\r\nusing System;\r\nusing System.IO;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nnamespace flvToMp4\r\n{\r\n    class Program\r\n    {\r\n        private const string DEFAULT_DIRECTORY = @\"C:\\Users\\mark prades\\Videos\";\r\n        private string[] INPUT_FILE_FORMATS = { \"flv\", \"avi\", \"wmv\" };\r\n        private string[] OUTPUT_FILE_FORMATS = { \"mp4\" };\r\n        private DirectoryInfo directoryInfo;\r\n        private FileInfo[] files;\r\n        private string output_file_format;\r\n        public Program()\r\n        {\r\n            Console.WriteLine(\"Movie converter ( using FFMPEG )\");\r\n        }\r\n        static void Main(string[] args)\r\n        {\r\n            \/\/TODO r\u00e9cuperer les param\u00e8tres d'application\r\n            \/\/@TODO v\u00e9rifier si le premier param\u00e8tre est un r\u00e9pertoire\r\n            \/\/@TODO v\u00e9rifier si le second param\u00e8tre est un type de fichier si oui\r\n            \/\/@TODO v\u00e9rifier si le troisi\u00e8me param\u00e8tre est un type de fichier\r\n            \/\/@TODO sinon , utiliser les valeurs par d\u00e9faut\r\n            var program = new Program();\r\n            switch (args.Length)\r\n            {\r\n                case 1:\r\n                    if (Directory.Exists(args[0]))\r\n                    {\r\n                        program.processFiles(args[0]);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    if (Directory.Exists(args[0]))\r\n                    {\r\n                        program.processFiles(args[0], args[1]);\r\n                    }\r\n                    break;\r\n                default:\r\n                    program.processFiles(DEFAULT_DIRECTORY);\r\n                    break;\r\n            }\r\n        }\r\n        private void processFiles(string directory, string output_file_format = \"mp4\")\r\n        {\r\n            this.output_file_format = output_file_format;\r\n            \/\/ cr\u00e9er un objet pour le r\u00e9pertoire\r\n            directoryInfo = new DirectoryInfo(directory);\r\n            \/\/ r\u00e9cup\u00e8re les fichiers du r\u00e9pertoire\r\n            \/\/ en filtrant les fichiers suivant les extensions contenues tableau INPUT_FILE_FORMATS\r\n            \/\/ ( on teste chaque extension en elevant le .\r\n            this.files = directoryInfo.GetFiles().Where(\r\n                c => INPUT_FILE_FORMATS.Contains(c.Extension.Remove(0, 1))\r\n                ).ToArray();\r\n            \/\/ on traite chaque fichier avec FFMPEG\r\n            \/\/ id\u00e9allement , on lance FFMEG et on \r\n            \/\/ attend la fin de chaque traitement pour lancer le traitement suivant\r\n            files = files.OrderBy(o=>o.Length).ToArray();\r\n            files.All(c => { Console.WriteLine(c.ToString()); return true; });\r\n            if (files.Length > 0)\r\n            {\r\n                processMovieFile(files.First(), output_file_format);\r\n            }\r\n            Console.ReadLine();\r\n        }\r\n        private void processMovieFile(FileInfo fileInfo,string output_file_format)\r\n        {\r\n            System.Diagnostics.ProcessStartInfo myInfo =\r\n                new System.Diagnostics.ProcessStartInfo();\r\n            myInfo.FileName = \"ffmpeg\";\r\n            myInfo.Arguments = \" -y -i \\\"\" + fileInfo.Name +\"\\\"  \\\"\"+\r\n              fileInfo.Name.Remove(fileInfo.Name.LastIndexOf(fileInfo.Extension))+\".\"+output_file_format+\"\\\" \";\r\n            myInfo.WorkingDirectory = directoryInfo.FullName;\r\n            System.Diagnostics.Process process = new System.Diagnostics.Process();\r\n            process.EnableRaisingEvents = true;\r\n            process.Exited += new EventHandler(process_Exited);\r\n            process.StartInfo = myInfo;\r\n            process.StartInfo.RedirectStandardOutput = true;\r\n            process.StartInfo.UseShellExecute = false;\r\n            process.Start();\r\n        }\r\n        void process_Exited(object sender, EventArgs e)\r\n        {\r\n            \/\/throw new NotImplementedException();\r\n            Console.WriteLine(\"end of process\");\r\n            files = files.Where(c => c != files.First()).ToArray();\r\n            if (files.Length > 0)\r\n            {\r\n                processMovieFile(files.First(), output_file_format);\r\n            }\r\n        }\r\n    }\r\n}\r\n",
        "3":"\/\/ console application\r\nusing System;\r\nusing System.IO;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nnamespace flvToMp4\r\n{\r\n    class Program\r\n    {\r\n        private const string DEFAULT_DIRECTORY = @\"C:\\Users\\mark prades\\Videos\";\r\n        private string[] INPUT_FILE_FORMATS = { \"flv\", \"avi\", \"wmv\" };\r\n        private string[] OUTPUT_FILE_FORMATS = { \"mp4\" };\r\n        private DirectoryInfo directoryInfo;\r\n        private FileInfo[] files;\r\n        private string output_file_format;\r\n        public Program()\r\n        {\r\n            Console.WriteLine(\"Movie converter ( using FFMPEG )\");\r\n        }\r\n        static void Main(string[] args)\r\n        {\r\n            \/\/TODO r\u00e9cuperer les param\u00e8tres d'application\r\n            \/\/@TODO v\u00e9rifier si le premier param\u00e8tre est un r\u00e9pertoire\r\n            \/\/@TODO v\u00e9rifier si le second param\u00e8tre est un type de fichier si oui\r\n            \/\/@TODO v\u00e9rifier si le troisi\u00e8me param\u00e8tre est un type de fichier\r\n            \/\/@TODO sinon , utiliser les valeurs par d\u00e9faut\r\n            var program = new Program();\r\n            switch (args.Length)\r\n            {\r\n                case 1:\r\n                    if (Directory.Exists(args[0]))\r\n                    {\r\n                        program.processFiles(args[0]);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    if (Directory.Exists(args[0]))\r\n                    {\r\n                        program.processFiles(args[0], args[1]);\r\n                    }\r\n                    break;\r\n                default:\r\n                    program.processFiles(DEFAULT_DIRECTORY);\r\n                    break;\r\n            }\r\n        }\r\n        private void processFiles(string directory, string output_file_format = \"mp4\")\r\n        {\r\n            this.output_file_format = output_file_format;\r\n            \/\/ cr\u00e9er un objet pour le r\u00e9pertoire\r\n            directoryInfo = new DirectoryInfo(directory);\r\n            \/\/ r\u00e9cup\u00e8re les fichiers du r\u00e9pertoire\r\n            \/\/ en filtrant les fichiers suivant les extensions contenues tableau INPUT_FILE_FORMATS\r\n            \/\/ ( on teste chaque extension en elevant le .\r\n            this.files = directoryInfo.GetFiles().Where(\r\n                c => INPUT_FILE_FORMATS.Contains(c.Extension.Remove(0, 1))\r\n                ).ToArray();\r\n            \/\/ on traite chaque fichier avec FFMPEG\r\n            \/\/ id\u00e9allement , on lance FFMEG et on \r\n            \/\/ attend la fin de chaque traitement pour lancer le traitement suivant\r\n            files = files.OrderBy(o=>o.Length).ToArray();\r\n            files.All(c => { Console.WriteLine(c.ToString()); return true; });\r\n            if (files.Length > 0)\r\n            {\r\n                processMovieFile(files.First(), output_file_format);\r\n            }\r\n            Console.ReadLine();\r\n        }\r\n        private void processMovieFile(FileInfo fileInfo,string output_file_format)\r\n        {\r\n            System.Diagnostics.ProcessStartInfo myInfo =\r\n                new System.Diagnostics.ProcessStartInfo();\r\n            myInfo.FileName = \"ffmpeg\";\r\n            myInfo.Arguments = \" -y -i \\\"\" + fileInfo.Name +\"\\\"  \\\"\"+\r\n              fileInfo.Name.Remove(fileInfo.Name.LastIndexOf(fileInfo.Extension))+\".\"+output_file_format+\"\\\" \";\r\n            myInfo.WorkingDirectory = directoryInfo.FullName;\r\n            System.Diagnostics.Process process = new System.Diagnostics.Process();\r\n            process.EnableRaisingEvents = true;\r\n            process.Exited += new EventHandler(process_Exited);\r\n            process.StartInfo = myInfo;\r\n            process.StartInfo.RedirectStandardOutput = true;\r\n            process.StartInfo.UseShellExecute = false;\r\n            process.Start();\r\n        }\r\n        void process_Exited(object sender, EventArgs e)\r\n        {\r\n            \/\/throw new NotImplementedException();\r\n            Console.WriteLine(\"end of process\");\r\n            files = files.Where(c => c != files.First()).ToArray();\r\n            if (files.Length > 0)\r\n            {\r\n                processMovieFile(files.First(), output_file_format);\r\n            }\r\n        }\r\n    }\r\n}\r\n",
        "created":"1334159264",
        "4":"1334159264",
        "updated":"1334159264",
        "5":"1334159264",
        "category_id":"12",
        "6":"12",
        "user_id":"2",
        "7":"2",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"0",
        "10":"0",
        "active":"0",
        "11":"0"
    },
    {
        "id":"5",
        "0":"5",
        "title":"SQLite  - How to show the schema for a SQLite database table",
        "1":"SQLite  - How to show the schema for a SQLite database table",
        "description":"description of the snippet",
        "2":"description of the snippet",
        "content":"To view the schema for a SQLite database table, just use the SQLite schema dot command, like this:\r\n\r\nsqlite> .schema salespeople\r\n(Note that you don't need to use a semi-colon at the end of that command.)\r\n\r\nFor my \"salespeople\" example SQLite table, this SQLite schema command produces the following output:\r\n\r\nCREATE TABLE salespeople (\r\n  id INTEGER PRIMARY KEY,\r\n  first_name TEXT NOT NULL,\r\n  last_name TEXT NOT NULL,\r\n  commission_rate REAL NOT NULL\r\n);\r\n",
        "3":"To view the schema for a SQLite database table, just use the SQLite schema dot command, like this:\r\n\r\nsqlite> .schema salespeople\r\n(Note that you don't need to use a semi-colon at the end of that command.)\r\n\r\nFor my \"salespeople\" example SQLite table, this SQLite schema command produces the following output:\r\n\r\nCREATE TABLE salespeople (\r\n  id INTEGER PRIMARY KEY,\r\n  first_name TEXT NOT NULL,\r\n  last_name TEXT NOT NULL,\r\n  commission_rate REAL NOT NULL\r\n);\r\n",
        "created":"1334159292",
        "4":"1334159292",
        "updated":"1334159292",
        "5":"1334159292",
        "category_id":"6",
        "6":"6",
        "user_id":"3",
        "7":"3",
        "private":"1",
        "8":"1",
        "rating":"0",
        "9":"0",
        "favorite":"0",
        "10":"0",
        "active":"0",
        "11":"0"
    },
    {
        "id":"6",
        "0":"6",
        "title":"Creating Web Page Templates with PHP and Twig ",
        "1":"Creating Web Page Templates with PHP and Twig ",
        "description":"shell> pear channel-discover pear.twig-project.org\r\nshell> pear install twig\/Twig",
        "2":"shell> pear channel-discover pear.twig-project.org\r\nshell> pear install twig\/Twig",
        "content":"<html>\r\n  <head><\/head>\r\n  <body>\r\n  <h2>Account successfully created!<\/h2>\r\n\r\n  <p>Hello {{ name }}<\/p>\r\n\r\n  <p>Thank you for registering with us. Your account details are as follows: <\/p>\r\n\r\n  <p style=\"margin-left: 10px\">\r\n  Username: {{ username }} <br\/>\r\n  Password: {{ password }}\r\n  <\/p>\r\n\r\n  <p>You've already been logged in, so go on in and have some fun!<\/p>\r\n  <\/body>\r\n<\/html>",
        "3":"<html>\r\n  <head><\/head>\r\n  <body>\r\n  <h2>Account successfully created!<\/h2>\r\n\r\n  <p>Hello {{ name }}<\/p>\r\n\r\n  <p>Thank you for registering with us. Your account details are as follows: <\/p>\r\n\r\n  <p style=\"margin-left: 10px\">\r\n  Username: {{ username }} <br\/>\r\n  Password: {{ password }}\r\n  <\/p>\r\n\r\n  <p>You've already been logged in, so go on in and have some fun!<\/p>\r\n  <\/body>\r\n<\/html>",
        "created":"1334165631",
        "4":"1334165631",
        "updated":"1334165631",
        "5":"1334165631",
        "category_id":"1",
        "6":"1",
        "user_id":"3",
        "7":"3",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"0",
        "10":"0",
        "active":"0",
        "11":"0"
    },
    {
        "id":"7",
        "0":"7",
        "title":"Getter \/ Setter implicites PHP class",
        "1":"Getter \/ Setter implicites PHP class",
        "description":"Getter \/ Setter implicites PHP class",
        "2":"Getter \/ Setter implicites PHP class",
        "content":"<?php\r\n\r\n\/*\r\n * Getter \/ Setter implicites PHP class\r\n *\/\r\n\r\nclass Dummy {\r\n\r\n  protected $firstName = \"\";\r\n  protected $lastName = \"\";\r\n\r\n  function __set($prop, $value) {\r\n    if (property_exists($this, $prop)):\r\n      $propName = ucwords($prop);\r\n      $setter = \"set$propName\";\r\n      if (method_exists($this, $setter)):\r\n        $this->$setter($value);\r\n      else:\r\n        $this->$prop = $value;\r\n      endif;\r\n    endif;\r\n  }\r\n\r\n  function setFirstName($value) {\r\n    echo \"setting Name = $value\";\r\n    $this->firstName = $value;\r\n  }\r\n\r\n}\r\n\r\n$dummy = new Dummy();\r\n$dummy->firstName = \"Martin\";\r\n$dummy->lastName = \"Circus\";\r\nvar_dump($dummy);\r\n?>\r\n",
        "3":"<?php\r\n\r\n\/*\r\n * Getter \/ Setter implicites PHP class\r\n *\/\r\n\r\nclass Dummy {\r\n\r\n  protected $firstName = \"\";\r\n  protected $lastName = \"\";\r\n\r\n  function __set($prop, $value) {\r\n    if (property_exists($this, $prop)):\r\n      $propName = ucwords($prop);\r\n      $setter = \"set$propName\";\r\n      if (method_exists($this, $setter)):\r\n        $this->$setter($value);\r\n      else:\r\n        $this->$prop = $value;\r\n      endif;\r\n    endif;\r\n  }\r\n\r\n  function setFirstName($value) {\r\n    echo \"setting Name = $value\";\r\n    $this->firstName = $value;\r\n  }\r\n\r\n}\r\n\r\n$dummy = new Dummy();\r\n$dummy->firstName = \"Martin\";\r\n$dummy->lastName = \"Circus\";\r\nvar_dump($dummy);\r\n?>\r\n",
        "created":"1334186568",
        "4":"1334186568",
        "updated":"1334186568",
        "5":"1334186568",
        "category_id":"1",
        "6":"1",
        "user_id":"3",
        "7":"3",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"0",
        "10":"0",
        "active":"0",
        "11":"0"
    },
    {
        "id":"8",
        "0":"8",
        "title":"Activer Zend_Db_Profiler",
        "1":"Activer Zend_Db_Profiler",
        "description":"Activer Zend_Db_Profiler",
        "2":"Activer Zend_Db_Profiler",
        "content":"\/\/ dans le bootstrap.php\r\n\/\/Activer Zend_Db_Profiler\r\nresources.db.params.profiler=true",
        "3":"\/\/ dans le bootstrap.php\r\n\/\/Activer Zend_Db_Profiler\r\nresources.db.params.profiler=true",
        "created":"1334586850",
        "4":"1334586850",
        "updated":"1334586850",
        "5":"1334586850",
        "category_id":"1",
        "6":"1",
        "user_id":"3",
        "7":"3",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"0",
        "10":"0",
        "active":"0",
        "11":"0"
    },
    {
        "id":"9",
        "0":"9",
        "title":"Zend Set default controller",
        "1":"Zend Set default controller",
        "description":"Zend Set default controller",
        "2":"Zend Set default controller",
        "content":"; in the application.ini file\r\nresources.frontController.defaultControllerName=\"site\"",
        "3":"; in the application.ini file\r\nresources.frontController.defaultControllerName=\"site\"",
        "created":"1334587235",
        "4":"1334587235",
        "updated":"1334587235",
        "5":"1334587235",
        "category_id":"1",
        "6":"1",
        "user_id":"3",
        "7":"3",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"0",
        "10":"0",
        "active":"0",
        "11":"0"
    },
    {
        "id":"10",
        "0":"10",
        "title":"Zend : use Zend_Cache with Zend_Translate",
        "1":"Zend : use Zend_Cache with Zend_Translate",
        "description":"Zend : use Zend_Cache with Zend_Translate",
        "2":"Zend : use Zend_Cache with Zend_Translate",
        "content":"$cache = Zend_Cache::factory('Core',\r\n                             'File',\r\n                             $frontendOptions,\r\n                             $backendOptions);\r\nZend_Translate::setCache($cache);\r\n$translate = new Zend_Translate(\r\n    array(\r\n        'adapter' => 'gettext',\r\n        'content' => '\/path\/to\/translate.mo',\r\n        'locale'  => 'en'\r\n    )\r\n);",
        "3":"$cache = Zend_Cache::factory('Core',\r\n                             'File',\r\n                             $frontendOptions,\r\n                             $backendOptions);\r\nZend_Translate::setCache($cache);\r\n$translate = new Zend_Translate(\r\n    array(\r\n        'adapter' => 'gettext',\r\n        'content' => '\/path\/to\/translate.mo',\r\n        'locale'  => 'en'\r\n    )\r\n);",
        "created":"1334594566",
        "4":"1334594566",
        "updated":"1334594566",
        "5":"1334594566",
        "category_id":"1",
        "6":"1",
        "user_id":"3",
        "7":"3",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"0",
        "10":"0",
        "active":"0",
        "11":"0"
    },
    {
        "id":"11",
        "0":"11",
        "title":"Zend framework : Access layout object",
        "1":"Zend framework : Access layout object",
        "description":"Zend framework : Access layout object",
        "2":"Zend framework : Access layout object",
        "content":"\/\/Within view scripts: use the layout() view helper, \r\n\/\/which returns the Zend_Layout\r\n\/\/instance registered with the front controller plugin.\r\n\r\n<?php $layout = $this->layout(); ?>\r\n\r\n\/\/Within action controllers: use the layout() action helper, \r\n\/\/which acts just like the view helper.\r\n\r\n\/\/ Calling helper as a method of the helper broker:\r\n$layout = $this->_helper->layout();\r\n \r\n\/\/ Or, more verbosely:\r\n$helper = $this->_helper->getHelper('Layout');\r\n$layout = $helper->getLayoutInstance();\r\n\r\n\/\/Elsewhere: use the static method getMvcInstance(). \r\n\/\/This will return the layout instance registered by the bootstrap resource.\r\n\r\n$layout = Zend_Layout::getMvcInstance();\r\n\r\n\/\/Via the bootstrap: retrieve the layout resource, \r\n\/\/which will be the Zend_Layout instance.\r\n\r\n$layout = $bootstrap->getResource('Layout');",
        "3":"\/\/Within view scripts: use the layout() view helper, \r\n\/\/which returns the Zend_Layout\r\n\/\/instance registered with the front controller plugin.\r\n\r\n<?php $layout = $this->layout(); ?>\r\n\r\n\/\/Within action controllers: use the layout() action helper, \r\n\/\/which acts just like the view helper.\r\n\r\n\/\/ Calling helper as a method of the helper broker:\r\n$layout = $this->_helper->layout();\r\n \r\n\/\/ Or, more verbosely:\r\n$helper = $this->_helper->getHelper('Layout');\r\n$layout = $helper->getLayoutInstance();\r\n\r\n\/\/Elsewhere: use the static method getMvcInstance(). \r\n\/\/This will return the layout instance registered by the bootstrap resource.\r\n\r\n$layout = Zend_Layout::getMvcInstance();\r\n\r\n\/\/Via the bootstrap: retrieve the layout resource, \r\n\/\/which will be the Zend_Layout instance.\r\n\r\n$layout = $bootstrap->getResource('Layout');",
        "created":"1334626165",
        "4":"1334626165",
        "updated":"1334626165",
        "5":"1334626165",
        "category_id":"1",
        "6":"1",
        "user_id":"3",
        "7":"3",
        "private":"1",
        "8":"1",
        "rating":"0",
        "9":"0",
        "favorite":"0",
        "10":"0",
        "active":"0",
        "11":"0"
    },
    {
        "id":"12",
        "0":"12",
        "title":"Zend Translate : create a translate plugin",
        "1":"Zend Translate : create a translate plugin",
        "description":"Zend Translate : create a translate plugin",
        "2":"Zend Translate : create a translate plugin",
        "content":"<?php\r\nclass CMS_Application_Resource_Translate extends Zend_Application_Resource_ResourceAbstract{\r\n  function init(){\r\n    $options =$this->getOptions();\r\n    $adapter = $options['adapter'];\r\n    $defaultTranslation = $options['default']['file'];\r\n    $defaultLocale = $options['default']['locale'];\r\n    $translate = new Zend_Translate($adapter,$defaultTranslation,$defaultLocale);\r\n    foreach($options['translation'] as $locale => $translation):\r\n      $translate->addTranslation($translation,$locale);\r\n    endforeach;\r\n    Zend_Registry::set('Zend_Translate',$translate);\r\n    return $translate;\r\n  }\r\n}\r\n",
        "3":"<?php\r\nclass CMS_Application_Resource_Translate extends Zend_Application_Resource_ResourceAbstract{\r\n  function init(){\r\n    $options =$this->getOptions();\r\n    $adapter = $options['adapter'];\r\n    $defaultTranslation = $options['default']['file'];\r\n    $defaultLocale = $options['default']['locale'];\r\n    $translate = new Zend_Translate($adapter,$defaultTranslation,$defaultLocale);\r\n    foreach($options['translation'] as $locale => $translation):\r\n      $translate->addTranslation($translation,$locale);\r\n    endforeach;\r\n    Zend_Registry::set('Zend_Translate',$translate);\r\n    return $translate;\r\n  }\r\n}\r\n",
        "created":"1334673438",
        "4":"1334673438",
        "updated":"1334673438",
        "5":"1334673438",
        "category_id":"1",
        "6":"1",
        "user_id":"3",
        "7":"3",
        "private":"1",
        "8":"1",
        "rating":"0",
        "9":"0",
        "favorite":"0",
        "10":"0",
        "active":"0",
        "11":"0"
    },
    {
        "id":"13",
        "0":"13",
        "title":"ZEND : Access view values from partialLoop",
        "1":"ZEND : Access view values from partialLoop",
        "description":"ZEND : Access view values from partialLoop",
        "2":"ZEND : Access view values from partialLoop",
        "content":"\/\/ in the view template:\r\n \r\n$this->bla = 'blabla'; \/\/value we will access\r\necho $this->partialLoop('imageviews\/thumbnails.phtml',$this->searchResults);\r\n \r\n\/\/in the partialLoop template:\r\n \r\n<?php echo $this->partialLoop()->view->bla \/\/ echo's blabla ?>\r\n \r\n\/\/You can ofcourse also retrieve the view in the partialLoop as anywhere like this: \r\n$view = Zend_Layout::getMvcInstance()->getView();\r\n\r\n\r\n",
        "3":"\/\/ in the view template:\r\n \r\n$this->bla = 'blabla'; \/\/value we will access\r\necho $this->partialLoop('imageviews\/thumbnails.phtml',$this->searchResults);\r\n \r\n\/\/in the partialLoop template:\r\n \r\n<?php echo $this->partialLoop()->view->bla \/\/ echo's blabla ?>\r\n \r\n\/\/You can ofcourse also retrieve the view in the partialLoop as anywhere like this: \r\n$view = Zend_Layout::getMvcInstance()->getView();\r\n\r\n\r\n",
        "created":"1334703572",
        "4":"1334703572",
        "updated":"1334703572",
        "5":"1334703572",
        "category_id":"1",
        "6":"1",
        "user_id":"3",
        "7":"3",
        "private":"1",
        "8":"1",
        "rating":"0",
        "9":"0",
        "favorite":"0",
        "10":"0",
        "active":"0",
        "11":"0"
    },
    {
        "id":"14",
        "0":"14",
        "title":"Zend - Conditional validation of shipping address using Zend sub forms ",
        "1":"Zend - Conditional validation of shipping address using Zend sub forms ",
        "description":"Zend - Conditional validation of shipping address using Zend sub forms ",
        "2":"Zend - Conditional validation of shipping address using Zend sub forms ",
        "content":"\r\n'http:\/\/www.designing4u.de\/2011\/07\/conditional-validation-of-shipping-address-using-zend-sub-forms\/'\r\n\r\n\/*Conditional validation of shipping address using Zend sub forms\r\nZend Framework documentation gives you an excellent example on how\r\n to use sub forms. Sub forms let you split the logic of your application\r\n into smaller parts, validate it on demand and after collecting all the \r\ninformation validate the whole entity. Pretty cool huh? Lately I was \r\nimplementing a shopping cart. In the last part of the check out process \r\nthe user has to provide the billing address and shipping address. \r\nUsually they are the same but sometimes they differ. Here is how\r\n I solved the conditional validation of the form fields for orders where shipping address differs.\r\n\r\nFor the brevity I removed some of the fields from the form and left \r\nonly first name and last name just to demonstrate how your form should look like. \r\nI also removed validations, filters and decorators. In your application \r\nyou should add all fields that are necessary in your checkout process \r\nand attach the corresponding validations to those fields.\r\n\r\nThe code is pretty simple. In the init method you have to initialize\r\n sub form for billing and sub form for shipping. You then add the \r\nfields to the sub forms, attach validations to the billing forms\r\n and the checkbox to the shipping sub form.\r\n*\/\r\n\r\n<?php\r\n\/**\r\n * Application_Form_Address class\r\n *\r\n * Class is responsible for collecting the buyers address.\r\n *\r\n * @author Wojciech Gancarczyk <gancarczyk@gmail.com>\r\n *\/\r\nclass Application_Form_Address extends Zend_Form\r\n{\r\n    \/**\r\n     * Initializes the form and sets the elements.\r\n     *\r\n     * @return void\r\n     *\/\r\n    public function init()\r\n    {\r\n        $billing = new Zend_Form_SubForm();\r\n        $this->addFields($billing)->attachValidators($billing);\r\n \r\n        $shipping = new Zend_Form_SubForm();\r\n        $differs = new Zend_Form_Element_Checkbox('differs');\r\n        $differs->setLabel('Shipping differs')->setValue('0');\r\n        $shipping->addElement($differs);\r\n        $this->addFields($shipping);\r\n \r\n        $this->addSubForms(array(\r\n            'billing' => $billing,\r\n            'shipping' => $shipping\r\n        ));\r\n \r\n        $submit = new Zend_Form_Element_Submit('submit');\r\n        $this->addElement($submit);\r\n    }\r\n \r\n    \/**\r\n     * Add fields to the sub form.\r\n     *\r\n     * @param Zend_Form_SubForm $form\r\n     * @return Application_Form_Address\r\n     *\/\r\n    public function addFields(Zend_Form_SubForm $form)\r\n    {\r\n        $firstname = new Zend_Form_Element_Text('firstname');\r\n        $firstname->setLabel('Firstname');\r\n        $form->addElement($firstname);\r\n \r\n        $lastname = new Zend_Form_Element_Text('lastname');\r\n        $lastname->setLabel('Lastname');\r\n        $form->addElement($lastname);\r\n \r\n        return $this;\r\n    }\r\n \r\n    \/**\r\n     * Attach validators to the fields in the sub form.\r\n     *\r\n     * @param Zend_Form_SubForm $form\r\n     * @return void\r\n     *\/\r\n    public function attachValidators(Zend_Form_SubForm $form)\r\n    {\r\n        $form->getElement('firstname')->setRequired(true);\r\n        $form->getElement('lastname')->setRequired(true);\r\n    }\r\n \r\n    \/**\r\n     * Overwrites the parent method and attaches\r\n     * conditional validators only if shipping address\r\n     * differs.\r\n     *\r\n     * @param array $data\r\n     * @return bool\r\n     *\/\r\n    public function isValid($data)\r\n    {\r\n        $this->populate($data);\r\n \r\n        $shipping = $this->getSubForm('shipping');\r\n        if ((int) $shipping->getElement('differs')->getValue() === 1) {\r\n            $this->attachValidators($shipping);\r\n        }\r\n \r\n        return parent::isValid($data);\r\n    }\r\n \r\n    \/**\r\n     * Process the data.\r\n     *\r\n     * @return void\r\n     *\/\r\n    public function process()\r\n    {\r\n        \/\/ do something with the data\r\n    }\r\n}\r\n\/*The interesting part is the isValid method, which overwrites\r\n the method in the parent class. Before the validation will \r\nbe delegated to the parent class, the data form the request\r\n is populated in the form. If the value of checkbox differs \r\nchanged to 1 (meaning the user wants to provide a different \r\nshipping address), the validations are attached to the shipping form.*\/\r\n\r\npublic function addressAction()\r\n{\r\n    $form = new Application_Form_Address();\r\n    if ($this->_request->isPost()) {\r\n        if ($form->isValid($this->_request->getPost())) {\r\n            $form->process();\r\n            \/\/ do something ...\r\n        }\r\n    }\r\n    $this->view->assign(array('form' => $form));\r\n}\r\n\/*\r\nAs usually in your controller you would initialize the form,\r\n check if the request is a post request, validate the form \r\nand redisplay it if necessary. Go and try it out, if the\r\n differs checkbox won't be clicked, only the billing form *\/\r\nwill be validated, in other case both of the form will be validated.",
        "3":"\r\n'http:\/\/www.designing4u.de\/2011\/07\/conditional-validation-of-shipping-address-using-zend-sub-forms\/'\r\n\r\n\/*Conditional validation of shipping address using Zend sub forms\r\nZend Framework documentation gives you an excellent example on how\r\n to use sub forms. Sub forms let you split the logic of your application\r\n into smaller parts, validate it on demand and after collecting all the \r\ninformation validate the whole entity. Pretty cool huh? Lately I was \r\nimplementing a shopping cart. In the last part of the check out process \r\nthe user has to provide the billing address and shipping address. \r\nUsually they are the same but sometimes they differ. Here is how\r\n I solved the conditional validation of the form fields for orders where shipping address differs.\r\n\r\nFor the brevity I removed some of the fields from the form and left \r\nonly first name and last name just to demonstrate how your form should look like. \r\nI also removed validations, filters and decorators. In your application \r\nyou should add all fields that are necessary in your checkout process \r\nand attach the corresponding validations to those fields.\r\n\r\nThe code is pretty simple. In the init method you have to initialize\r\n sub form for billing and sub form for shipping. You then add the \r\nfields to the sub forms, attach validations to the billing forms\r\n and the checkbox to the shipping sub form.\r\n*\/\r\n\r\n<?php\r\n\/**\r\n * Application_Form_Address class\r\n *\r\n * Class is responsible for collecting the buyers address.\r\n *\r\n * @author Wojciech Gancarczyk <gancarczyk@gmail.com>\r\n *\/\r\nclass Application_Form_Address extends Zend_Form\r\n{\r\n    \/**\r\n     * Initializes the form and sets the elements.\r\n     *\r\n     * @return void\r\n     *\/\r\n    public function init()\r\n    {\r\n        $billing = new Zend_Form_SubForm();\r\n        $this->addFields($billing)->attachValidators($billing);\r\n \r\n        $shipping = new Zend_Form_SubForm();\r\n        $differs = new Zend_Form_Element_Checkbox('differs');\r\n        $differs->setLabel('Shipping differs')->setValue('0');\r\n        $shipping->addElement($differs);\r\n        $this->addFields($shipping);\r\n \r\n        $this->addSubForms(array(\r\n            'billing' => $billing,\r\n            'shipping' => $shipping\r\n        ));\r\n \r\n        $submit = new Zend_Form_Element_Submit('submit');\r\n        $this->addElement($submit);\r\n    }\r\n \r\n    \/**\r\n     * Add fields to the sub form.\r\n     *\r\n     * @param Zend_Form_SubForm $form\r\n     * @return Application_Form_Address\r\n     *\/\r\n    public function addFields(Zend_Form_SubForm $form)\r\n    {\r\n        $firstname = new Zend_Form_Element_Text('firstname');\r\n        $firstname->setLabel('Firstname');\r\n        $form->addElement($firstname);\r\n \r\n        $lastname = new Zend_Form_Element_Text('lastname');\r\n        $lastname->setLabel('Lastname');\r\n        $form->addElement($lastname);\r\n \r\n        return $this;\r\n    }\r\n \r\n    \/**\r\n     * Attach validators to the fields in the sub form.\r\n     *\r\n     * @param Zend_Form_SubForm $form\r\n     * @return void\r\n     *\/\r\n    public function attachValidators(Zend_Form_SubForm $form)\r\n    {\r\n        $form->getElement('firstname')->setRequired(true);\r\n        $form->getElement('lastname')->setRequired(true);\r\n    }\r\n \r\n    \/**\r\n     * Overwrites the parent method and attaches\r\n     * conditional validators only if shipping address\r\n     * differs.\r\n     *\r\n     * @param array $data\r\n     * @return bool\r\n     *\/\r\n    public function isValid($data)\r\n    {\r\n        $this->populate($data);\r\n \r\n        $shipping = $this->getSubForm('shipping');\r\n        if ((int) $shipping->getElement('differs')->getValue() === 1) {\r\n            $this->attachValidators($shipping);\r\n        }\r\n \r\n        return parent::isValid($data);\r\n    }\r\n \r\n    \/**\r\n     * Process the data.\r\n     *\r\n     * @return void\r\n     *\/\r\n    public function process()\r\n    {\r\n        \/\/ do something with the data\r\n    }\r\n}\r\n\/*The interesting part is the isValid method, which overwrites\r\n the method in the parent class. Before the validation will \r\nbe delegated to the parent class, the data form the request\r\n is populated in the form. If the value of checkbox differs \r\nchanged to 1 (meaning the user wants to provide a different \r\nshipping address), the validations are attached to the shipping form.*\/\r\n\r\npublic function addressAction()\r\n{\r\n    $form = new Application_Form_Address();\r\n    if ($this->_request->isPost()) {\r\n        if ($form->isValid($this->_request->getPost())) {\r\n            $form->process();\r\n            \/\/ do something ...\r\n        }\r\n    }\r\n    $this->view->assign(array('form' => $form));\r\n}\r\n\/*\r\nAs usually in your controller you would initialize the form,\r\n check if the request is a post request, validate the form \r\nand redisplay it if necessary. Go and try it out, if the\r\n differs checkbox won't be clicked, only the billing form *\/\r\nwill be validated, in other case both of the form will be validated.",
        "created":"1335112666",
        "4":"1335112666",
        "updated":"1335112666",
        "5":"1335112666",
        "category_id":"1",
        "6":"1",
        "user_id":"3",
        "7":"3",
        "private":"1",
        "8":"1",
        "rating":"0",
        "9":"0",
        "favorite":"0",
        "10":"0",
        "active":"0",
        "11":"0"
    },
    {
        "id":"15",
        "0":"15",
        "title":"Htaccess - RewriteBase",
        "1":"Htaccess - RewriteBase",
        "description":"Htaccess - RewriteBase",
        "2":"Htaccess - RewriteBase",
        "content":"RewriteEngine On\r\nRewriteBase \/urlfragment",
        "3":"RewriteEngine On\r\nRewriteBase \/urlfragment",
        "created":"1335317049",
        "4":"1335317049",
        "updated":"1335317049",
        "5":"1335317049",
        "category_id":"36",
        "6":"36",
        "user_id":"3",
        "7":"3",
        "private":"1",
        "8":"1",
        "rating":"0",
        "9":"0",
        "favorite":"0",
        "10":"0",
        "active":"0",
        "11":"0"
    },
    {
        "id":"16",
        "0":"16",
        "title":"Zend - Autocomplete Control with ZendX_JQuery",
        "1":"Zend - Autocomplete Control with ZendX_JQuery",
        "description":"Zend - Autocomplete Control with ZendX_JQuery",
        "2":"Zend - Autocomplete Control with ZendX_JQuery",
        "content":"SIMPLE AUTO COMPLETE\r\n--------------------\r\n\/\/ in the layout head tag\r\n<?=$this->headlink->appendStylesheet(\"...path to jquery ui stylesheet\")?>\r\n<?=$this->jQuery()->setVersion('1.4.2')->setUIVersion(\"1.8.2\")?>\r\n\r\n\/\/ in a view file\r\n<h1>auto complete\r\n<form>\r\n<?=$this->autoCompleteElement?>\r\n<\/form>\r\n\r\n\/\/ in a controller action\r\n$emt = new ZendX_JQuery_Form_Element_AutoComplete('ac');\r\n$emt->setLabel('Autocomplete');\r\n$emt->setJQueryParam('data',array('Montreal','Chicago','Amsterdam','Boston','Albany'));\r\n$this->view->autoCompleteElement = $emt;\r\n",
        "3":"SIMPLE AUTO COMPLETE\r\n--------------------\r\n\/\/ in the layout head tag\r\n<?=$this->headlink->appendStylesheet(\"...path to jquery ui stylesheet\")?>\r\n<?=$this->jQuery()->setVersion('1.4.2')->setUIVersion(\"1.8.2\")?>\r\n\r\n\/\/ in a view file\r\n<h1>auto complete\r\n<form>\r\n<?=$this->autoCompleteElement?>\r\n<\/form>\r\n\r\n\/\/ in a controller action\r\n$emt = new ZendX_JQuery_Form_Element_AutoComplete('ac');\r\n$emt->setLabel('Autocomplete');\r\n$emt->setJQueryParam('data',array('Montreal','Chicago','Amsterdam','Boston','Albany'));\r\n$this->view->autoCompleteElement = $emt;\r\n",
        "created":"1335364193",
        "4":"1335364193",
        "updated":"1335364193",
        "5":"1335364193",
        "category_id":"1",
        "6":"1",
        "user_id":"3",
        "7":"3",
        "private":"1",
        "8":"1",
        "rating":"0",
        "9":"0",
        "favorite":"0",
        "10":"0",
        "active":"0",
        "11":"0"
    },
    {
        "id":"17",
        "0":"17",
        "title":"Zend Framework -  Get the server url",
        "1":"Zend Framework -  Get the server url",
        "description":"How to get the server url in Zend Framework.",
        "2":"How to get the server url in Zend Framework.",
        "content":"USING A VIEW HELPER\r\n\r\n\/\/ application\/views\/scripts\/index\/index.phtml\r\n\r\n<?=$this->serverUrl()?> \/\/ returns the server url",
        "3":"USING A VIEW HELPER\r\n\r\n\/\/ application\/views\/scripts\/index\/index.phtml\r\n\r\n<?=$this->serverUrl()?> \/\/ returns the server url",
        "created":"1335409183",
        "4":"1335409183",
        "updated":"1335409183",
        "5":"1335409183",
        "category_id":"1",
        "6":"1",
        "user_id":"3",
        "7":"3",
        "private":"1",
        "8":"1",
        "rating":"0",
        "9":"0",
        "favorite":"0",
        "10":"0",
        "active":"0",
        "11":"0"
    },
    {
        "id":"18",
        "0":"18",
        "title":"Zend Framework - Create a captcha image ",
        "1":"Zend Framework - Create a captcha image ",
        "description":"How to create a captcha image form element",
        "2":"How to create a captcha image form element",
        "content":"<?php\r\n$captcha = new Zend_Form_Element_Captcha('captcha', array(\r\n    'autocomplete' => 'off',\r\n    'label' => 'Entrez les 4 caract\u00e8res affich\u00e9s dans l\\'image :',\r\n    'maxlength' => 4,\r\n    'size' => 4,\r\n    'captcha' => array(\r\n        'captcha' => 'Image',\r\n        'dotNoiseLevel' => 50, \/\/ Valeur initiale = 100\r\n        'lineNoiseLevel' => 2, \/\/ Valeur initiale = 5\r\n        'font' => APPLICATION_PATH . '\/..\/fonts\/arial.ttf',\r\n        'fontSize' => 28,\r\n        'imgDir' => APPLICATION_PATH . '\/..\/public\/captcha',\r\n        'imgUrl' => '\/captcha\/',\r\n        'timeout' => 300,\r\n        'wordLen' => 4\r\n    )\r\n));\r\n?>",
        "3":"<?php\r\n$captcha = new Zend_Form_Element_Captcha('captcha', array(\r\n    'autocomplete' => 'off',\r\n    'label' => 'Entrez les 4 caract\u00e8res affich\u00e9s dans l\\'image :',\r\n    'maxlength' => 4,\r\n    'size' => 4,\r\n    'captcha' => array(\r\n        'captcha' => 'Image',\r\n        'dotNoiseLevel' => 50, \/\/ Valeur initiale = 100\r\n        'lineNoiseLevel' => 2, \/\/ Valeur initiale = 5\r\n        'font' => APPLICATION_PATH . '\/..\/fonts\/arial.ttf',\r\n        'fontSize' => 28,\r\n        'imgDir' => APPLICATION_PATH . '\/..\/public\/captcha',\r\n        'imgUrl' => '\/captcha\/',\r\n        'timeout' => 300,\r\n        'wordLen' => 4\r\n    )\r\n));\r\n?>",
        "created":"1335409746",
        "4":"1335409746",
        "updated":"1335409746",
        "5":"1335409746",
        "category_id":"1",
        "6":"1",
        "user_id":"3",
        "7":"3",
        "private":"1",
        "8":"1",
        "rating":"0",
        "9":"0",
        "favorite":"0",
        "10":"0",
        "active":"0",
        "11":"0"
    },
    {
        "id":"19",
        "0":"19",
        "title":"Serialize form datas",
        "1":"Serialize form datas",
        "description":"How to serialize form datas",
        "2":"How to serialize form datas",
        "content":"(function(formId, target) {\r\n    var getForm = function() {\r\n        return document.getElementById(formId);\r\n    };\r\n    var getTarget = function() {\r\n        return document.getElementById(target);\r\n    };\r\n    var makeTextNode = function(_string) {\r\n        return document.createTextNode(_string);\r\n    };\r\n    var makeDatas = function(form) {\r\n        HTMLCollection.prototype.map = Array.prototype.map;\r\n        return form.elements.map(function(row, i) {\r\n            var o = {};\r\n            o[row.name] = row.value;\r\n            return o\r\n        });\r\n    }\r\n    getTarget().appendChild(makeTextNode(JSON.stringify(makeDatas(getForm()))));\r\n})(\"tabledata\", \"pieChart\");\u200b",
        "3":"(function(formId, target) {\r\n    var getForm = function() {\r\n        return document.getElementById(formId);\r\n    };\r\n    var getTarget = function() {\r\n        return document.getElementById(target);\r\n    };\r\n    var makeTextNode = function(_string) {\r\n        return document.createTextNode(_string);\r\n    };\r\n    var makeDatas = function(form) {\r\n        HTMLCollection.prototype.map = Array.prototype.map;\r\n        return form.elements.map(function(row, i) {\r\n            var o = {};\r\n            o[row.name] = row.value;\r\n            return o\r\n        });\r\n    }\r\n    getTarget().appendChild(makeTextNode(JSON.stringify(makeDatas(getForm()))));\r\n})(\"tabledata\", \"pieChart\");\u200b",
        "created":"1335452894",
        "4":"1335452894",
        "updated":"1335452894",
        "5":"1335452894",
        "category_id":"2",
        "6":"2",
        "user_id":"3",
        "7":"3",
        "private":"1",
        "8":"1",
        "rating":"0",
        "9":"0",
        "favorite":"0",
        "10":"0",
        "active":"0",
        "11":"0"
    },
    {
        "id":"20",
        "0":"20",
        "title":"Zend framework : Configure Mail class",
        "1":"Zend framework : Configure Mail class",
        "description":"Zend framework : Configure Mail class",
        "2":"Zend framework : Configure Mail class",
        "content":";---------------------------------\r\n;@NOTE @ZEND email configuration |\r\n;---------------------------------\r\nresources.mail.transport.type       = smtp\r\nresources.mail.transport.ssl        = ssl        \r\nresources.mail.transport.port       = port\r\nresources.mail.transport.host       = host\r\nresources.mail.transport.auth       = login\r\nresources.mail.transport.username   = username   \r\nresources.mail.transport.password   = password   \r\nresources.mail.transport.register   = true ; True by default\r\nresources.mail.defaultFrom.email    = support@dsnippet.com\r\nresources.mail.defaultFrom.name     = Support\r\nresources.mail.defaultReplyTo.email = support@dsnippet.com\r\nresources.mail.defaultReplyTo.name  = Support",
        "3":";---------------------------------\r\n;@NOTE @ZEND email configuration |\r\n;---------------------------------\r\nresources.mail.transport.type       = smtp\r\nresources.mail.transport.ssl        = ssl        \r\nresources.mail.transport.port       = port\r\nresources.mail.transport.host       = host\r\nresources.mail.transport.auth       = login\r\nresources.mail.transport.username   = username   \r\nresources.mail.transport.password   = password   \r\nresources.mail.transport.register   = true ; True by default\r\nresources.mail.defaultFrom.email    = support@dsnippet.com\r\nresources.mail.defaultFrom.name     = Support\r\nresources.mail.defaultReplyTo.email = support@dsnippet.com\r\nresources.mail.defaultReplyTo.name  = Support",
        "created":"1335500720",
        "4":"1335500720",
        "updated":"1335500720",
        "5":"1335500720",
        "category_id":"1",
        "6":"1",
        "user_id":"6",
        "7":"6",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"21",
        "0":"21",
        "title":"DL, DT and DD",
        "1":"DL, DT and DD",
        "description":"How to use DL, DT and DD",
        "2":"How to use DL, DT and DD",
        "content":"<dl>\r\n <dt>Terme 1 \u00e0 d\u00e9finir<\/dt>\r\n  <dd>Voici la d\u00e9finition \r\n  pour le terme 1<\/dd>\r\n <dt>Terme 2 \u00e0 d\u00e9finir<\/dt>\r\n  <dd>Voici la d\u00e9finition \r\n  pour le terme 2<\/dd>\r\n<\/dl> ",
        "3":"<dl>\r\n <dt>Terme 1 \u00e0 d\u00e9finir<\/dt>\r\n  <dd>Voici la d\u00e9finition \r\n  pour le terme 1<\/dd>\r\n <dt>Terme 2 \u00e0 d\u00e9finir<\/dt>\r\n  <dd>Voici la d\u00e9finition \r\n  pour le terme 2<\/dd>\r\n<\/dl> ",
        "created":"1335574687",
        "4":"1335574687",
        "updated":"1335574687",
        "5":"1335574687",
        "category_id":"4",
        "6":"4",
        "user_id":"3",
        "7":"3",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"22",
        "0":"22",
        "title":"Sqlite - Create a timestamp",
        "1":"Sqlite - Create a timestamp",
        "description":"How to create a timestamp in SQLite.",
        "2":"How to create a timestamp in SQLite.",
        "content":"select strftime('%s','now');",
        "3":"select strftime('%s','now');",
        "created":"1335762396",
        "4":"1335762396",
        "updated":"1335762396",
        "5":"1335762396",
        "category_id":"6",
        "6":"6",
        "user_id":"3",
        "7":"3",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"23",
        "0":"23",
        "title":"jQuery UI- Progress bar",
        "1":"jQuery UI- Progress bar",
        "description":"How to set up a progress bar with jQuery UI",
        "2":"How to set up a progress bar with jQuery UI",
        "content":"<meta charset=\"utf-8\">\r\n\t<style>\r\n\t.ui-progressbar-value { background-image: url(images\/pbar-ani.gif); }\r\n\t<\/style>\r\n\t<script>\r\n\t$(function() {\r\n\t\t$( \"#progressbar\" ).progressbar({\r\n\t\t\tvalue: 59\r\n\t\t});\r\n\t});\r\n\t<\/script>\r\n<div class=\"demo\">\r\n<div id=\"progressbar\"><\/div>",
        "3":"<meta charset=\"utf-8\">\r\n\t<style>\r\n\t.ui-progressbar-value { background-image: url(images\/pbar-ani.gif); }\r\n\t<\/style>\r\n\t<script>\r\n\t$(function() {\r\n\t\t$( \"#progressbar\" ).progressbar({\r\n\t\t\tvalue: 59\r\n\t\t});\r\n\t});\r\n\t<\/script>\r\n<div class=\"demo\">\r\n<div id=\"progressbar\"><\/div>",
        "created":"1335896180",
        "4":"1335896180",
        "updated":"1335896180",
        "5":"1335896180",
        "category_id":"2",
        "6":"2",
        "user_id":"3",
        "7":"3",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"24",
        "0":"24",
        "title":"Underscore - Bind function",
        "1":"Underscore - Bind function",
        "description":"How to use underscore bind function",
        "2":"How to use underscore bind function",
        "content":"_.bind(function, object, [*arguments]) \r\n\/\/Bind a function to an object, meaning that whenever the function is called, the value of \r\n\/\/this will be the object. Optionally, bind arguments to the function to pre-fill them, \r\n\/\/also known as partial application.\r\n\r\nvar func = function(greeting){ return greeting + ': ' + this.name };\r\nfunc = _.bind(func, {name : 'moe'}, 'hi');\r\nfunc();\r\n=> 'hi: moe'",
        "3":"_.bind(function, object, [*arguments]) \r\n\/\/Bind a function to an object, meaning that whenever the function is called, the value of \r\n\/\/this will be the object. Optionally, bind arguments to the function to pre-fill them, \r\n\/\/also known as partial application.\r\n\r\nvar func = function(greeting){ return greeting + ': ' + this.name };\r\nfunc = _.bind(func, {name : 'moe'}, 'hi');\r\nfunc();\r\n=> 'hi: moe'",
        "created":"1335896441",
        "4":"1335896441",
        "updated":"1335896441",
        "5":"1335896441",
        "category_id":"2",
        "6":"2",
        "user_id":"3",
        "7":"3",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"25",
        "0":"25",
        "title":"Zend - Configure Zend Cache",
        "1":"Zend - Configure Zend Cache",
        "description":"Zend - Configure Zend Cache",
        "2":"Zend - Configure Zend Cache",
        "content":"\/\/ in application.ini file\r\nresources.cachemanager.database.frontend.name = Core\r\nresources.cachemanager.database.frontend.customFrontendNaming = false\r\nresources.cachemanager.database.frontend.options.lifetime = 7200\r\nresources.cachemanager.database.frontend.options.automatic_serialization = true\r\nresources.cachemanager.database.backend.name = File\r\nresources.cachemanager.database.backend.customBackendNaming = false\r\nresources.cachemanager.database.backend.options.cache_dir = \"\/path\/to\/cache\"\r\nresources.cachemanager.database.frontendBackendAutoload = false\r\n\r\n\/\/get the cache manager in the application\r\n\r\n$manager = $this->getFrontController()\r\n                ->getParam('bootstrap')\r\n                ->getResource('cachemanager')\r\n                ->getCacheManager();\r\n$dbCache = $manager->getCache('database');",
        "3":"\/\/ in application.ini file\r\nresources.cachemanager.database.frontend.name = Core\r\nresources.cachemanager.database.frontend.customFrontendNaming = false\r\nresources.cachemanager.database.frontend.options.lifetime = 7200\r\nresources.cachemanager.database.frontend.options.automatic_serialization = true\r\nresources.cachemanager.database.backend.name = File\r\nresources.cachemanager.database.backend.customBackendNaming = false\r\nresources.cachemanager.database.backend.options.cache_dir = \"\/path\/to\/cache\"\r\nresources.cachemanager.database.frontendBackendAutoload = false\r\n\r\n\/\/get the cache manager in the application\r\n\r\n$manager = $this->getFrontController()\r\n                ->getParam('bootstrap')\r\n                ->getResource('cachemanager')\r\n                ->getCacheManager();\r\n$dbCache = $manager->getCache('database');",
        "created":"1335901693",
        "4":"1335901693",
        "updated":"1335901693",
        "5":"1335901693",
        "category_id":"1",
        "6":"1",
        "user_id":"3",
        "7":"3",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"26",
        "0":"26",
        "title":"Hello world",
        "1":"Hello world",
        "description":"Hello world in AS3.",
        "2":"Hello world in AS3.",
        "content":"trace(\"Hello world!\");\r\n\r\nimport flash.text.TextField;\r\nvar champ:TextField = new TextField();\r\nchamp.text = \"Hello World!\";\r\nthis.addChild(champ);",
        "3":"trace(\"Hello world!\");\r\n\r\nimport flash.text.TextField;\r\nvar champ:TextField = new TextField();\r\nchamp.text = \"Hello World!\";\r\nthis.addChild(champ);",
        "created":"1335924727",
        "4":"1335924727",
        "updated":"1335924727",
        "5":"1335924727",
        "category_id":"3",
        "6":"3",
        "user_id":"3",
        "7":"3",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"27",
        "0":"27",
        "title":"Hello world in Bash",
        "1":"Hello world in Bash",
        "description":"Hello world in Bash",
        "2":"Hello world in Bash",
        "content":"#!\/bin\/bash\r\necho Hello world",
        "3":"#!\/bin\/bash\r\necho Hello world",
        "created":"1336020199",
        "4":"1336020199",
        "updated":"1336020199",
        "5":"1336020199",
        "category_id":"11",
        "6":"11",
        "user_id":"3",
        "7":"3",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"28",
        "0":"28",
        "title":"Hello world in C",
        "1":"Hello world in C",
        "description":"Hello world in C",
        "2":"Hello world in C",
        "content":"#include <stdio.h>\r\n \r\nint main(void)\/\/ ou int (argc, char *argv[]) \r\n{\r\n    printf(\"Hello world!\");\r\n    return 0;\r\n}",
        "3":"#include <stdio.h>\r\n \r\nint main(void)\/\/ ou int (argc, char *argv[]) \r\n{\r\n    printf(\"Hello world!\");\r\n    return 0;\r\n}",
        "created":"1336020467",
        "4":"1336020467",
        "updated":"1336020467",
        "5":"1336020467",
        "category_id":"16",
        "6":"16",
        "user_id":"3",
        "7":"3",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"29",
        "0":"29",
        "title":"Class definition",
        "1":"Class definition",
        "description":"Class definition",
        "2":"Class definition",
        "content":"class Animal\r\n  constructor: (@name) ->\r\n\r\n  move: (meters) ->\r\n    alert @name + \" moved #{meters}m.\"\r\n\r\nclass Snake extends Animal\r\n  move: ->\r\n    alert \"Slithering...\"\r\n    super 5\r\n\r\nclass Horse extends Animal\r\n  move: ->\r\n    alert \"Galloping...\"\r\n    super 45\r\n\r\nsam = new Snake \"Sammy the Python\"\r\ntom = new Horse \"Tommy the Palomino\"\r\n\r\nsam.move()\r\ntom.move()\r\n",
        "3":"class Animal\r\n  constructor: (@name) ->\r\n\r\n  move: (meters) ->\r\n    alert @name + \" moved #{meters}m.\"\r\n\r\nclass Snake extends Animal\r\n  move: ->\r\n    alert \"Slithering...\"\r\n    super 5\r\n\r\nclass Horse extends Animal\r\n  move: ->\r\n    alert \"Galloping...\"\r\n    super 45\r\n\r\nsam = new Snake \"Sammy the Python\"\r\ntom = new Horse \"Tommy the Palomino\"\r\n\r\nsam.move()\r\ntom.move()\r\n",
        "created":"1336026058",
        "4":"1336026058",
        "updated":"1336026058",
        "5":"1336026058",
        "category_id":"14",
        "6":"14",
        "user_id":"3",
        "7":"3",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"30",
        "0":"30",
        "title":"Zend - decoding Json string",
        "1":"Zend - decoding Json string",
        "description":"How to decode json string with Zend_Json",
        "2":"How to decode json string with Zend_Json",
        "content":"\/\/ Obtention d'une valeur\r\n$phpNatif = Zend_Json::decode($valeurCodee);\r\n \r\n\/\/ Codage pour renvoi au client :\r\n$json = Zend_Json::encode($phpNatif);",
        "3":"\/\/ Obtention d'une valeur\r\n$phpNatif = Zend_Json::decode($valeurCodee);\r\n \r\n\/\/ Codage pour renvoi au client :\r\n$json = Zend_Json::encode($phpNatif);",
        "created":"1336270335",
        "4":"1336270335",
        "updated":"1336270335",
        "5":"1336270335",
        "category_id":"1",
        "6":"1",
        "user_id":"3",
        "7":"3",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"31",
        "0":"31",
        "title":"Vim - how to write a vimrc file",
        "1":"Vim - how to write a vimrc file",
        "description":"Vim - how to write a vimrc file",
        "2":"Vim - how to write a vimrc file",
        "content":"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => General\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" Sets how many lines of history VIM has to remember\r\nset history=700\r\n\r\n\" Enable filetype plugin\r\nfiletype plugin on\r\nfiletype indent on\r\n\r\n\" Set to auto read when a file is changed from the outside\r\nset autoread\r\n\r\n\" With a map leader it's possible to do extra key combinations\r\n\" like <leader>w saves the current file\r\nlet mapleader = \",\"\r\nlet g:mapleader = \",\"\r\n\r\n\" Fast saving\r\nnmap <leader>w :w!<cr>\r\n\r\n\" Fast editing of the .vimrc\r\nmap <leader>e :e! ~\/.vim_runtime\/vimrc<cr>\r\n\r\n\" When vimrc is edited, reload it\r\nautocmd! bufwritepost vimrc source ~\/.vim_runtime\/vimrc\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => VIM user interface\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" Set 7 lines to the curors - when moving vertical..\r\nset so=7\r\n\r\nset wildmenu \"Turn on WiLd menu\r\n\r\nset ruler \"Always show current position\r\n\r\nset cmdheight=2 \"The commandbar height\r\n\r\nset hid \"Change buffer - without saving\r\n\r\n\" Set backspace config\r\nset backspace=eol,start,indent\r\nset whichwrap+=<,>,h,l\r\n\r\nset ignorecase \"Ignore case when searching\r\nset smartcase\r\n\r\nset hlsearch \"Highlight search things\r\n\r\nset incsearch \"Make search act like search in modern browsers\r\nset nolazyredraw \"Don't redraw while executing macros \r\n\r\nset magic \"Set magic on, for regular expressions\r\n\r\nset showmatch \"Show matching bracets when text indicator is over them\r\nset mat=2 \"How many tenths of a second to blink\r\n\r\n\" No sound on errors\r\nset noerrorbells\r\nset novisualbell\r\nset t_vb=\r\nset tm=500\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Colors and Fonts\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\nsyntax enable \"Enable syntax hl\r\n\r\n\" Set font according to system\r\nif MySys() == \"mac\"\r\n  set gfn=Menlo:h14\r\n  set shell=\/bin\/bash\r\nelseif MySys() == \"windows\"\r\n  set gfn=Bitstream\\ Vera\\ Sans\\ Mono:h10\r\nelseif MySys() == \"linux\"\r\n  set gfn=Monospace\\ 10\r\n  set shell=\/bin\/bash\r\nendif\r\n\r\nif has(\"gui_running\")\r\n  set guioptions-=T\r\n  set t_Co=256\r\n  set background=dark\r\n  colorscheme peaksea\r\n  set nonu\r\nelse\r\n  colorscheme zellner\r\n  set background=dark\r\n\r\n  set nonu\r\nendif\r\n\r\nset encoding=utf8\r\ntry\r\n    lang en_US\r\ncatch\r\nendtry\r\n\r\nset ffs=unix,dos,mac \"Default file types\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Files, backups and undo\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" Turn backup off, since most stuff is in SVN, git anyway...\r\nset nobackup\r\nset nowb\r\nset noswapfile\r\n\r\n\"Persistent undo\r\ntry\r\n    if MySys() == \"windows\"\r\n      set undodir=C:\\Windows\\Temp\r\n    else\r\n      set undodir=~\/.vim_runtime\/undodir\r\n    endif\r\n\r\n    set undofile\r\ncatch\r\nendtry\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Text, tab and indent related\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\nset expandtab\r\nset shiftwidth=4\r\nset tabstop=4\r\nset smarttab\r\n\r\nset lbr\r\nset tw=500\r\n\r\nset ai \"Auto indent\r\nset si \"Smart indet\r\nset wrap \"Wrap lines\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Visual mode related\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" Really useful!\r\n\"  In visual mode when you press * or # to search for the current selection\r\nvnoremap <silent> * :call VisualSearch('f')<CR>\r\nvnoremap <silent> # :call VisualSearch('b')<CR>\r\n\r\n\" When you press gv you vimgrep after the selected text\r\nvnoremap <silent> gv :call VisualSearch('gv')<CR>\r\nmap <leader>g :vimgrep \/\/ **\/*.<left><left><left><left><left><left><left>\r\n\r\n\r\nfunction! CmdLine(str)\r\n    exe \"menu Foo.Bar :\" . a:str\r\n    emenu Foo.Bar\r\n    unmenu Foo\r\nendfunction\r\n\r\n\" From an idea by Michael Naumann\r\nfunction! VisualSearch(direction) range\r\n    let l:saved_reg = @\"\r\n    execute \"normal! vgvy\"\r\n\r\n    let l:pattern = escape(@\", '\\\\\/.*$^~[]')\r\n    let l:pattern = substitute(l:pattern, \"\\n$\", \"\", \"\")\r\n\r\n    if a:direction == 'b'\r\n        execute \"normal ?\" . l:pattern . \"^M\"\r\n    elseif a:direction == 'gv'\r\n        call CmdLine(\"vimgrep \" . '\/'. l:pattern . '\/' . ' **\/*.')\r\n    elseif a:direction == 'f'\r\n        execute \"normal \/\" . l:pattern . \"^M\"\r\n    endif\r\n\r\n    let @\/ = l:pattern\r\n    let @\" = l:saved_reg\r\nendfunction\r\n\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Command mode related\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" Smart mappings on the command line\r\ncno $h e ~\/\r\ncno $d e ~\/Desktop\/\r\ncno $j e .\/\r\ncno $c e <C-\\>eCurrentFileDir(\"e\")<cr>\r\n\r\n\" $q is super useful when browsing on the command line\r\ncno $q <C-\\>eDeleteTillSlash()<cr>\r\n\r\n\" Bash like keys for the command line\r\ncnoremap <C-A>      <Home>\r\ncnoremap <C-E>      <End>\r\ncnoremap <C-K>      <C-U>\r\n\r\ncnoremap <C-P> <Up>\r\ncnoremap <C-N> <Down>\r\n\r\n\" Useful on some European keyboards\r\nmap \u00bd $\r\nimap \u00bd $\r\nvmap \u00bd $\r\ncmap \u00bd $\r\n\r\n\r\nfunc! Cwd()\r\n  let cwd = getcwd()\r\n  return \"e \" . cwd \r\nendfunc\r\n\r\nfunc! DeleteTillSlash()\r\n  let g:cmd = getcmdline()\r\n  if MySys() == \"linux\" || MySys() == \"mac\"\r\n    let g:cmd_edited = substitute(g:cmd, \"\\\\(.*\\[\/\\]\\\\).*\", \"\\\\1\", \"\")\r\n  else\r\n    let g:cmd_edited = substitute(g:cmd, \"\\\\(.*\\[\\\\\\\\]\\\\).*\", \"\\\\1\", \"\")\r\n  endif\r\n  if g:cmd == g:cmd_edited\r\n    if MySys() == \"linux\" || MySys() == \"mac\"\r\n      let g:cmd_edited = substitute(g:cmd, \"\\\\(.*\\[\/\\]\\\\).*\/\", \"\\\\1\", \"\")\r\n    else\r\n      let g:cmd_edited = substitute(g:cmd, \"\\\\(.*\\[\\\\\\\\\\]\\\\).*\\[\\\\\\\\\\]\", \"\\\\1\", \"\")\r\n    endif\r\n  endif\r\n  return g:cmd_edited\r\nendfunc\r\n\r\nfunc! CurrentFileDir(cmd)\r\n  return a:cmd . \" \" . expand(\"%:p:h\") . \"\/\"\r\nendfunc\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Moving around, tabs and buffers\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" Map space to \/ (search) and c-space to ? (backgwards search)\r\nmap <space> \/\r\nmap <c-space> ?\r\nmap <silent> <leader><cr> :noh<cr>\r\n\r\n\" Smart way to move btw. windows\r\nmap <C-j> <C-W>j\r\nmap <C-k> <C-W>k\r\nmap <C-h> <C-W>h\r\nmap <C-l> <C-W>l\r\n\r\n\" Close the current buffer\r\nmap <leader>bd :Bclose<cr>\r\n\r\n\" Close all the buffers\r\nmap <leader>ba :1,300 bd!<cr>\r\n\r\n\" Use the arrows to something usefull\r\nmap <right> :bn<cr>\r\nmap <left> :bp<cr>\r\n\r\n\" Tab configuration\r\nmap <leader>tn :tabnew<cr>\r\nmap <leader>te :tabedit\r\nmap <leader>tc :tabclose<cr>\r\nmap <leader>tm :tabmove\r\n\r\n\" When pressing <leader>cd switch to the directory of the open buffer\r\nmap <leader>cd :cd %:p:h<cr>\r\n\r\n\r\ncommand! Bclose call <SID>BufcloseCloseIt()\r\nfunction! <SID>BufcloseCloseIt()\r\n   let l:currentBufNum = bufnr(\"%\")\r\n   let l:alternateBufNum = bufnr(\"#\")\r\n\r\n   if buflisted(l:alternateBufNum)\r\n     buffer #\r\n   else\r\n     bnext\r\n   endif\r\n\r\n   if bufnr(\"%\") == l:currentBufNum\r\n     new\r\n   endif\r\n\r\n   if buflisted(l:currentBufNum)\r\n     execute(\"bdelete! \".l:currentBufNum)\r\n   endif\r\nendfunction\r\n\r\n\" Specify the behavior when switching between buffers \r\ntry\r\n  set switchbuf=usetab\r\n  set stal=2\r\ncatch\r\nendtry\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Statusline\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" Always hide the statusline\r\nset laststatus=2\r\n\r\n\" Format the statusline\r\nset statusline=\\ %{HasPaste()}%F%m%r%h\\ %w\\ \\ CWD:\\ %r%{CurDir()}%h\\ \\ \\ Line:\\ %l\/%L:%c\r\n\r\n\r\nfunction! CurDir()\r\n    let curdir = substitute(getcwd(), '\/Users\/amir\/', \"~\/\", \"g\")\r\n    return curdir\r\nendfunction\r\n\r\nfunction! HasPaste()\r\n    if &paste\r\n        return 'PASTE MODE  '\r\n    else\r\n        return ''\r\n    endif\r\nendfunction\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Parenthesis\/bracket expanding\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\nvnoremap $1 <esc>`>a)<esc>`<i(<esc>\r\nvnoremap $2 <esc>`>a]<esc>`<i[<esc>\r\nvnoremap $3 <esc>`>a}<esc>`<i{<esc>\r\nvnoremap $$ <esc>`>a\"<esc>`<i\"<esc>\r\nvnoremap $q <esc>`>a'<esc>`<i'<esc>\r\nvnoremap $e <esc>`>a\"<esc>`<i\"<esc>\r\n\r\n\" Map auto complete of (, \", ', [\r\ninoremap $1 ()<esc>i\r\ninoremap $2 []<esc>i\r\ninoremap $3 {}<esc>i\r\ninoremap $4 {<esc>o}<esc>O\r\ninoremap $q ''<esc>i\r\ninoremap $e \"\"<esc>i\r\ninoremap $t <><esc>i\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => General Abbrevs\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\niab xdate <c-r>=strftime(\"%d\/%m\/%y %H:%M:%S\")<cr>\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Editing mappings\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\"Remap VIM 0\r\nmap 0 ^\r\n\r\n\"Move a line of text using ALT+[jk] or Comamnd+[jk] on mac\r\nnmap <M-j> mz:m+<cr>`z\r\nnmap <M-k> mz:m-2<cr>`z\r\nvmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z\r\nvmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z\r\n\r\nif MySys() == \"mac\"\r\n  nmap <D-j> <M-j>\r\n  nmap <D-k> <M-k>\r\n  vmap <D-j> <M-j>\r\n  vmap <D-k> <M-k>\r\nendif\r\n\r\n\"Delete trailing white space, useful for Python ;)\r\nfunc! DeleteTrailingWS()\r\n  exe \"normal mz\"\r\n  %s\/\\s\\+$\/\/ge\r\n  exe \"normal `z\"\r\nendfunc\r\nautocmd BufWrite *.py :call DeleteTrailingWS()\r\n\r\nset guitablabel=%t\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Cope\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" Do :help cope if you are unsure what cope is. It's super useful!\r\nmap <leader>cc :botright cope<cr>\r\nmap <leader>n :cn<cr>\r\nmap <leader>p :cp<cr>\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => bufExplorer plugin\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\nlet g:bufExplorerDefaultHelp=0\r\nlet g:bufExplorerShowRelativePath=1\r\nmap <leader>o :BufExplorer<cr>\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Minibuffer plugin\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\nlet g:miniBufExplModSelTarget = 1\r\nlet g:miniBufExplorerMoreThanOne = 2\r\nlet g:miniBufExplModSelTarget = 0\r\nlet g:miniBufExplUseSingleClick = 1\r\nlet g:miniBufExplMapWindowNavVim = 1\r\nlet g:miniBufExplVSplit = 25\r\nlet g:miniBufExplSplitBelow=1\r\n\r\nlet g:bufExplorerSortBy = \"name\"\r\n\r\nautocmd BufRead,BufNew :call UMiniBufExplorer\r\n\r\nmap <leader>u :TMiniBufExplorer<cr>\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Omni complete functions\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\nautocmd FileType css set omnifunc=csscomplete#CompleteCSS\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Spell checking\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\"Pressing ,ss will toggle and untoggle spell checking\r\nmap <leader>ss :setlocal spell!<cr>\r\n\r\n\"Shortcuts using <leader>\r\nmap <leader>sn ]s\r\nmap <leader>sp [s\r\nmap <leader>sa zg\r\nmap <leader>s? z=\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Python section\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\nlet python_highlight_all = 1\r\nau FileType python syn keyword pythonDecorator True None False self\r\n\r\nau BufNewFile,BufRead *.jinja set syntax=htmljinja\r\nau BufNewFile,BufRead *.mako set ft=mako\r\n\r\nau FileType python inoremap <buffer> $r return\r\nau FileType python inoremap <buffer> $i import\r\nau FileType python inoremap <buffer> $p print\r\nau FileType python inoremap <buffer> $f #--- PH ----------------------------------------------<esc>FP2xi\r\nau FileType python map <buffer> <leader>1 \/class\r\nau FileType python map <buffer> <leader>2 \/def\r\nau FileType python map <buffer> <leader>C ?class\r\nau FileType python map <buffer> <leader>D ?def\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => JavaScript section\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\nau FileType javascript call JavaScriptFold()\r\nau FileType javascript setl fen\r\nau FileType javascript setl nocindent\r\n\r\nau FileType javascript imap <c-t> AJS.log();<esc>hi\r\nau FileType javascript imap <c-a> alert();<esc>hi\r\n\r\nau FileType javascript inoremap <buffer> $r return\r\nau FileType javascript inoremap <buffer> $f \/\/--- PH ----------------------------------------------<esc>FP2xi\r\n\r\nfunction! JavaScriptFold()\r\n    setl foldmethod=syntax\r\n    setl foldlevelstart=1\r\n    syn region foldBraces start=\/{\/ end=\/}\/ transparent fold keepend extend\r\n\r\n    function! FoldText()\r\n    return substitute(getline(v:foldstart), '{.*', '{...}', '')\r\n    endfunction\r\n    setl foldtext=FoldText()\r\nendfunction\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => MRU plugin\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\nlet MRU_Max_Entries = 400\r\nmap <leader>f :MRU<CR>\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Command-T\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\nlet g:CommandTMaxHeight = 15\r\nset wildignore+=*.o,*.obj,.git,*.pyc\r\nnoremap <leader>j :CommandT<cr>\r\nnoremap <leader>y :CommandTFlush<cr>\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Vim grep\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\nlet Grep_Skip_Dirs = 'RCS CVS SCCS .svn generated'\r\nset grepprg=\/bin\/grep\\ -nH\r\n\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => MISC\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" Remove the Windows ^M - when the encodings gets messed up\r\nnoremap <Leader>m mmHmt:%s\/<C-V><cr>\/\/ge<cr>'tzt'm\r\n\r\n\"Quickly open a buffer for scripbble\r\nmap <leader>q :e ~\/buffer<cr>\r\nau BufRead,BufNewFile ~\/buffer iab <buffer> xh1 ===========================================\r\n\r\nmap <leader>pp :setlocal paste!<cr>\r\n\r\nmap <leader>bb :cd ..<cr>",
        "3":"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => General\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" Sets how many lines of history VIM has to remember\r\nset history=700\r\n\r\n\" Enable filetype plugin\r\nfiletype plugin on\r\nfiletype indent on\r\n\r\n\" Set to auto read when a file is changed from the outside\r\nset autoread\r\n\r\n\" With a map leader it's possible to do extra key combinations\r\n\" like <leader>w saves the current file\r\nlet mapleader = \",\"\r\nlet g:mapleader = \",\"\r\n\r\n\" Fast saving\r\nnmap <leader>w :w!<cr>\r\n\r\n\" Fast editing of the .vimrc\r\nmap <leader>e :e! ~\/.vim_runtime\/vimrc<cr>\r\n\r\n\" When vimrc is edited, reload it\r\nautocmd! bufwritepost vimrc source ~\/.vim_runtime\/vimrc\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => VIM user interface\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" Set 7 lines to the curors - when moving vertical..\r\nset so=7\r\n\r\nset wildmenu \"Turn on WiLd menu\r\n\r\nset ruler \"Always show current position\r\n\r\nset cmdheight=2 \"The commandbar height\r\n\r\nset hid \"Change buffer - without saving\r\n\r\n\" Set backspace config\r\nset backspace=eol,start,indent\r\nset whichwrap+=<,>,h,l\r\n\r\nset ignorecase \"Ignore case when searching\r\nset smartcase\r\n\r\nset hlsearch \"Highlight search things\r\n\r\nset incsearch \"Make search act like search in modern browsers\r\nset nolazyredraw \"Don't redraw while executing macros \r\n\r\nset magic \"Set magic on, for regular expressions\r\n\r\nset showmatch \"Show matching bracets when text indicator is over them\r\nset mat=2 \"How many tenths of a second to blink\r\n\r\n\" No sound on errors\r\nset noerrorbells\r\nset novisualbell\r\nset t_vb=\r\nset tm=500\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Colors and Fonts\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\nsyntax enable \"Enable syntax hl\r\n\r\n\" Set font according to system\r\nif MySys() == \"mac\"\r\n  set gfn=Menlo:h14\r\n  set shell=\/bin\/bash\r\nelseif MySys() == \"windows\"\r\n  set gfn=Bitstream\\ Vera\\ Sans\\ Mono:h10\r\nelseif MySys() == \"linux\"\r\n  set gfn=Monospace\\ 10\r\n  set shell=\/bin\/bash\r\nendif\r\n\r\nif has(\"gui_running\")\r\n  set guioptions-=T\r\n  set t_Co=256\r\n  set background=dark\r\n  colorscheme peaksea\r\n  set nonu\r\nelse\r\n  colorscheme zellner\r\n  set background=dark\r\n\r\n  set nonu\r\nendif\r\n\r\nset encoding=utf8\r\ntry\r\n    lang en_US\r\ncatch\r\nendtry\r\n\r\nset ffs=unix,dos,mac \"Default file types\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Files, backups and undo\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" Turn backup off, since most stuff is in SVN, git anyway...\r\nset nobackup\r\nset nowb\r\nset noswapfile\r\n\r\n\"Persistent undo\r\ntry\r\n    if MySys() == \"windows\"\r\n      set undodir=C:\\Windows\\Temp\r\n    else\r\n      set undodir=~\/.vim_runtime\/undodir\r\n    endif\r\n\r\n    set undofile\r\ncatch\r\nendtry\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Text, tab and indent related\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\nset expandtab\r\nset shiftwidth=4\r\nset tabstop=4\r\nset smarttab\r\n\r\nset lbr\r\nset tw=500\r\n\r\nset ai \"Auto indent\r\nset si \"Smart indet\r\nset wrap \"Wrap lines\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Visual mode related\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" Really useful!\r\n\"  In visual mode when you press * or # to search for the current selection\r\nvnoremap <silent> * :call VisualSearch('f')<CR>\r\nvnoremap <silent> # :call VisualSearch('b')<CR>\r\n\r\n\" When you press gv you vimgrep after the selected text\r\nvnoremap <silent> gv :call VisualSearch('gv')<CR>\r\nmap <leader>g :vimgrep \/\/ **\/*.<left><left><left><left><left><left><left>\r\n\r\n\r\nfunction! CmdLine(str)\r\n    exe \"menu Foo.Bar :\" . a:str\r\n    emenu Foo.Bar\r\n    unmenu Foo\r\nendfunction\r\n\r\n\" From an idea by Michael Naumann\r\nfunction! VisualSearch(direction) range\r\n    let l:saved_reg = @\"\r\n    execute \"normal! vgvy\"\r\n\r\n    let l:pattern = escape(@\", '\\\\\/.*$^~[]')\r\n    let l:pattern = substitute(l:pattern, \"\\n$\", \"\", \"\")\r\n\r\n    if a:direction == 'b'\r\n        execute \"normal ?\" . l:pattern . \"^M\"\r\n    elseif a:direction == 'gv'\r\n        call CmdLine(\"vimgrep \" . '\/'. l:pattern . '\/' . ' **\/*.')\r\n    elseif a:direction == 'f'\r\n        execute \"normal \/\" . l:pattern . \"^M\"\r\n    endif\r\n\r\n    let @\/ = l:pattern\r\n    let @\" = l:saved_reg\r\nendfunction\r\n\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Command mode related\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" Smart mappings on the command line\r\ncno $h e ~\/\r\ncno $d e ~\/Desktop\/\r\ncno $j e .\/\r\ncno $c e <C-\\>eCurrentFileDir(\"e\")<cr>\r\n\r\n\" $q is super useful when browsing on the command line\r\ncno $q <C-\\>eDeleteTillSlash()<cr>\r\n\r\n\" Bash like keys for the command line\r\ncnoremap <C-A>      <Home>\r\ncnoremap <C-E>      <End>\r\ncnoremap <C-K>      <C-U>\r\n\r\ncnoremap <C-P> <Up>\r\ncnoremap <C-N> <Down>\r\n\r\n\" Useful on some European keyboards\r\nmap \u00bd $\r\nimap \u00bd $\r\nvmap \u00bd $\r\ncmap \u00bd $\r\n\r\n\r\nfunc! Cwd()\r\n  let cwd = getcwd()\r\n  return \"e \" . cwd \r\nendfunc\r\n\r\nfunc! DeleteTillSlash()\r\n  let g:cmd = getcmdline()\r\n  if MySys() == \"linux\" || MySys() == \"mac\"\r\n    let g:cmd_edited = substitute(g:cmd, \"\\\\(.*\\[\/\\]\\\\).*\", \"\\\\1\", \"\")\r\n  else\r\n    let g:cmd_edited = substitute(g:cmd, \"\\\\(.*\\[\\\\\\\\]\\\\).*\", \"\\\\1\", \"\")\r\n  endif\r\n  if g:cmd == g:cmd_edited\r\n    if MySys() == \"linux\" || MySys() == \"mac\"\r\n      let g:cmd_edited = substitute(g:cmd, \"\\\\(.*\\[\/\\]\\\\).*\/\", \"\\\\1\", \"\")\r\n    else\r\n      let g:cmd_edited = substitute(g:cmd, \"\\\\(.*\\[\\\\\\\\\\]\\\\).*\\[\\\\\\\\\\]\", \"\\\\1\", \"\")\r\n    endif\r\n  endif\r\n  return g:cmd_edited\r\nendfunc\r\n\r\nfunc! CurrentFileDir(cmd)\r\n  return a:cmd . \" \" . expand(\"%:p:h\") . \"\/\"\r\nendfunc\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Moving around, tabs and buffers\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" Map space to \/ (search) and c-space to ? (backgwards search)\r\nmap <space> \/\r\nmap <c-space> ?\r\nmap <silent> <leader><cr> :noh<cr>\r\n\r\n\" Smart way to move btw. windows\r\nmap <C-j> <C-W>j\r\nmap <C-k> <C-W>k\r\nmap <C-h> <C-W>h\r\nmap <C-l> <C-W>l\r\n\r\n\" Close the current buffer\r\nmap <leader>bd :Bclose<cr>\r\n\r\n\" Close all the buffers\r\nmap <leader>ba :1,300 bd!<cr>\r\n\r\n\" Use the arrows to something usefull\r\nmap <right> :bn<cr>\r\nmap <left> :bp<cr>\r\n\r\n\" Tab configuration\r\nmap <leader>tn :tabnew<cr>\r\nmap <leader>te :tabedit\r\nmap <leader>tc :tabclose<cr>\r\nmap <leader>tm :tabmove\r\n\r\n\" When pressing <leader>cd switch to the directory of the open buffer\r\nmap <leader>cd :cd %:p:h<cr>\r\n\r\n\r\ncommand! Bclose call <SID>BufcloseCloseIt()\r\nfunction! <SID>BufcloseCloseIt()\r\n   let l:currentBufNum = bufnr(\"%\")\r\n   let l:alternateBufNum = bufnr(\"#\")\r\n\r\n   if buflisted(l:alternateBufNum)\r\n     buffer #\r\n   else\r\n     bnext\r\n   endif\r\n\r\n   if bufnr(\"%\") == l:currentBufNum\r\n     new\r\n   endif\r\n\r\n   if buflisted(l:currentBufNum)\r\n     execute(\"bdelete! \".l:currentBufNum)\r\n   endif\r\nendfunction\r\n\r\n\" Specify the behavior when switching between buffers \r\ntry\r\n  set switchbuf=usetab\r\n  set stal=2\r\ncatch\r\nendtry\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Statusline\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" Always hide the statusline\r\nset laststatus=2\r\n\r\n\" Format the statusline\r\nset statusline=\\ %{HasPaste()}%F%m%r%h\\ %w\\ \\ CWD:\\ %r%{CurDir()}%h\\ \\ \\ Line:\\ %l\/%L:%c\r\n\r\n\r\nfunction! CurDir()\r\n    let curdir = substitute(getcwd(), '\/Users\/amir\/', \"~\/\", \"g\")\r\n    return curdir\r\nendfunction\r\n\r\nfunction! HasPaste()\r\n    if &paste\r\n        return 'PASTE MODE  '\r\n    else\r\n        return ''\r\n    endif\r\nendfunction\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Parenthesis\/bracket expanding\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\nvnoremap $1 <esc>`>a)<esc>`<i(<esc>\r\nvnoremap $2 <esc>`>a]<esc>`<i[<esc>\r\nvnoremap $3 <esc>`>a}<esc>`<i{<esc>\r\nvnoremap $$ <esc>`>a\"<esc>`<i\"<esc>\r\nvnoremap $q <esc>`>a'<esc>`<i'<esc>\r\nvnoremap $e <esc>`>a\"<esc>`<i\"<esc>\r\n\r\n\" Map auto complete of (, \", ', [\r\ninoremap $1 ()<esc>i\r\ninoremap $2 []<esc>i\r\ninoremap $3 {}<esc>i\r\ninoremap $4 {<esc>o}<esc>O\r\ninoremap $q ''<esc>i\r\ninoremap $e \"\"<esc>i\r\ninoremap $t <><esc>i\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => General Abbrevs\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\niab xdate <c-r>=strftime(\"%d\/%m\/%y %H:%M:%S\")<cr>\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Editing mappings\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\"Remap VIM 0\r\nmap 0 ^\r\n\r\n\"Move a line of text using ALT+[jk] or Comamnd+[jk] on mac\r\nnmap <M-j> mz:m+<cr>`z\r\nnmap <M-k> mz:m-2<cr>`z\r\nvmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z\r\nvmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z\r\n\r\nif MySys() == \"mac\"\r\n  nmap <D-j> <M-j>\r\n  nmap <D-k> <M-k>\r\n  vmap <D-j> <M-j>\r\n  vmap <D-k> <M-k>\r\nendif\r\n\r\n\"Delete trailing white space, useful for Python ;)\r\nfunc! DeleteTrailingWS()\r\n  exe \"normal mz\"\r\n  %s\/\\s\\+$\/\/ge\r\n  exe \"normal `z\"\r\nendfunc\r\nautocmd BufWrite *.py :call DeleteTrailingWS()\r\n\r\nset guitablabel=%t\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Cope\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" Do :help cope if you are unsure what cope is. It's super useful!\r\nmap <leader>cc :botright cope<cr>\r\nmap <leader>n :cn<cr>\r\nmap <leader>p :cp<cr>\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => bufExplorer plugin\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\nlet g:bufExplorerDefaultHelp=0\r\nlet g:bufExplorerShowRelativePath=1\r\nmap <leader>o :BufExplorer<cr>\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Minibuffer plugin\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\nlet g:miniBufExplModSelTarget = 1\r\nlet g:miniBufExplorerMoreThanOne = 2\r\nlet g:miniBufExplModSelTarget = 0\r\nlet g:miniBufExplUseSingleClick = 1\r\nlet g:miniBufExplMapWindowNavVim = 1\r\nlet g:miniBufExplVSplit = 25\r\nlet g:miniBufExplSplitBelow=1\r\n\r\nlet g:bufExplorerSortBy = \"name\"\r\n\r\nautocmd BufRead,BufNew :call UMiniBufExplorer\r\n\r\nmap <leader>u :TMiniBufExplorer<cr>\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Omni complete functions\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\nautocmd FileType css set omnifunc=csscomplete#CompleteCSS\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Spell checking\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\"Pressing ,ss will toggle and untoggle spell checking\r\nmap <leader>ss :setlocal spell!<cr>\r\n\r\n\"Shortcuts using <leader>\r\nmap <leader>sn ]s\r\nmap <leader>sp [s\r\nmap <leader>sa zg\r\nmap <leader>s? z=\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Python section\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\nlet python_highlight_all = 1\r\nau FileType python syn keyword pythonDecorator True None False self\r\n\r\nau BufNewFile,BufRead *.jinja set syntax=htmljinja\r\nau BufNewFile,BufRead *.mako set ft=mako\r\n\r\nau FileType python inoremap <buffer> $r return\r\nau FileType python inoremap <buffer> $i import\r\nau FileType python inoremap <buffer> $p print\r\nau FileType python inoremap <buffer> $f #--- PH ----------------------------------------------<esc>FP2xi\r\nau FileType python map <buffer> <leader>1 \/class\r\nau FileType python map <buffer> <leader>2 \/def\r\nau FileType python map <buffer> <leader>C ?class\r\nau FileType python map <buffer> <leader>D ?def\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => JavaScript section\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\nau FileType javascript call JavaScriptFold()\r\nau FileType javascript setl fen\r\nau FileType javascript setl nocindent\r\n\r\nau FileType javascript imap <c-t> AJS.log();<esc>hi\r\nau FileType javascript imap <c-a> alert();<esc>hi\r\n\r\nau FileType javascript inoremap <buffer> $r return\r\nau FileType javascript inoremap <buffer> $f \/\/--- PH ----------------------------------------------<esc>FP2xi\r\n\r\nfunction! JavaScriptFold()\r\n    setl foldmethod=syntax\r\n    setl foldlevelstart=1\r\n    syn region foldBraces start=\/{\/ end=\/}\/ transparent fold keepend extend\r\n\r\n    function! FoldText()\r\n    return substitute(getline(v:foldstart), '{.*', '{...}', '')\r\n    endfunction\r\n    setl foldtext=FoldText()\r\nendfunction\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => MRU plugin\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\nlet MRU_Max_Entries = 400\r\nmap <leader>f :MRU<CR>\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Command-T\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\nlet g:CommandTMaxHeight = 15\r\nset wildignore+=*.o,*.obj,.git,*.pyc\r\nnoremap <leader>j :CommandT<cr>\r\nnoremap <leader>y :CommandTFlush<cr>\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Vim grep\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\nlet Grep_Skip_Dirs = 'RCS CVS SCCS .svn generated'\r\nset grepprg=\/bin\/grep\\ -nH\r\n\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => MISC\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" Remove the Windows ^M - when the encodings gets messed up\r\nnoremap <Leader>m mmHmt:%s\/<C-V><cr>\/\/ge<cr>'tzt'm\r\n\r\n\"Quickly open a buffer for scripbble\r\nmap <leader>q :e ~\/buffer<cr>\r\nau BufRead,BufNewFile ~\/buffer iab <buffer> xh1 ===========================================\r\n\r\nmap <leader>pp :setlocal paste!<cr>\r\n\r\nmap <leader>bb :cd ..<cr>",
        "created":"1336274917",
        "4":"1336274917",
        "updated":"1336274917",
        "5":"1336274917",
        "category_id":"11",
        "6":"11",
        "user_id":"3",
        "7":"3",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"33",
        "0":"33",
        "title":"Array Slicing and Splicing with Ranges",
        "1":"Array Slicing and Splicing with Ranges",
        "description":"Array Slicing and Splicing with Ranges",
        "2":"Array Slicing and Splicing with Ranges",
        "content":"#Array Slicing and Splicing with Ranges\r\n\r\n#Ranges can also be used to extract slices of arrays. With two dots (3..6), the range is inclusive \r\n#(3, 4, 5, 6); with three dots (3...6), the range excludes the end (3, 4, 5). Slices indices have \r\n#useful defaults. An omitted first index defaults to zero and an omitted second index defaults to \r\n#the size of the array.\r\n\r\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n\r\nstart   = numbers[0..2]\r\n\r\nmiddle  = numbers[3...6]\r\n\r\nend     = numbers[6..]\r\n\r\ncopy    = numbers[..]",
        "3":"#Array Slicing and Splicing with Ranges\r\n\r\n#Ranges can also be used to extract slices of arrays. With two dots (3..6), the range is inclusive \r\n#(3, 4, 5, 6); with three dots (3...6), the range excludes the end (3, 4, 5). Slices indices have \r\n#useful defaults. An omitted first index defaults to zero and an omitted second index defaults to \r\n#the size of the array.\r\n\r\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n\r\nstart   = numbers[0..2]\r\n\r\nmiddle  = numbers[3...6]\r\n\r\nend     = numbers[6..]\r\n\r\ncopy    = numbers[..]",
        "created":"1336276155",
        "4":"1336276155",
        "updated":"1336276155",
        "5":"1336276155",
        "category_id":"14",
        "6":"14",
        "user_id":"3",
        "7":"3",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"34",
        "0":"34",
        "title":"Underscore - Object Functions",
        "1":"Underscore - Object Functions",
        "description":"Underscore - Object Functions",
        "2":"Underscore - Object Functions",
        "content":"Object Functions\r\n\r\nkeys_.keys(object) \r\n\/\/Retrieve all the names of the object's properties.\r\n\r\n_.keys({one : 1, two : 2, three : 3}); => [\"one\", \"two\", \"three\"]\r\n\r\nvalues_.values(object) \r\n\r\n\/\/Return all of the values of the object's properties.\r\n\r\n_.values({one : 1, two : 2, three : 3}); => [1, 2, 3]\r\n\r\nfunctions_.functions(object) Alias: methods \r\n\r\n\/\/Returns a sorted list of the names of every method in an object \u2014 \r\n\/\/that is to say, the name of every function property of the object.\r\n\r\n_.functions(_); => [\"all\", \"any\", \"bind\", \"bindAll\", \"clone\", \"compact\", \"compose\" ...\r\n\r\nextend_.extend(destination, *sources) \r\n\r\n\/\/Copy all of the properties in the source objects over to the destination object, \r\n\/\/and return the destination object. It's in-order, so the last source will \r\n\/\/override properties of the same name in previous arguments.\r\n\r\n_.extend({name : 'moe'}, {age : 50}); => {name : 'moe', age : 50}\r\n\r\npick_.pick(object, *keys) \r\n\r\n\/\/Return a copy of the object, filtered to only have values \r\n\/\/for the whitelisted keys (or array of valid keys).\r\n\r\n_.pick({name : 'moe', age: 50, userid : 'moe1'}, 'name', 'age'); => {name : 'moe', age : 50}\r\n\r\ndefaults_.defaults(object, *defaults) \r\n\r\n\/\/Fill in missing properties in object with default values \r\n\/\/from the defaults objects, and return the object.\r\n\/\/ As soon as the property is filled, further defaults will have no effect.\r\n\r\nvar iceCream = {flavor : \"chocolate\"};\r\n\r\n_.defaults(iceCream, {flavor : \"vanilla\", sprinkles : \"lots\"}); => {flavor : \"chocolate\", sprinkles : \"lots\"}\r\n\r\nclone_.clone(object) \r\n\r\n\/\/ Create a shallow-copied clone of the object. \r\n\/\/ Any nested objects or arrays will be copied by reference, not duplicated.\r\n\r\n_.clone({name : 'moe'}); => {name : 'moe'};\r\n\r\ntap_.tap(object, interceptor) \r\n\r\n\/\/ Invokes interceptor with the object, and then returns object. \r\n\/\/ The primary purpose of this method is to \"tap into\" a method chain,\r\n\/\/  in order to perform operations on intermediate results within the chain.\r\n\r\n_.chain([1,2,3,200])\r\n  .filter(function(num) { return num % 2 == 0; })\r\n  .tap(alert)\r\n  .map(function(num) { return num * num })\r\n  .value();\r\n=> \/\/ [2, 200] (alerted)\r\n=> [4, 40000]\r\n\r\nhas_.has(object, key) \r\n\r\n\/\/Does the object contain the given key? \r\n\/\/ Identical to object.hasOwnProperty(key),\r\n\/\/ but uses a safe reference to the hasOwnProperty function,\r\n\/\/ in case it's been overridden accidentally.\r\n\r\n_.has({a: 1, b: 2, c: 3}, \"b\"); => true\r\n\r\nisEqual_.isEqual(object, other) \r\nPerforms an optimized deep comparison between the two objects, to determine if they should be considered equal.\r\n\r\nvar moe   = {name : 'moe', luckyNumbers : [13, 27, 34]};\r\nvar clone = {name : 'moe', luckyNumbers : [13, 27, 34]};\r\nmoe == clone;\r\n=> false\r\n_.isEqual(moe, clone);\r\n=> true\r\nisEmpty_.isEmpty(object) \r\nReturns true if object contains no values.\r\n\r\n_.isEmpty([1, 2, 3]);\r\n=> false\r\n_.isEmpty({});\r\n=> true\r\nisElement_.isElement(object) \r\nReturns true if object is a DOM element.\r\n\r\n_.isElement(jQuery('body')[0]);\r\n=> true\r\nisArray_.isArray(object) \r\nReturns true if object is an Array.\r\n\r\n(function(){ return _.isArray(arguments); })();\r\n=> false\r\n_.isArray([1,2,3]);\r\n=> true\r\nisObject_.isObject(value) \r\nReturns true if value is an Object.\r\n\r\n_.isObject({});\r\n=> true\r\n_.isObject(1);\r\n=> false\r\nisArguments_.isArguments(object) \r\nReturns true if object is an Arguments object.\r\n\r\n(function(){ return _.isArguments(arguments); })(1, 2, 3);\r\n=> true\r\n_.isArguments([1,2,3]);\r\n=> false\r\nisFunction_.isFunction(object) \r\nReturns true if object is a Function.\r\n\r\n_.isFunction(alert);\r\n=> true\r\nisString_.isString(object) \r\nReturns true if object is a String.\r\n\r\n_.isString(\"moe\");\r\n=> true\r\nisNumber_.isNumber(object) \r\nReturns true if object is a Number (including NaN).\r\n\r\n_.isNumber(8.4 * 5);\r\n=> true\r\nisFinite_.isFinite(object) \r\nReturns true if object is a finite Number.\r\n\r\n_.isFinite(-101);\r\n=> true\r\n\r\n_.isFinite(-Infinity);\r\n=> false\r\nisBoolean_.isBoolean(object) \r\nReturns true if object is either true or false.\r\n\r\n_.isBoolean(null);\r\n=> false\r\nisDate_.isDate(object) \r\nReturns true if object is a Date.\r\n\r\n_.isDate(new Date());\r\n=> true\r\nisRegExp_.isRegExp(object) \r\nReturns true if object is a RegExp.\r\n\r\n_.isRegExp(\/moe\/);\r\n=> true\r\nisNaN_.isNaN(object) \r\nReturns true if object is NaN.\r\nNote: this is not the same as the native isNaN function, which will also return true if the variable is undefined.\r\n\r\n_.isNaN(NaN);\r\n=> true\r\nisNaN(undefined);\r\n=> true\r\n_.isNaN(undefined);\r\n=> false\r\nisNull_.isNull(object) \r\nReturns true if the value of object is null.\r\n\r\n_.isNull(null);\r\n=> true\r\n_.isNull(undefined);\r\n=> false\r\nisUndefined_.isUndefined(variable) \r\nReturns true if variable is undefined.\r\n\r\n_.isUndefined(window.missingVariable);\r\n=> true",
        "3":"Object Functions\r\n\r\nkeys_.keys(object) \r\n\/\/Retrieve all the names of the object's properties.\r\n\r\n_.keys({one : 1, two : 2, three : 3}); => [\"one\", \"two\", \"three\"]\r\n\r\nvalues_.values(object) \r\n\r\n\/\/Return all of the values of the object's properties.\r\n\r\n_.values({one : 1, two : 2, three : 3}); => [1, 2, 3]\r\n\r\nfunctions_.functions(object) Alias: methods \r\n\r\n\/\/Returns a sorted list of the names of every method in an object \u2014 \r\n\/\/that is to say, the name of every function property of the object.\r\n\r\n_.functions(_); => [\"all\", \"any\", \"bind\", \"bindAll\", \"clone\", \"compact\", \"compose\" ...\r\n\r\nextend_.extend(destination, *sources) \r\n\r\n\/\/Copy all of the properties in the source objects over to the destination object, \r\n\/\/and return the destination object. It's in-order, so the last source will \r\n\/\/override properties of the same name in previous arguments.\r\n\r\n_.extend({name : 'moe'}, {age : 50}); => {name : 'moe', age : 50}\r\n\r\npick_.pick(object, *keys) \r\n\r\n\/\/Return a copy of the object, filtered to only have values \r\n\/\/for the whitelisted keys (or array of valid keys).\r\n\r\n_.pick({name : 'moe', age: 50, userid : 'moe1'}, 'name', 'age'); => {name : 'moe', age : 50}\r\n\r\ndefaults_.defaults(object, *defaults) \r\n\r\n\/\/Fill in missing properties in object with default values \r\n\/\/from the defaults objects, and return the object.\r\n\/\/ As soon as the property is filled, further defaults will have no effect.\r\n\r\nvar iceCream = {flavor : \"chocolate\"};\r\n\r\n_.defaults(iceCream, {flavor : \"vanilla\", sprinkles : \"lots\"}); => {flavor : \"chocolate\", sprinkles : \"lots\"}\r\n\r\nclone_.clone(object) \r\n\r\n\/\/ Create a shallow-copied clone of the object. \r\n\/\/ Any nested objects or arrays will be copied by reference, not duplicated.\r\n\r\n_.clone({name : 'moe'}); => {name : 'moe'};\r\n\r\ntap_.tap(object, interceptor) \r\n\r\n\/\/ Invokes interceptor with the object, and then returns object. \r\n\/\/ The primary purpose of this method is to \"tap into\" a method chain,\r\n\/\/  in order to perform operations on intermediate results within the chain.\r\n\r\n_.chain([1,2,3,200])\r\n  .filter(function(num) { return num % 2 == 0; })\r\n  .tap(alert)\r\n  .map(function(num) { return num * num })\r\n  .value();\r\n=> \/\/ [2, 200] (alerted)\r\n=> [4, 40000]\r\n\r\nhas_.has(object, key) \r\n\r\n\/\/Does the object contain the given key? \r\n\/\/ Identical to object.hasOwnProperty(key),\r\n\/\/ but uses a safe reference to the hasOwnProperty function,\r\n\/\/ in case it's been overridden accidentally.\r\n\r\n_.has({a: 1, b: 2, c: 3}, \"b\"); => true\r\n\r\nisEqual_.isEqual(object, other) \r\nPerforms an optimized deep comparison between the two objects, to determine if they should be considered equal.\r\n\r\nvar moe   = {name : 'moe', luckyNumbers : [13, 27, 34]};\r\nvar clone = {name : 'moe', luckyNumbers : [13, 27, 34]};\r\nmoe == clone;\r\n=> false\r\n_.isEqual(moe, clone);\r\n=> true\r\nisEmpty_.isEmpty(object) \r\nReturns true if object contains no values.\r\n\r\n_.isEmpty([1, 2, 3]);\r\n=> false\r\n_.isEmpty({});\r\n=> true\r\nisElement_.isElement(object) \r\nReturns true if object is a DOM element.\r\n\r\n_.isElement(jQuery('body')[0]);\r\n=> true\r\nisArray_.isArray(object) \r\nReturns true if object is an Array.\r\n\r\n(function(){ return _.isArray(arguments); })();\r\n=> false\r\n_.isArray([1,2,3]);\r\n=> true\r\nisObject_.isObject(value) \r\nReturns true if value is an Object.\r\n\r\n_.isObject({});\r\n=> true\r\n_.isObject(1);\r\n=> false\r\nisArguments_.isArguments(object) \r\nReturns true if object is an Arguments object.\r\n\r\n(function(){ return _.isArguments(arguments); })(1, 2, 3);\r\n=> true\r\n_.isArguments([1,2,3]);\r\n=> false\r\nisFunction_.isFunction(object) \r\nReturns true if object is a Function.\r\n\r\n_.isFunction(alert);\r\n=> true\r\nisString_.isString(object) \r\nReturns true if object is a String.\r\n\r\n_.isString(\"moe\");\r\n=> true\r\nisNumber_.isNumber(object) \r\nReturns true if object is a Number (including NaN).\r\n\r\n_.isNumber(8.4 * 5);\r\n=> true\r\nisFinite_.isFinite(object) \r\nReturns true if object is a finite Number.\r\n\r\n_.isFinite(-101);\r\n=> true\r\n\r\n_.isFinite(-Infinity);\r\n=> false\r\nisBoolean_.isBoolean(object) \r\nReturns true if object is either true or false.\r\n\r\n_.isBoolean(null);\r\n=> false\r\nisDate_.isDate(object) \r\nReturns true if object is a Date.\r\n\r\n_.isDate(new Date());\r\n=> true\r\nisRegExp_.isRegExp(object) \r\nReturns true if object is a RegExp.\r\n\r\n_.isRegExp(\/moe\/);\r\n=> true\r\nisNaN_.isNaN(object) \r\nReturns true if object is NaN.\r\nNote: this is not the same as the native isNaN function, which will also return true if the variable is undefined.\r\n\r\n_.isNaN(NaN);\r\n=> true\r\nisNaN(undefined);\r\n=> true\r\n_.isNaN(undefined);\r\n=> false\r\nisNull_.isNull(object) \r\nReturns true if the value of object is null.\r\n\r\n_.isNull(null);\r\n=> true\r\n_.isNull(undefined);\r\n=> false\r\nisUndefined_.isUndefined(variable) \r\nReturns true if variable is undefined.\r\n\r\n_.isUndefined(window.missingVariable);\r\n=> true",
        "created":"1336279203",
        "4":"1336279203",
        "updated":"1336279203",
        "5":"1336279203",
        "category_id":"2",
        "6":"2",
        "user_id":"3",
        "7":"3",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"35",
        "0":"35",
        "title":"Destructuring Assignment",
        "1":"Destructuring Assignment",
        "description":"Destructuring Assignment",
        "2":"Destructuring Assignment",
        "content":"theBait   = 1000\r\ntheSwitch = 0\r\n\r\n[theBait, theSwitch] = [theSwitch, theBait]\r\n\r\n\r\nweatherReport = (location) ->\r\n  # Make an Ajax request to fetch the weather...\r\n  [location, 72, \"Mostly Sunny\"]\r\n\r\n[city, temp, forecast] = weatherReport \"Berkeley, CA\"\r\n",
        "3":"theBait   = 1000\r\ntheSwitch = 0\r\n\r\n[theBait, theSwitch] = [theSwitch, theBait]\r\n\r\n\r\nweatherReport = (location) ->\r\n  # Make an Ajax request to fetch the weather...\r\n  [location, 72, \"Mostly Sunny\"]\r\n\r\n[city, temp, forecast] = weatherReport \"Berkeley, CA\"\r\n",
        "created":"1336279830",
        "4":"1336279830",
        "updated":"1336279830",
        "5":"1336279830",
        "category_id":"14",
        "6":"14",
        "user_id":"3",
        "7":"3",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"36",
        "0":"36",
        "title":"Function binding",
        "1":"Function binding",
        "description":"Function binding",
        "2":"Function binding",
        "content":"Account = (customer, cart) ->\r\n  @customer = customer\r\n  @cart = cart\r\n\r\n  $('.shopping_cart').bind 'click', (event) =>\r\n    @customer.purchase @cart",
        "3":"Account = (customer, cart) ->\r\n  @customer = customer\r\n  @cart = cart\r\n\r\n  $('.shopping_cart').bind 'click', (event) =>\r\n    @customer.purchase @cart",
        "created":"1336281906",
        "4":"1336281906",
        "updated":"1336281906",
        "5":"1336281906",
        "category_id":"14",
        "6":"14",
        "user_id":"3",
        "7":"3",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"37",
        "0":"37",
        "title":"Splats",
        "1":"Splats",
        "description":"How to user Splats",
        "2":"How to user Splats",
        "content":"gold = silver = rest = \"unknown\"\r\n\r\nawardMedals = (first, second, others...) ->\r\n  gold   = first\r\n  silver = second\r\n  rest   = others\r\n\r\ncontenders = [\r\n  \"Michael Phelps\"\r\n  \"Liu Xiang\"\r\n  \"Yao Ming\"\r\n  \"Allyson Felix\"\r\n  \"Shawn Johnson\"\r\n  \"Roman Sebrle\"\r\n  \"Guo Jingjing\"\r\n  \"Tyson Gay\"\r\n  \"Asafa Powell\"\r\n  \"Usain Bolt\"\r\n]\r\n\r\nawardMedals contenders...\r\n\r\nalert \"Gold: \" + gold\r\nalert \"Silver: \" + silver\r\nalert \"The Field: \" + rest",
        "3":"gold = silver = rest = \"unknown\"\r\n\r\nawardMedals = (first, second, others...) ->\r\n  gold   = first\r\n  silver = second\r\n  rest   = others\r\n\r\ncontenders = [\r\n  \"Michael Phelps\"\r\n  \"Liu Xiang\"\r\n  \"Yao Ming\"\r\n  \"Allyson Felix\"\r\n  \"Shawn Johnson\"\r\n  \"Roman Sebrle\"\r\n  \"Guo Jingjing\"\r\n  \"Tyson Gay\"\r\n  \"Asafa Powell\"\r\n  \"Usain Bolt\"\r\n]\r\n\r\nawardMedals contenders...\r\n\r\nalert \"Gold: \" + gold\r\nalert \"Silver: \" + silver\r\nalert \"The Field: \" + rest",
        "created":"1336282011",
        "4":"1336282011",
        "updated":"1336282011",
        "5":"1336282011",
        "category_id":"14",
        "6":"14",
        "user_id":"3",
        "7":"3",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"39",
        "0":"39",
        "title":"GIT -  A web-focused Git workflow",
        "1":"GIT -  A web-focused Git workflow",
        "description":"GIT - A web-focused Git workflow",
        "2":"GIT - A web-focused Git workflow",
        "content":"A web-focused Git workflow\r\nAfter months of looking, struggling through Git-SVN glitches and letting things roll around in my head, I\u2019ve finally arrived at a web-focused Git workflow that\u2019s simple, flexible and easy to use.\r\n\r\nSome key advantages:\r\n\r\nPushing remote changes automatically updates the live site\r\nServer-based site edits won\u2019t break history\r\nSimple, no special commit rules or requirements\r\nWorks with existing sites, no need to redeploy or move files\r\nOverview\r\nThe key idea in this system is that the web site exists on the server as a pair of repositories; a bare repository alongside a conventional repository containing the live site. Two simple Git hooks link the pair, automatically pushing and pulling changes between them.\r\n\r\n\r\n\r\nThe two repositories:\r\n\r\nHub is a bare repository. All other repositories will be cloned from this.\r\nPrime is a standard repository, the live web site is served from its working directory.\r\nUsing the pair of repositories is simple and flexible. Remote clones with ssh-access can update the live site with a simple git push to Hub. Any files edited directly on the server are instantly mirrored into Hub upon commit. The whole thing pretty much just works \u2014 whichever way it\u2019s used.\r\n\r\nGetting ready\r\n\r\nObviously Git is required on the server and any local machines. My shared web host doesn\u2019t offer Git, but it\u2019s easy enough to install Git yourself.\r\n\r\nIf this is the first time running Git on your webserver, remember to setup your global configuration info. I set a different Git user.name to help distinguish server-based changes in project history.\r\n\r\n$ git config --global user.name \"Joe, working on the server\"\r\nGetting started\r\nThe first step is to initialize a new Git repository in the live web site directory on the server, then to add and commit all the site\u2019s files. This is the Prime repository and working copy. Even if history exists in other places, the contents of the live site will be the baseline onto which all other work is merged.\r\n\r\n$ cd ~\/www\r\n$ git init\r\n$ git add .\r\n$ git commit -m\"initial import of pre-existing web files\"\r\nInitializing in place also means there is no downtime or need to re-deploy the site, Git just builds a repository around everything that\u2019s already there.\r\n\r\nWith the live site now safely in Git, create a bare repository outside the web directory, this is Hub.\r\n\r\n$ cd; mkdir site_hub.git; cd site_hub.git\r\n$ git --bare init\r\nInitialized empty Git repository in \/home\/joe\/site_hub.git\r\nThen, from inside Prime\u2019s working directory, add Hub as a remote and push Prime\u2019s master branch:\r\n\r\n$ cd ~\/www\r\n$ git remote add hub ~\/site_hub.git\r\n$ git remote show hub\r\n* remote hub\r\n  URL: \/home\/joe\/site_hub.git\r\n$ git push hub master\r\nHooks\r\nTwo simple Git hooks scripts keep Hub and Prime linked together.\r\n\r\nAn oft-repeated rule of Git is to never push into a repository that has a work tree attached to it. I tried it, and things do get weird fast. The hub repository exists for this reason. Instead of pushing changes to Prime from Hub, which wouldn\u2019t affect the working copy anyway, Hub uses a hook script which tells Prime to pull changes from Hub.\r\n\r\npost-update \u2013 Hub repository\r\nThis hook is called when Hub receives an update. The script changes directories to the Prime repository working copy then runs a pull from Prime. Pushing changes doesn\u2019t update a repository\u2019s working copy, so it\u2019s necessary to execute this from inside the working copy itself.\r\n\r\n#!\/bin\/sh\r\n\r\necho\r\necho \"**** Pulling changes into Prime [Hub's post-update hook]\"\r\necho\r\n\r\ncd $HOME\/www || exit\r\nunset GIT_DIR\r\ngit pull hub master\r\n\r\nexec git-update-server-info\r\npost-commit \u2013 Prime repository\r\nThis hook is called after every commit to send the newly commited changes back up to Hub. Ideally, it\u2019s not common to make changes live on the server, but automating this makes sure site history won\u2019t diverge and create conflicts.\r\n\r\n#!\/bin\/sh\r\n\r\necho\r\necho \"**** pushing changes to Hub [Prime's post-commit hook]\"\r\necho\r\n\r\ngit push hub\r\nWith this hook in place, all changes made to Prime\u2019s master branch are immediately available from Hub. Other branches will also be cloned, but won\u2019t affect the site. Because all remote repository access is via SSH urls, only users with shell access to the web server will be able to push and trigger a site update.\r\n\r\nConflicts\r\nThis repository-hook arrangement makes it very difficult to accidentally break the live site. Since every commit to Prime is automatically pushed to Hub, all conflicts will be immediately visible to the clones when pushing an update.\r\n\r\nHowever there are a few situations where Prime can diverge from Hub which will require additional steps to fix. If an uncommitted edit leaves Prime in a dirty state, Hub\u2019s post-update pull will fail with an \u201cEntry \u2018foo\u2019 not uptodate. Cannot merge.\u201d warning. Committing changes will clean up Prime\u2019s working directory, and the post-update hook will then merge the un-pulled changes.\r\n\r\nIf a conflict occurs where changes to Prime can\u2019t be merged with Hub, I\u2019ve found the best solution is to push the current state of Prime to a new branch on Hub. The following command, issued from inside Prime, will create a remote \u201cfixme\u201d branch based on the current contents of Prime:\r\n\r\n$ git push hub master:refs\/heads\/fixme\r\nOnce that\u2019s in Hub, any remote clone can pull down the new branch and resolve the merge. Trying to resolve a conflict on the server would almost certainly break the site due to Git\u2019s conflict markers.\r\n\r\nHousekeeping\r\nPrime\u2019s .git folder is at the root level of the web site, and is probably publicly accessible. To protect the folder and prevent unwanted clones of the repository, add the following to your top-level .htaccess file to forbid web access:\r\n\r\n# deny access to the top-level git repository:\r\nRewriteEngine On\r\nRewriteRule \\.git - [F,L]\r\nTroubleshooting\r\nIf you\u2019re seeing this error when trying to push to a server repository:\r\n\r\ngit-receive-pack: command not found\r\nfatal: The remote end hung up unexpectedly\r\nAdd export PATH=${PATH}:~\/bin to your .bashrc file on the server. Thanks to Robert for finding and posting the fix.\r\n\r\nLinks\r\nThese didn\u2019t fit in anywhere else:\r\n\r\nToolman Tim has a very good introductory walkthrough of setting up a new remote git repository.\r\nThis ended up being somewhat similar to the update mechanism in Ikiwiki, wish I\u2019d found that page earlier.\r\nGetting a static web site organized with git came up with a different solution, but calling git reset --hard from a hook on the server could cause a lot of trouble when committing server-side changes.",
        "3":"A web-focused Git workflow\r\nAfter months of looking, struggling through Git-SVN glitches and letting things roll around in my head, I\u2019ve finally arrived at a web-focused Git workflow that\u2019s simple, flexible and easy to use.\r\n\r\nSome key advantages:\r\n\r\nPushing remote changes automatically updates the live site\r\nServer-based site edits won\u2019t break history\r\nSimple, no special commit rules or requirements\r\nWorks with existing sites, no need to redeploy or move files\r\nOverview\r\nThe key idea in this system is that the web site exists on the server as a pair of repositories; a bare repository alongside a conventional repository containing the live site. Two simple Git hooks link the pair, automatically pushing and pulling changes between them.\r\n\r\n\r\n\r\nThe two repositories:\r\n\r\nHub is a bare repository. All other repositories will be cloned from this.\r\nPrime is a standard repository, the live web site is served from its working directory.\r\nUsing the pair of repositories is simple and flexible. Remote clones with ssh-access can update the live site with a simple git push to Hub. Any files edited directly on the server are instantly mirrored into Hub upon commit. The whole thing pretty much just works \u2014 whichever way it\u2019s used.\r\n\r\nGetting ready\r\n\r\nObviously Git is required on the server and any local machines. My shared web host doesn\u2019t offer Git, but it\u2019s easy enough to install Git yourself.\r\n\r\nIf this is the first time running Git on your webserver, remember to setup your global configuration info. I set a different Git user.name to help distinguish server-based changes in project history.\r\n\r\n$ git config --global user.name \"Joe, working on the server\"\r\nGetting started\r\nThe first step is to initialize a new Git repository in the live web site directory on the server, then to add and commit all the site\u2019s files. This is the Prime repository and working copy. Even if history exists in other places, the contents of the live site will be the baseline onto which all other work is merged.\r\n\r\n$ cd ~\/www\r\n$ git init\r\n$ git add .\r\n$ git commit -m\"initial import of pre-existing web files\"\r\nInitializing in place also means there is no downtime or need to re-deploy the site, Git just builds a repository around everything that\u2019s already there.\r\n\r\nWith the live site now safely in Git, create a bare repository outside the web directory, this is Hub.\r\n\r\n$ cd; mkdir site_hub.git; cd site_hub.git\r\n$ git --bare init\r\nInitialized empty Git repository in \/home\/joe\/site_hub.git\r\nThen, from inside Prime\u2019s working directory, add Hub as a remote and push Prime\u2019s master branch:\r\n\r\n$ cd ~\/www\r\n$ git remote add hub ~\/site_hub.git\r\n$ git remote show hub\r\n* remote hub\r\n  URL: \/home\/joe\/site_hub.git\r\n$ git push hub master\r\nHooks\r\nTwo simple Git hooks scripts keep Hub and Prime linked together.\r\n\r\nAn oft-repeated rule of Git is to never push into a repository that has a work tree attached to it. I tried it, and things do get weird fast. The hub repository exists for this reason. Instead of pushing changes to Prime from Hub, which wouldn\u2019t affect the working copy anyway, Hub uses a hook script which tells Prime to pull changes from Hub.\r\n\r\npost-update \u2013 Hub repository\r\nThis hook is called when Hub receives an update. The script changes directories to the Prime repository working copy then runs a pull from Prime. Pushing changes doesn\u2019t update a repository\u2019s working copy, so it\u2019s necessary to execute this from inside the working copy itself.\r\n\r\n#!\/bin\/sh\r\n\r\necho\r\necho \"**** Pulling changes into Prime [Hub's post-update hook]\"\r\necho\r\n\r\ncd $HOME\/www || exit\r\nunset GIT_DIR\r\ngit pull hub master\r\n\r\nexec git-update-server-info\r\npost-commit \u2013 Prime repository\r\nThis hook is called after every commit to send the newly commited changes back up to Hub. Ideally, it\u2019s not common to make changes live on the server, but automating this makes sure site history won\u2019t diverge and create conflicts.\r\n\r\n#!\/bin\/sh\r\n\r\necho\r\necho \"**** pushing changes to Hub [Prime's post-commit hook]\"\r\necho\r\n\r\ngit push hub\r\nWith this hook in place, all changes made to Prime\u2019s master branch are immediately available from Hub. Other branches will also be cloned, but won\u2019t affect the site. Because all remote repository access is via SSH urls, only users with shell access to the web server will be able to push and trigger a site update.\r\n\r\nConflicts\r\nThis repository-hook arrangement makes it very difficult to accidentally break the live site. Since every commit to Prime is automatically pushed to Hub, all conflicts will be immediately visible to the clones when pushing an update.\r\n\r\nHowever there are a few situations where Prime can diverge from Hub which will require additional steps to fix. If an uncommitted edit leaves Prime in a dirty state, Hub\u2019s post-update pull will fail with an \u201cEntry \u2018foo\u2019 not uptodate. Cannot merge.\u201d warning. Committing changes will clean up Prime\u2019s working directory, and the post-update hook will then merge the un-pulled changes.\r\n\r\nIf a conflict occurs where changes to Prime can\u2019t be merged with Hub, I\u2019ve found the best solution is to push the current state of Prime to a new branch on Hub. The following command, issued from inside Prime, will create a remote \u201cfixme\u201d branch based on the current contents of Prime:\r\n\r\n$ git push hub master:refs\/heads\/fixme\r\nOnce that\u2019s in Hub, any remote clone can pull down the new branch and resolve the merge. Trying to resolve a conflict on the server would almost certainly break the site due to Git\u2019s conflict markers.\r\n\r\nHousekeeping\r\nPrime\u2019s .git folder is at the root level of the web site, and is probably publicly accessible. To protect the folder and prevent unwanted clones of the repository, add the following to your top-level .htaccess file to forbid web access:\r\n\r\n# deny access to the top-level git repository:\r\nRewriteEngine On\r\nRewriteRule \\.git - [F,L]\r\nTroubleshooting\r\nIf you\u2019re seeing this error when trying to push to a server repository:\r\n\r\ngit-receive-pack: command not found\r\nfatal: The remote end hung up unexpectedly\r\nAdd export PATH=${PATH}:~\/bin to your .bashrc file on the server. Thanks to Robert for finding and posting the fix.\r\n\r\nLinks\r\nThese didn\u2019t fit in anywhere else:\r\n\r\nToolman Tim has a very good introductory walkthrough of setting up a new remote git repository.\r\nThis ended up being somewhat similar to the update mechanism in Ikiwiki, wish I\u2019d found that page earlier.\r\nGetting a static web site organized with git came up with a different solution, but calling git reset --hard from a hook on the server could cause a lot of trouble when committing server-side changes.",
        "created":"1336283909",
        "4":"1336283909",
        "updated":"1336283909",
        "5":"1336283909",
        "category_id":"11",
        "6":"11",
        "user_id":"3",
        "7":"3",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"40",
        "0":"40",
        "title":"How to install Git on a shared host ",
        "1":"How to install Git on a shared host ",
        "description":"How to install Git on a shared host ",
        "2":"How to install Git on a shared host ",
        "content":"\/\/ source : http:\/\/joemaller.com\/908\/how-to-install-git-on-a-shared-host\/\r\nHow to install Git on a shared host\r\n(regularly updated)\r\n\r\nInstalling Git on a shared hosting account is simple, the installation is fast and like most things Git, it just works.\r\n\r\nAs with my previous Subversion on shared hosting post, this will be a barebones install. The purpose of this installation is to be able to push changes from remote repositories into the hosted repo, where the hosted repository may also serve as the source directory of the live website. Like this.\r\n\r\nPrerequisites\r\nThe only two things you absolutely must have are shell access to the account and permission to use GCC on the server. Check both with the following command:\r\n\r\n$ ssh joe@webserver 'gcc --version'\r\ngcc (GCC) 4.1.2 20080704 (Red Hat 4.1.2-50)\r\n[...]\r\nIf GCC replies with a version number, you should be able to install Git. SSH into your server and let\u2019s get started!\r\n\r\nIf you see something like \/usr\/bin\/gcc: Permission denied you don\u2019t have access to the GCC compiler and won\u2019t be able to build the Git binaries from source. Find another hosting company.\r\n\r\nUpdate your $PATH\r\nNone of this will work if you don\u2019t update the $PATH environment variable. In most cases, this is set in .bashrc. Using .bashrc instead of .bash_profile updates $PATH for interactive and non-interactive sessions\u2013which is necessary for remote Git commands. Edit .bashrc and add the following line:\r\n\r\nexport PATH=$HOME\/opt\/bin:$PATH\r\nBe sure \u2018~\/opt\/bin\u2019 is at the beginning since $PATH is searched from left to right; to execute local binaries first, their location has to appear first. Depending on your server\u2019s configuration there could be a lot of other stuff in there, including duplicates.\r\n\r\nDouble-check this by sourcing the file and echoing $PATH:\r\n\r\n$ source ~\/.bashrc\r\n$ echo $PATH\r\n\/home\/joe\/opt\/bin:\/usr\/local\/bin:\/bin:\/usr\/bin\r\nVerify that the remote path was updated by sending a remote command like this (from another connection):\r\n\r\n$ ssh joe@webserver 'echo $PATH'\r\n\/home\/joe\/opt\/bin:\/usr\/local\/bin:\/bin:\/usr\/bin\r\nNote: Installing into the ~\/opt directory keeps the home folder cleaner and is where add-on applications are customarily installed on Unix systems.\r\n\r\nInstalling Git\r\nSSH into your webserver. I created a source directory to hold the files and make cleanup easier:\r\n\r\n$ cd\r\n$ mkdir src\r\n$ cd src\r\nGrab the most current source tarballs from the Git site. At the time this post was last updated, the most recent version was v1.7.6:\r\n\r\n$ curl -LO http:\/\/kernel.org\/pub\/software\/scm\/git\/git-1.7.6.tar.bz2\r\nUntar the archive and cd into the new directory:\r\n\r\n$ tar -xjvf git-1.7.6.tar.bz2\r\n$ cd git-1.7.6\r\nThis next step is the only one that really seems to matter with regards to shared hosting. The Configure script needs to be told where to install, and because we\u2019re on a shared host, Git\u2019s files should be put somewhere in our home directory:\r\n\r\n$ .\/configure --prefix=$HOME\/opt\r\n[words...]\r\nLastly, make and install:\r\n\r\n$ make && make install\r\n[lots of words...]\r\nThat should be it, check your installed version like this:\r\n\r\n$ git --version\r\ngit version 1.7.6\r\nIt's now safe to delete the src folder which contained the download and source files.\r\n\r\nNote that these instructions do not install Git's documentation man pages. Also, these instructions appear to work exactly the same on Mac OS X, though the installer package is way easier and includes documentation.\r\n\r\nMy preferred shared hosting providers are A2 Hosting and WebFaction.",
        "3":"\/\/ source : http:\/\/joemaller.com\/908\/how-to-install-git-on-a-shared-host\/\r\nHow to install Git on a shared host\r\n(regularly updated)\r\n\r\nInstalling Git on a shared hosting account is simple, the installation is fast and like most things Git, it just works.\r\n\r\nAs with my previous Subversion on shared hosting post, this will be a barebones install. The purpose of this installation is to be able to push changes from remote repositories into the hosted repo, where the hosted repository may also serve as the source directory of the live website. Like this.\r\n\r\nPrerequisites\r\nThe only two things you absolutely must have are shell access to the account and permission to use GCC on the server. Check both with the following command:\r\n\r\n$ ssh joe@webserver 'gcc --version'\r\ngcc (GCC) 4.1.2 20080704 (Red Hat 4.1.2-50)\r\n[...]\r\nIf GCC replies with a version number, you should be able to install Git. SSH into your server and let\u2019s get started!\r\n\r\nIf you see something like \/usr\/bin\/gcc: Permission denied you don\u2019t have access to the GCC compiler and won\u2019t be able to build the Git binaries from source. Find another hosting company.\r\n\r\nUpdate your $PATH\r\nNone of this will work if you don\u2019t update the $PATH environment variable. In most cases, this is set in .bashrc. Using .bashrc instead of .bash_profile updates $PATH for interactive and non-interactive sessions\u2013which is necessary for remote Git commands. Edit .bashrc and add the following line:\r\n\r\nexport PATH=$HOME\/opt\/bin:$PATH\r\nBe sure \u2018~\/opt\/bin\u2019 is at the beginning since $PATH is searched from left to right; to execute local binaries first, their location has to appear first. Depending on your server\u2019s configuration there could be a lot of other stuff in there, including duplicates.\r\n\r\nDouble-check this by sourcing the file and echoing $PATH:\r\n\r\n$ source ~\/.bashrc\r\n$ echo $PATH\r\n\/home\/joe\/opt\/bin:\/usr\/local\/bin:\/bin:\/usr\/bin\r\nVerify that the remote path was updated by sending a remote command like this (from another connection):\r\n\r\n$ ssh joe@webserver 'echo $PATH'\r\n\/home\/joe\/opt\/bin:\/usr\/local\/bin:\/bin:\/usr\/bin\r\nNote: Installing into the ~\/opt directory keeps the home folder cleaner and is where add-on applications are customarily installed on Unix systems.\r\n\r\nInstalling Git\r\nSSH into your webserver. I created a source directory to hold the files and make cleanup easier:\r\n\r\n$ cd\r\n$ mkdir src\r\n$ cd src\r\nGrab the most current source tarballs from the Git site. At the time this post was last updated, the most recent version was v1.7.6:\r\n\r\n$ curl -LO http:\/\/kernel.org\/pub\/software\/scm\/git\/git-1.7.6.tar.bz2\r\nUntar the archive and cd into the new directory:\r\n\r\n$ tar -xjvf git-1.7.6.tar.bz2\r\n$ cd git-1.7.6\r\nThis next step is the only one that really seems to matter with regards to shared hosting. The Configure script needs to be told where to install, and because we\u2019re on a shared host, Git\u2019s files should be put somewhere in our home directory:\r\n\r\n$ .\/configure --prefix=$HOME\/opt\r\n[words...]\r\nLastly, make and install:\r\n\r\n$ make && make install\r\n[lots of words...]\r\nThat should be it, check your installed version like this:\r\n\r\n$ git --version\r\ngit version 1.7.6\r\nIt's now safe to delete the src folder which contained the download and source files.\r\n\r\nNote that these instructions do not install Git's documentation man pages. Also, these instructions appear to work exactly the same on Mac OS X, though the installer package is way easier and includes documentation.\r\n\r\nMy preferred shared hosting providers are A2 Hosting and WebFaction.",
        "created":"1336283941",
        "4":"1336283941",
        "updated":"1336283941",
        "5":"1336283941",
        "category_id":"11",
        "6":"11",
        "user_id":"3",
        "7":"3",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"41",
        "0":"41",
        "title":"Loops and Comprehension",
        "1":"Loops and Comprehension",
        "description":"Loops and Comprehension",
        "2":"Loops and Comprehension",
        "content":"# Eat lunch.\r\neat food for food in ['toast', 'cheese', 'wine']\r\n\r\n# Fine five course dining.\r\ncourses = ['greens', 'caviar', 'truffles', 'roast', 'cake']\r\nmenu i + 1, dish for dish, i in courses\r\n\r\n# Health conscious meal.\r\nfoods = ['broccoli', 'spinach', 'chocolate']\r\neat food for food in foods when food isnt 'chocolate'",
        "3":"# Eat lunch.\r\neat food for food in ['toast', 'cheese', 'wine']\r\n\r\n# Fine five course dining.\r\ncourses = ['greens', 'caviar', 'truffles', 'roast', 'cake']\r\nmenu i + 1, dish for dish, i in courses\r\n\r\n# Health conscious meal.\r\nfoods = ['broccoli', 'spinach', 'chocolate']\r\neat food for food in foods when food isnt 'chocolate'",
        "created":"1336284202",
        "4":"1336284202",
        "updated":"1336284202",
        "5":"1336284202",
        "category_id":"14",
        "6":"14",
        "user_id":"3",
        "7":"3",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"43",
        "0":"43",
        "title":"Cake, and Cakefiles",
        "1":"Cake, and Cakefiles",
        "description":"Cake, and Cakefiles",
        "2":"Cake, and Cakefiles",
        "content":"Cake, and Cakefiles\r\n\r\n\/* \r\nCoffeeScript includes a (very) simple build system similar to Make and Rake. Naturally, it's called Cake, and is used for the tasks that build and test the CoffeeScript language itself. Tasks are defined in a file named Cakefile, and can be invoked by running cake [task] from within the directory. To print a list of all the tasks and options, just type cake.\r\n\r\nTask definitions are written in CoffeeScript, so you can put arbitrary code in your Cakefile. Define a task with a name, a long description, and the function to invoke when the task is run. If your task takes a command-line option, you can define the option with short and long flags, and it will be made available in the options object. Here's a task that uses the Node.js API to rebuild CoffeeScript's parser:\r\n*\/\r\n\r\nfs = require 'fs'\r\n\r\noption '-o', '--output [DIR]', 'directory for compiled code'\r\n\r\ntask 'build:parser', 'rebuild the Jison parser', (options) ->\r\n  require 'jison'\r\n  code = require('.\/lib\/grammar').parser.generate()\r\n  dir  = options.output or 'lib'\r\n  fs.writeFile \"#{dir}\/parser.js\", code\r\n\r\n\/*\r\n\r\nIf you need to invoke one task before another \u2014 for example, running  build before test, you can use the invoke function:  invoke 'build'. Cake tasks are a minimal way to expose your CoffeeScript functions to the command line, so don't expect any fanciness built-in. If you need dependencies, or async callbacks, it's best to put them in your code itself \u2014 not the cake task.\r\n*\/",
        "3":"Cake, and Cakefiles\r\n\r\n\/* \r\nCoffeeScript includes a (very) simple build system similar to Make and Rake. Naturally, it's called Cake, and is used for the tasks that build and test the CoffeeScript language itself. Tasks are defined in a file named Cakefile, and can be invoked by running cake [task] from within the directory. To print a list of all the tasks and options, just type cake.\r\n\r\nTask definitions are written in CoffeeScript, so you can put arbitrary code in your Cakefile. Define a task with a name, a long description, and the function to invoke when the task is run. If your task takes a command-line option, you can define the option with short and long flags, and it will be made available in the options object. Here's a task that uses the Node.js API to rebuild CoffeeScript's parser:\r\n*\/\r\n\r\nfs = require 'fs'\r\n\r\noption '-o', '--output [DIR]', 'directory for compiled code'\r\n\r\ntask 'build:parser', 'rebuild the Jison parser', (options) ->\r\n  require 'jison'\r\n  code = require('.\/lib\/grammar').parser.generate()\r\n  dir  = options.output or 'lib'\r\n  fs.writeFile \"#{dir}\/parser.js\", code\r\n\r\n\/*\r\n\r\nIf you need to invoke one task before another \u2014 for example, running  build before test, you can use the invoke function:  invoke 'build'. Cake tasks are a minimal way to expose your CoffeeScript functions to the command line, so don't expect any fanciness built-in. If you need dependencies, or async callbacks, it's best to put them in your code itself \u2014 not the cake task.\r\n*\/",
        "created":"1336307587",
        "4":"1336307587",
        "updated":"1336307587",
        "5":"1336307587",
        "category_id":"14",
        "6":"14",
        "user_id":"3",
        "7":"3",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"45",
        "0":"45",
        "title":"Array functions",
        "1":"Array functions",
        "description":"Array functions ",
        "2":"Array functions ",
        "content":"\/\/Fonctions sur les tableaux\r\n\r\n\/\/ in french\r\n\r\nVoir aussi is_array(), explode(), implode(), split(), preg_split() et unset().\r\n\r\n\r\narray_change_key_case # Change la casse des cl\u00e9s d'un tableau\r\n\r\narray_chunk # S\u00e9pare un tableau en tableaux de taille inf\u00e9rieure\r\n\r\narray_combine # Cr\u00e9e un tableau \u00e0 partir de deux autres tableaux\r\narray_count_values # Compte le nombre de valeurs d'un tableau\r\narray_diff_assoc # Calcule la diff\u00e9rence de deux tableaux, en prenant aussi en compte les cl\u00e9s\r\narray_diff_key # Calcule la diff\u00e9rence de deux tableaux en utilisant les cl\u00e9s pour comparaison\r\narray_diff_uassoc # Calcule la diff\u00e9rence entre deux tableaux associatifs, \u00e0 l'aide d'une fonction de rappel\r\narray_diff_ukey # Calcule la diff\u00e9rence entre deux tableaux en utilisant une fonction de rappel sur les cl\u00e9s pour comparaison\r\narray_diff # Calcule la diff\u00e9rence entre deux tableaux\r\narray_fill_keys # Remplit un tableau avec des valeurs, en sp\u00e9cifiant les cl\u00e9s\r\narray_fill # Remplit un tableau avec une m\u00eame valeur\r\narray_filter # Filtre les \u00e9l\u00e9ments d'un tableau gr\u00e2ce \u00e0 une fonction utilisateur\r\narray_flip # Remplace les cl\u00e9s par les valeurs, et les valeurs par les cl\u00e9s\r\narray_intersect_assoc # Calcule l'intersection de deux tableaux avec des tests sur les index\r\narray_intersect_key # Calcule l'intersection de deux tableaux en utilisant les cl\u00e9s pour comparaison\r\narray_intersect_uassoc # Calcule l'intersection de deux tableaux avec des tests sur les index, compare les index en utilisant une fonction de rappel\r\narray_intersect_ukey # Calcule l'intersection de deux tableaux en utilisant une fonction de rappel sur les cl\u00e9s pour comparaison\r\narray_intersect # Calcule l'intersection de tableaux\r\narray_key_exists # V\u00e9rifie si une cl\u00e9 existe dans un tableau\r\narray_keys # Retourne toutes les cl\u00e9s ou un ensemble des cl\u00e9s d'un tableau\r\narray_map # Applique une fonction sur les \u00e9l\u00e9ments d'un tableau\r\narray_merge_recursive # Combine plusieurs tableaux ensemble, r\u00e9cursivement\r\narray_merge # Fusionne plusieurs tableaux en un seul\r\narray_multisort # Trie les tableaux multidimensionnels\r\narray_pad # Compl\u00e8te un tableau avec une valeur jusqu'\u00e0 la longueur sp\u00e9cifi\u00e9e\r\narray_pop # D\u00e9pile un \u00e9l\u00e9ment de la fin d'un tableau\r\narray_product # Calcule le produit des valeurs du tableau\r\narray_push # Empile un ou plusieurs \u00e9l\u00e9ments \u00e0 la fin d'un tableau\r\narray_rand # Prend une ou plusieurs valeurs, au hasard dans un tableau\r\narray_reduce # R\u00e9duit it\u00e9rativement un tableau\r\narray_replace_recursive # Replaces elements from passed arrays into the first array recursively\r\narray_replace # Remplace les \u00e9l\u00e9ments d'un tableau par ceux d'autres tableaux\r\narray_reverse # Inverse l'ordre des \u00e9l\u00e9ments d'un tableau\r\narray_search # Recherche dans un tableau la cl\u00e9 associ\u00e9e \u00e0 une valeur\r\narray_shift # D\u00e9pile un \u00e9l\u00e9ment au d\u00e9but d'un tableau\r\narray_slice # Extrait une portion de tableau\r\narray_splice # Efface et remplace une portion de tableau\r\narray_sum # Calcule la somme des valeurs du tableau\r\narray_udiff_assoc # Calcule la diff\u00e9rence entre des tableaux avec v\u00e9rification des index, compare les donn\u00e9es avec une fonction de rappel\r\narray_udiff_uassoc # Calcule la diff\u00e9rence de deux tableaux associatifs, compare les donn\u00e9es et les index avec une fonction de rappel\r\narray_udiff # Calcule la diff\u00e9rence entre deux tableaux en utilisant une fonction rappel\r\narray_uintersect_assoc # Calcule l'intersection de deux tableaux avec des tests sur l'index, compare les donn\u00e9es en utilisant une fonction de rappel\r\narray_uintersect_uassoc # Calcule l'intersection de deux tableaux avec des tests sur l'index, compare les donn\u00e9es et les indexes des deux tableaux en utilisant une fonction de rappel\r\narray_uintersect # Calcule l'intersection de deux tableaux, compare les donn\u00e9es en utilisant une fonction de rappel\r\narray_unique # D\u00e9doublonne un tableau\r\narray_unshift # Empile un ou plusieurs \u00e9l\u00e9ments au d\u00e9but d'un tableau\r\narray_values # Retourne toutes les valeurs d'un tableau\r\narray_walk_recursive # Applique une fonction de rappel r\u00e9cursivement \u00e0 chaque membre d'un tableau\r\narray_walk # Ex\u00e9cute une fonction sur chacun des \u00e9l\u00e9ments d'un tableau\r\narray # Cr\u00e9e un tableau\r\narsort # Trie un tableau en ordre inverse\r\nasort # Trie un tableau et conserve l'association des index\r\ncompact # Cr\u00e9e un tableau \u00e0 partir de variables et de leur valeur\r\ncount # Compte tous les \u00e9l\u00e9ments d'un tableau ou quelque chose d'un objet\r\ncurrent # Retourne l'\u00e9l\u00e9ment courant du tableau\r\neach # Retourne chaque paire cl\u00e9\/valeur d'un tableau\r\nend # Positionne le pointeur de tableau en fin de tableau\r\nextract # Importe les variables dans la table des symboles\r\nin_array # Indique si une valeur appartient \u00e0 un tableau\r\nkey # Retourne une cl\u00e9 d'un tableau associatif\r\nkrsort # Trie un tableau en sens inverse et suivant les cl\u00e9s\r\nksort # Trie un tableau suivant les cl\u00e9s\r\nlist # Assigne des variables comme si elles \u00e9taient un tableau\r\nnatcasesort # Trie un tableau avec l'algorithme \u00e0 \"ordre naturel\" insensible \u00e0 la casse\r\nnatsort # Trie un tableau avec l'algorithme \u00e0 \"ordre naturel\"\r\nnext # Avance le pointeur interne d'un tableau\r\npos # Alias de current\r\nprev # Recule le pointeur courant de tableau\r\nrange # Cr\u00e9e un tableau contenant un intervalle d'\u00e9l\u00e9ments\r\nreset # Remet le pointeur interne de tableau au d\u00e9but\r\nrsort # Trie un tableau en ordre inverse\r\nshuffle # M\u00e9lange les \u00e9l\u00e9ments d'un tableau\r\nsizeof # Alias de count\r\nsort # Trie un tableau\r\nuasort # Trie un tableau en utilisant une fonction de rappel\r\nuksort # Trie un tableau par ses cl\u00e9s en utilisant une fonction de rappel\r\nusort # Trie un tableau en utilisant une fonction de comparaison\r\n",
        "3":"\/\/Fonctions sur les tableaux\r\n\r\n\/\/ in french\r\n\r\nVoir aussi is_array(), explode(), implode(), split(), preg_split() et unset().\r\n\r\n\r\narray_change_key_case # Change la casse des cl\u00e9s d'un tableau\r\n\r\narray_chunk # S\u00e9pare un tableau en tableaux de taille inf\u00e9rieure\r\n\r\narray_combine # Cr\u00e9e un tableau \u00e0 partir de deux autres tableaux\r\narray_count_values # Compte le nombre de valeurs d'un tableau\r\narray_diff_assoc # Calcule la diff\u00e9rence de deux tableaux, en prenant aussi en compte les cl\u00e9s\r\narray_diff_key # Calcule la diff\u00e9rence de deux tableaux en utilisant les cl\u00e9s pour comparaison\r\narray_diff_uassoc # Calcule la diff\u00e9rence entre deux tableaux associatifs, \u00e0 l'aide d'une fonction de rappel\r\narray_diff_ukey # Calcule la diff\u00e9rence entre deux tableaux en utilisant une fonction de rappel sur les cl\u00e9s pour comparaison\r\narray_diff # Calcule la diff\u00e9rence entre deux tableaux\r\narray_fill_keys # Remplit un tableau avec des valeurs, en sp\u00e9cifiant les cl\u00e9s\r\narray_fill # Remplit un tableau avec une m\u00eame valeur\r\narray_filter # Filtre les \u00e9l\u00e9ments d'un tableau gr\u00e2ce \u00e0 une fonction utilisateur\r\narray_flip # Remplace les cl\u00e9s par les valeurs, et les valeurs par les cl\u00e9s\r\narray_intersect_assoc # Calcule l'intersection de deux tableaux avec des tests sur les index\r\narray_intersect_key # Calcule l'intersection de deux tableaux en utilisant les cl\u00e9s pour comparaison\r\narray_intersect_uassoc # Calcule l'intersection de deux tableaux avec des tests sur les index, compare les index en utilisant une fonction de rappel\r\narray_intersect_ukey # Calcule l'intersection de deux tableaux en utilisant une fonction de rappel sur les cl\u00e9s pour comparaison\r\narray_intersect # Calcule l'intersection de tableaux\r\narray_key_exists # V\u00e9rifie si une cl\u00e9 existe dans un tableau\r\narray_keys # Retourne toutes les cl\u00e9s ou un ensemble des cl\u00e9s d'un tableau\r\narray_map # Applique une fonction sur les \u00e9l\u00e9ments d'un tableau\r\narray_merge_recursive # Combine plusieurs tableaux ensemble, r\u00e9cursivement\r\narray_merge # Fusionne plusieurs tableaux en un seul\r\narray_multisort # Trie les tableaux multidimensionnels\r\narray_pad # Compl\u00e8te un tableau avec une valeur jusqu'\u00e0 la longueur sp\u00e9cifi\u00e9e\r\narray_pop # D\u00e9pile un \u00e9l\u00e9ment de la fin d'un tableau\r\narray_product # Calcule le produit des valeurs du tableau\r\narray_push # Empile un ou plusieurs \u00e9l\u00e9ments \u00e0 la fin d'un tableau\r\narray_rand # Prend une ou plusieurs valeurs, au hasard dans un tableau\r\narray_reduce # R\u00e9duit it\u00e9rativement un tableau\r\narray_replace_recursive # Replaces elements from passed arrays into the first array recursively\r\narray_replace # Remplace les \u00e9l\u00e9ments d'un tableau par ceux d'autres tableaux\r\narray_reverse # Inverse l'ordre des \u00e9l\u00e9ments d'un tableau\r\narray_search # Recherche dans un tableau la cl\u00e9 associ\u00e9e \u00e0 une valeur\r\narray_shift # D\u00e9pile un \u00e9l\u00e9ment au d\u00e9but d'un tableau\r\narray_slice # Extrait une portion de tableau\r\narray_splice # Efface et remplace une portion de tableau\r\narray_sum # Calcule la somme des valeurs du tableau\r\narray_udiff_assoc # Calcule la diff\u00e9rence entre des tableaux avec v\u00e9rification des index, compare les donn\u00e9es avec une fonction de rappel\r\narray_udiff_uassoc # Calcule la diff\u00e9rence de deux tableaux associatifs, compare les donn\u00e9es et les index avec une fonction de rappel\r\narray_udiff # Calcule la diff\u00e9rence entre deux tableaux en utilisant une fonction rappel\r\narray_uintersect_assoc # Calcule l'intersection de deux tableaux avec des tests sur l'index, compare les donn\u00e9es en utilisant une fonction de rappel\r\narray_uintersect_uassoc # Calcule l'intersection de deux tableaux avec des tests sur l'index, compare les donn\u00e9es et les indexes des deux tableaux en utilisant une fonction de rappel\r\narray_uintersect # Calcule l'intersection de deux tableaux, compare les donn\u00e9es en utilisant une fonction de rappel\r\narray_unique # D\u00e9doublonne un tableau\r\narray_unshift # Empile un ou plusieurs \u00e9l\u00e9ments au d\u00e9but d'un tableau\r\narray_values # Retourne toutes les valeurs d'un tableau\r\narray_walk_recursive # Applique une fonction de rappel r\u00e9cursivement \u00e0 chaque membre d'un tableau\r\narray_walk # Ex\u00e9cute une fonction sur chacun des \u00e9l\u00e9ments d'un tableau\r\narray # Cr\u00e9e un tableau\r\narsort # Trie un tableau en ordre inverse\r\nasort # Trie un tableau et conserve l'association des index\r\ncompact # Cr\u00e9e un tableau \u00e0 partir de variables et de leur valeur\r\ncount # Compte tous les \u00e9l\u00e9ments d'un tableau ou quelque chose d'un objet\r\ncurrent # Retourne l'\u00e9l\u00e9ment courant du tableau\r\neach # Retourne chaque paire cl\u00e9\/valeur d'un tableau\r\nend # Positionne le pointeur de tableau en fin de tableau\r\nextract # Importe les variables dans la table des symboles\r\nin_array # Indique si une valeur appartient \u00e0 un tableau\r\nkey # Retourne une cl\u00e9 d'un tableau associatif\r\nkrsort # Trie un tableau en sens inverse et suivant les cl\u00e9s\r\nksort # Trie un tableau suivant les cl\u00e9s\r\nlist # Assigne des variables comme si elles \u00e9taient un tableau\r\nnatcasesort # Trie un tableau avec l'algorithme \u00e0 \"ordre naturel\" insensible \u00e0 la casse\r\nnatsort # Trie un tableau avec l'algorithme \u00e0 \"ordre naturel\"\r\nnext # Avance le pointeur interne d'un tableau\r\npos # Alias de current\r\nprev # Recule le pointeur courant de tableau\r\nrange # Cr\u00e9e un tableau contenant un intervalle d'\u00e9l\u00e9ments\r\nreset # Remet le pointeur interne de tableau au d\u00e9but\r\nrsort # Trie un tableau en ordre inverse\r\nshuffle # M\u00e9lange les \u00e9l\u00e9ments d'un tableau\r\nsizeof # Alias de count\r\nsort # Trie un tableau\r\nuasort # Trie un tableau en utilisant une fonction de rappel\r\nuksort # Trie un tableau par ses cl\u00e9s en utilisant une fonction de rappel\r\nusort # Trie un tableau en utilisant une fonction de comparaison\r\n",
        "created":"1336307788",
        "4":"1336307788",
        "updated":"1336307788",
        "5":"1336307788",
        "category_id":"1",
        "6":"1",
        "user_id":"3",
        "7":"3",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"48",
        "0":"48",
        "title":"CSS Wrap - white-space",
        "1":"CSS Wrap - white-space",
        "description":"CSS Wrap - white-space",
        "2":"CSS Wrap - white-space",
        "content":"Default is normal \r\n\r\n    white-space: none;\r\n    white-space: nowrap;\r\n    white-space: pre;\r\n    white-space: pre-wrap;      \/* CSS 2.1 *\/\r\n    white-space: pre-line;      \/* CSS 2.1 *\/\r\n    white-space: inherit;",
        "3":"Default is normal \r\n\r\n    white-space: none;\r\n    white-space: nowrap;\r\n    white-space: pre;\r\n    white-space: pre-wrap;      \/* CSS 2.1 *\/\r\n    white-space: pre-line;      \/* CSS 2.1 *\/\r\n    white-space: inherit;",
        "created":"1336308452",
        "4":"1336308452",
        "updated":"1336308452",
        "5":"1336308452",
        "category_id":"5",
        "6":"5",
        "user_id":"3",
        "7":"3",
        "private":"1",
        "8":"1",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"49",
        "0":"49",
        "title":"Mediator pattern",
        "1":"Mediator pattern",
        "description":"Mediator pattern",
        "2":"Mediator pattern",
        "content":"\/*\r\nThe mediator pattern defines an object that encapsulates how a set of objects interact. This pattern is considered to be a behavioral pattern due to the way it can alter the program's running behavior.\r\nUsually a program is made up of a (sometimes large) number of classes. So the logic and computation is distributed among these classes. However, as more classes are developed in a program, especially during maintenance and\/or refactoring, the problem of communication between these classes may become more complex. This makes the program harder to read and maintain. Furthermore, it can become difficult to change the program, since any change may affect code in several other classes.\r\nWith the mediator pattern, communication between objects is encapsulated with a mediator object. Objects no longer communicate directly with each other, but instead communicate through the mediator. This reduces the dependencies between communicating objects, thereby lowering the coupling.\r\n\r\n\r\nThe essence of the Mediator Pattern is to \"Define an object that encapsulates how a set of objects interact. Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it lets you vary their interaction independently. \"\r\n\r\n*\/\r\n\r\nimport java.awt.Font;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\n \r\nimport javax.swing.JButton;\r\nimport javax.swing.JFrame;\r\nimport javax.swing.JLabel;\r\nimport javax.swing.JPanel;\r\n \r\n\/\/Colleague interface\r\ninterface Command {\r\n    void execute();\r\n}\r\n \r\n\/\/Abstract Mediator\r\ninterface IMediator {\r\n    void book();\r\n    void view();\r\n    void search();\r\n    void registerView(BtnView v);\r\n    void registerSearch(BtnSearch s);\r\n    void registerBook(BtnBook b);\r\n    void registerDisplay(LblDisplay d);\r\n}\r\n \r\n\/\/Concrete mediator\r\nclass Mediator implements IMediator {\r\n \r\n    BtnView btnView;\r\n    BtnSearch btnSearch;\r\n    BtnBook btnBook;\r\n    LblDisplay show;\r\n \r\n    \/\/....\r\n    void registerView(BtnView v) {\r\n        btnView = v;\r\n    }\r\n \r\n    void registerSearch(BtnSearch s) {\r\n        btnSearch = s;\r\n    }\r\n \r\n    void registerBook(BtnBook b) {\r\n        btnBook = b;\r\n    }\r\n \r\n    void registerDisplay(LblDisplay d) {\r\n        show = d;\r\n    }\r\n \r\n    void book() {\r\n        btnBook.setEnabled(false);\r\n        btnView.setEnabled(true);\r\n        btnSearch.setEnabled(true);\r\n        show.setText(\"booking...\");\r\n    }\r\n \r\n    void view() {\r\n        btnView.setEnabled(false);\r\n        btnSearch.setEnabled(true);\r\n        btnBook.setEnabled(true);\r\n        show.setText(\"viewing...\");\r\n    }\r\n \r\n    void search() {\r\n        btnSearch.setEnabled(false);\r\n        btnView.setEnabled(true);\r\n        btnBook.setEnabled(true);\r\n        show.setText(\"searching...\");\r\n    }\r\n \r\n}\r\n \r\n\/\/A concrete colleague\r\nclass BtnView extends JButton implements Command {\r\n \r\n    IMediator med;\r\n \r\n    BtnView(ActionListener al, IMediator m) {\r\n        super(\"View\");\r\n        addActionListener(al);\r\n        med = m;\r\n        med.registerView(this);\r\n    }\r\n \r\n    public void execute() {\r\n        med.view();\r\n    }\r\n \r\n}\r\n \r\n\/\/A concrete colleague\r\nclass BtnSearch extends JButton implements Command {\r\n \r\n    IMediator med;\r\n \r\n    BtnSearch(ActionListener al, IMediator m) {\r\n        super(\"Search\");\r\n        addActionListener(al);\r\n        med = m;\r\n        med.registerSearch(this);\r\n    }\r\n \r\n    public void execute() {\r\n        med.search();\r\n    }\r\n \r\n}\r\n \r\n\/\/A concrete colleague\r\nclass BtnBook extends JButton implements Command {\r\n \r\n    IMediator med;\r\n \r\n    BtnBook(ActionListener al, IMediator m) {\r\n        super(\"Book\");\r\n        addActionListener(al);\r\n        med = m;\r\n        med.registerBook(this);\r\n    }\r\n \r\n    public void execute() {\r\n        med.book();\r\n    }\r\n \r\n}\r\n \r\nclass LblDisplay extends JLabel {\r\n \r\n    IMediator med;\r\n \r\n    LblDisplay(IMediator m) {\r\n        super(\"Just start...\");\r\n        med = m;\r\n        med.registerDisplay(this);\r\n        setFont(new Font(\"Arial\", Font.BOLD, 24));\r\n    }\r\n \r\n}\r\n \r\nclass MediatorDemo extends JFrame implements ActionListener {\r\n \r\n    IMediator med = new Mediator();\r\n \r\n    MediatorDemo() {\r\n        JPanel p = new JPanel();\r\n        p.add(new BtnView(this, med));\r\n        p.add(new BtnBook(this, med));\r\n        p.add(new BtnSearch(this, med));\r\n        getContentPane().add(new LblDisplay(med), \"North\");\r\n        getContentPane().add(p, \"South\");\r\n        setSize(400, 200);\r\n        setVisible(true);\r\n    }\r\n \r\n    public void actionPerformed(ActionEvent ae) {\r\n        Command comd = (Command) ae.getSource();\r\n        comd.execute();\r\n    }\r\n \r\n    public static void main(String[] args) {\r\n        new MediatorDemo();\r\n    }\r\n \r\n}\r\n\r\n\/*\r\nParticipants\r\n\r\nMediator - defines the interface for communication between Colleague objects\r\nConcreteMediator - implements the Mediator interface and coordinates communication between Colleague objects. It is aware of all the Colleagues and their purpose with regards to inter communication.\r\nConcreteColleague - communicates with other Colleagues through its Mediator\r\n*\/",
        "3":"\/*\r\nThe mediator pattern defines an object that encapsulates how a set of objects interact. This pattern is considered to be a behavioral pattern due to the way it can alter the program's running behavior.\r\nUsually a program is made up of a (sometimes large) number of classes. So the logic and computation is distributed among these classes. However, as more classes are developed in a program, especially during maintenance and\/or refactoring, the problem of communication between these classes may become more complex. This makes the program harder to read and maintain. Furthermore, it can become difficult to change the program, since any change may affect code in several other classes.\r\nWith the mediator pattern, communication between objects is encapsulated with a mediator object. Objects no longer communicate directly with each other, but instead communicate through the mediator. This reduces the dependencies between communicating objects, thereby lowering the coupling.\r\n\r\n\r\nThe essence of the Mediator Pattern is to \"Define an object that encapsulates how a set of objects interact. Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it lets you vary their interaction independently. \"\r\n\r\n*\/\r\n\r\nimport java.awt.Font;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\n \r\nimport javax.swing.JButton;\r\nimport javax.swing.JFrame;\r\nimport javax.swing.JLabel;\r\nimport javax.swing.JPanel;\r\n \r\n\/\/Colleague interface\r\ninterface Command {\r\n    void execute();\r\n}\r\n \r\n\/\/Abstract Mediator\r\ninterface IMediator {\r\n    void book();\r\n    void view();\r\n    void search();\r\n    void registerView(BtnView v);\r\n    void registerSearch(BtnSearch s);\r\n    void registerBook(BtnBook b);\r\n    void registerDisplay(LblDisplay d);\r\n}\r\n \r\n\/\/Concrete mediator\r\nclass Mediator implements IMediator {\r\n \r\n    BtnView btnView;\r\n    BtnSearch btnSearch;\r\n    BtnBook btnBook;\r\n    LblDisplay show;\r\n \r\n    \/\/....\r\n    void registerView(BtnView v) {\r\n        btnView = v;\r\n    }\r\n \r\n    void registerSearch(BtnSearch s) {\r\n        btnSearch = s;\r\n    }\r\n \r\n    void registerBook(BtnBook b) {\r\n        btnBook = b;\r\n    }\r\n \r\n    void registerDisplay(LblDisplay d) {\r\n        show = d;\r\n    }\r\n \r\n    void book() {\r\n        btnBook.setEnabled(false);\r\n        btnView.setEnabled(true);\r\n        btnSearch.setEnabled(true);\r\n        show.setText(\"booking...\");\r\n    }\r\n \r\n    void view() {\r\n        btnView.setEnabled(false);\r\n        btnSearch.setEnabled(true);\r\n        btnBook.setEnabled(true);\r\n        show.setText(\"viewing...\");\r\n    }\r\n \r\n    void search() {\r\n        btnSearch.setEnabled(false);\r\n        btnView.setEnabled(true);\r\n        btnBook.setEnabled(true);\r\n        show.setText(\"searching...\");\r\n    }\r\n \r\n}\r\n \r\n\/\/A concrete colleague\r\nclass BtnView extends JButton implements Command {\r\n \r\n    IMediator med;\r\n \r\n    BtnView(ActionListener al, IMediator m) {\r\n        super(\"View\");\r\n        addActionListener(al);\r\n        med = m;\r\n        med.registerView(this);\r\n    }\r\n \r\n    public void execute() {\r\n        med.view();\r\n    }\r\n \r\n}\r\n \r\n\/\/A concrete colleague\r\nclass BtnSearch extends JButton implements Command {\r\n \r\n    IMediator med;\r\n \r\n    BtnSearch(ActionListener al, IMediator m) {\r\n        super(\"Search\");\r\n        addActionListener(al);\r\n        med = m;\r\n        med.registerSearch(this);\r\n    }\r\n \r\n    public void execute() {\r\n        med.search();\r\n    }\r\n \r\n}\r\n \r\n\/\/A concrete colleague\r\nclass BtnBook extends JButton implements Command {\r\n \r\n    IMediator med;\r\n \r\n    BtnBook(ActionListener al, IMediator m) {\r\n        super(\"Book\");\r\n        addActionListener(al);\r\n        med = m;\r\n        med.registerBook(this);\r\n    }\r\n \r\n    public void execute() {\r\n        med.book();\r\n    }\r\n \r\n}\r\n \r\nclass LblDisplay extends JLabel {\r\n \r\n    IMediator med;\r\n \r\n    LblDisplay(IMediator m) {\r\n        super(\"Just start...\");\r\n        med = m;\r\n        med.registerDisplay(this);\r\n        setFont(new Font(\"Arial\", Font.BOLD, 24));\r\n    }\r\n \r\n}\r\n \r\nclass MediatorDemo extends JFrame implements ActionListener {\r\n \r\n    IMediator med = new Mediator();\r\n \r\n    MediatorDemo() {\r\n        JPanel p = new JPanel();\r\n        p.add(new BtnView(this, med));\r\n        p.add(new BtnBook(this, med));\r\n        p.add(new BtnSearch(this, med));\r\n        getContentPane().add(new LblDisplay(med), \"North\");\r\n        getContentPane().add(p, \"South\");\r\n        setSize(400, 200);\r\n        setVisible(true);\r\n    }\r\n \r\n    public void actionPerformed(ActionEvent ae) {\r\n        Command comd = (Command) ae.getSource();\r\n        comd.execute();\r\n    }\r\n \r\n    public static void main(String[] args) {\r\n        new MediatorDemo();\r\n    }\r\n \r\n}\r\n\r\n\/*\r\nParticipants\r\n\r\nMediator - defines the interface for communication between Colleague objects\r\nConcreteMediator - implements the Mediator interface and coordinates communication between Colleague objects. It is aware of all the Colleagues and their purpose with regards to inter communication.\r\nConcreteColleague - communicates with other Colleagues through its Mediator\r\n*\/",
        "created":"1336371358",
        "4":"1336371358",
        "updated":"1336371358",
        "5":"1336371358",
        "category_id":"10",
        "6":"10",
        "user_id":"3",
        "7":"3",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"50",
        "0":"50",
        "title":"Proxy pattern",
        "1":"Proxy pattern",
        "description":"Proxy pattern",
        "2":"Proxy pattern",
        "content":"\/*\r\nIn computer programming, the proxy pattern is a software design pattern.\r\nA proxy, in its most general form, is a class functioning as an interface to something else. The proxy could interface to anything: a network connection, a large object in memory, a file, or some other resource that is expensive or impossible to duplicate.\r\nA well-known example of the proxy pattern is a reference counting pointer object.\r\nIn situations where multiple copies of a complex object must exist, the proxy pattern can be adapted to incorporate the flyweight pattern in order to reduce the application's memory footprint. Typically, one instance of the complex object and multiple proxy objects are created, all of which contain a reference to the single original complex object. Any operations performed on the proxies are forwarded to the original object. Once all instances of the proxy are out of scope, the complex object's memory may be deallocated.\r\n*\/\r\n\r\n\/*\r\nThe following Java example illustrates the \"virtual proxy\" pattern.[clarification needed] The ProxyImage class is used to access a remote method.\r\n*\/\r\n\r\ninterface Image {\r\n    void displayImage();\r\n}\r\n \r\n\/\/ on System A \r\nclass RealImage implements Image {\r\n    private String filename;\r\n \r\n    public RealImage(String filename) { \r\n        this.filename = filename;\r\n        loadImageFromDisk();\r\n    }\r\n \r\n    private void loadImageFromDisk() {\r\n        System.out.println(\"Loading   \" + filename);\r\n    }\r\n \r\n    public void displayImage() { \r\n        System.out.println(\"Displaying \" + filename); \r\n    }\r\n \r\n}\r\n \r\n\/\/on System B \r\nclass ProxyImage implements Image {\r\n    private String filename;\r\n    private RealImage image;\r\n \r\n    public ProxyImage(String filename) { \r\n        this.filename = filename; \r\n    }\r\n \r\n    public void displayImage() {\r\n        if (image == null) {\r\n           image = new RealImage(filename);\r\n        } \r\n        image.displayImage();\r\n    }\r\n}\r\n \r\nclass ProxyExample  {\r\n    public static void main(String[] args) {\r\n        Image image1 = new ProxyImage(\"HiRes_10MB_Photo1\");\r\n        Image image2 = new ProxyImage(\"HiRes_10MB_Photo2\");     \r\n \r\n        image1.displayImage(); \/\/ loading necessary\r\n        image1.displayImage(); \/\/ loading unnecessary\r\n        image2.displayImage(); \/\/ loading necessary\r\n        image2.displayImage(); \/\/ loading unnecessary\r\n        image1.displayImage(); \/\/ loading unnecessary\r\n    }\r\n}\r\n\/*\r\nThe program's output is:\r\nLoading   HiRes_10MB_Photo1\r\nDisplaying HiRes_10MB_Photo1\r\nDisplaying HiRes_10MB_Photo1\r\nLoading   HiRes_10MB_Photo2\r\nDisplaying HiRes_10MB_Photo2\r\nDisplaying HiRes_10MB_Photo2\r\n*\/\r\nDisplaying HiRes_10MB_Photo1",
        "3":"\/*\r\nIn computer programming, the proxy pattern is a software design pattern.\r\nA proxy, in its most general form, is a class functioning as an interface to something else. The proxy could interface to anything: a network connection, a large object in memory, a file, or some other resource that is expensive or impossible to duplicate.\r\nA well-known example of the proxy pattern is a reference counting pointer object.\r\nIn situations where multiple copies of a complex object must exist, the proxy pattern can be adapted to incorporate the flyweight pattern in order to reduce the application's memory footprint. Typically, one instance of the complex object and multiple proxy objects are created, all of which contain a reference to the single original complex object. Any operations performed on the proxies are forwarded to the original object. Once all instances of the proxy are out of scope, the complex object's memory may be deallocated.\r\n*\/\r\n\r\n\/*\r\nThe following Java example illustrates the \"virtual proxy\" pattern.[clarification needed] The ProxyImage class is used to access a remote method.\r\n*\/\r\n\r\ninterface Image {\r\n    void displayImage();\r\n}\r\n \r\n\/\/ on System A \r\nclass RealImage implements Image {\r\n    private String filename;\r\n \r\n    public RealImage(String filename) { \r\n        this.filename = filename;\r\n        loadImageFromDisk();\r\n    }\r\n \r\n    private void loadImageFromDisk() {\r\n        System.out.println(\"Loading   \" + filename);\r\n    }\r\n \r\n    public void displayImage() { \r\n        System.out.println(\"Displaying \" + filename); \r\n    }\r\n \r\n}\r\n \r\n\/\/on System B \r\nclass ProxyImage implements Image {\r\n    private String filename;\r\n    private RealImage image;\r\n \r\n    public ProxyImage(String filename) { \r\n        this.filename = filename; \r\n    }\r\n \r\n    public void displayImage() {\r\n        if (image == null) {\r\n           image = new RealImage(filename);\r\n        } \r\n        image.displayImage();\r\n    }\r\n}\r\n \r\nclass ProxyExample  {\r\n    public static void main(String[] args) {\r\n        Image image1 = new ProxyImage(\"HiRes_10MB_Photo1\");\r\n        Image image2 = new ProxyImage(\"HiRes_10MB_Photo2\");     \r\n \r\n        image1.displayImage(); \/\/ loading necessary\r\n        image1.displayImage(); \/\/ loading unnecessary\r\n        image2.displayImage(); \/\/ loading necessary\r\n        image2.displayImage(); \/\/ loading unnecessary\r\n        image1.displayImage(); \/\/ loading unnecessary\r\n    }\r\n}\r\n\/*\r\nThe program's output is:\r\nLoading   HiRes_10MB_Photo1\r\nDisplaying HiRes_10MB_Photo1\r\nDisplaying HiRes_10MB_Photo1\r\nLoading   HiRes_10MB_Photo2\r\nDisplaying HiRes_10MB_Photo2\r\nDisplaying HiRes_10MB_Photo2\r\n*\/\r\nDisplaying HiRes_10MB_Photo1",
        "created":"1336371541",
        "4":"1336371541",
        "updated":"1336371541",
        "5":"1336371541",
        "category_id":"10",
        "6":"10",
        "user_id":"3",
        "7":"3",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"51",
        "0":"51",
        "title":"AMD with RequireJs ",
        "1":"AMD with RequireJs ",
        "description":"AMD with RequireJs ",
        "2":"AMD with RequireJs ",
        "content":"\/\/ source : https:\/\/gist.github.com\/907115\r\n\/\/*******************************************\r\n\/\/ Level 1, basic API, minimum support\r\n\/\/*******************************************\r\n\/*\r\nModules IDs are strings that follow CommonJS\r\nmodule names.\r\n*\/\r\n\r\n\/\/To load code at the top level JS file,\r\n\/\/or inside a module to dynamically fetch\r\n\/\/dependencies, use *require*.\r\n\/\/\r\n\/\/one and two's module exports are passed as\r\n\/\/function args to the callback.\r\nrequire(['one', 'two'], function (one, two) {\r\n\r\n});\r\n\r\n\/\/Define a module\r\ndefine(['one', 'two'], function (one, two) {\r\n\r\n    \/\/Return a value to define the module export\r\n    return function () {};\r\n});\r\n\r\n\/\/Allow named modules by allowing a string as the\r\n\/\/the first argument (support can be limited\r\n\/\/in Node by only allowing the ID\r\n\/\/to match the expected name by the Node loader)\r\ndefine('three', ['one', 'two'], function (one, two) {\r\n\r\n    \/\/require('string') can be used inside function\r\n    \/\/to get the module export of a module that has\r\n    \/\/already been fetched and evaluated.\r\n    var temp = require('one');\r\n\r\n    \/\/This next line would fail\r\n    var bad = require('four');\r\n\r\n    \/\/Return a value to define the module export\r\n    return function () {};\r\n});\r\n\r\n\/\/'require', 'exports' and 'module' are special dependency\r\n\/\/names that map roughly to the CommonJS values, except this\r\n\/\/require allows the dependency array\/callback style mentioned above\r\ndefine(['require', 'exports', 'module'], function (require, exports, module) {\r\n\r\n    \/\/exports is particularly (only?) useful for circular\r\n    \/\/dependency cases. If exports is asked for, but there is\r\n    \/\/a return value for this function, favor the return value\r\n    \/\/unless another module has been given this module's exported\r\n    \/\/value already.\r\n    exports.name = module.id;\r\n\r\n    \/\/module is important to get the module ID without\r\n    \/\/knowing the current module ID.\r\n});\r\n\r\n\/\/A simple object module with no dependencies\r\n\/\/(very useful for configuration objects):\r\ndefine({\r\n    color: 'blue',\r\n    size: 'large'\r\n});\r\n\r\n\/\/**********************************************************************\r\n\/\/ Level 2, sugar, particularly for converting existing CommonJS modules\r\n\/\/**********************************************************************\r\n\r\n\/\/For many dependencies, it may be desirable to list dependencies\r\n\/\/vertically. This form also helps translate old CommonJS modules\r\n\/\/to this wrapped format. It uses Function.prototype.toString() to find\r\n\/\/require('moduleName') references and loads them before executing\r\n\/\/the definition function.\r\ndefine(function (require) {\r\n    \/\/The function arg *must* be called require, and\r\n    \/\/dependencies *must* use that require name in order\r\n    \/\/for the parsing to work.\r\n    var one = require('one'),\r\n        two = require('two');\r\n\r\n    \/\/Return can still define a module.\r\n    return {\r\n        color: 'blue'\r\n    };\r\n});\r\n\r\n\/\/The above define call can be thought of being converted to\r\n\/\/this form after require calls are parsed out:\r\ndefine(['require', 'one', 'two'], function (require) {});\r\n\r\n\/\/For the full access to the CommonJS legacy variables, this form is also supported.\r\ndefine(function (require, exports, module) {\r\n    var one = require('one'),\r\n        two = require('two');\r\n\r\n    \/\/Return can still define a module.\r\n    exports.color = 'blue';\r\n});\r\n\r\n\/\/The above define call can be thought of being converted to\r\n\/\/this form after require calls are parsed out:\r\ndefine(['require', 'exports', 'module', 'one', 'two'], function (require, exports, module) {});\r\n\r\n\/*\r\nNOT ALL CommonJS modules can be converted to this syntax. An important\r\nbehavioral difference with this API: all dependencies are loaded *and*\r\nexecuted before the current module definition function is called. So\r\nin particular, CommonJS code that does these kinds of things will not\r\nwork the same, and may even generate an error. \r\n*\/\r\n\/\/BAD\r\nvar a;\r\nif (someCondition) {\r\n    a = require('a1');\r\n} else {\r\n    a = require('b1');\r\n}\r\n\r\n\/\/BAD: using a try catch to\r\n\/\/try to load a module that may or\r\n\/\/may not be available then doing something\r\n\/\/with it.\r\ntry {\r\n   var a = require('a');\r\n   \/\/more stuff here\r\n} catch (e) {\r\n    \/\/a may not exist\r\n}\r\n\r\n\/\/Any sort of logic used to choose a module to require needs \r\n\/\/to be handled by the callback-style require:\r\nrequire([computedModuleName], function (mod) {});\r\n\r\n\/\/Or by using loader plugins, level 3:\r\n\r\n\/\/***********************************************\r\n\/\/Level 3, Loader plugins\r\n\/\/***********************************************\r\n\/*\r\nLoader plugins allow conditional loading\/branching\r\nof loading, and also more complex loading.\r\nPlugins are just regular modules that implement a\r\nload() API. A plugin is indicated by separating\r\nthe plugin's module name from the resource name\r\nby a ! sign.\r\n*\/\r\n\r\n\/\/This example uses the 'text' plugin to load a resource\r\n\/\/called some\/template.html. So, text.js is loaded, then its\r\n\/\/load() method is called to load some\/template.html. The\r\n\/\/load() method is passed a callback function to indicate when\r\n\/\/the resource is loaded.\r\ndefine(['text!some\/template.html'], function (templateString) {\r\n});\r\n\r\n\/*\r\nUseful plugins:\r\n* env: changes a resource name to include the environment (node or browser)\r\n  in the resource name. I use this in RequireJS to allow running \r\n  the optimizer either in Node or Rhino:\r\n  https:\/\/github.com\/jrburke\/requirejs\/blob\/optimizer\/build\/jslib\/env.js\r\n  It can be seen as a replacement of the overlays feature in packages.\r\n* text: to load a text file, useful for templates.\r\n* i18n: can load a few modules to present one object\r\n  to the application which is a combination of country, language.\r\n\r\nThis plugin approach can be used instead of the require.extensions in Node.\r\nSo things like a coffeescript or binary extensions could\r\nbe supported via coffee! and node! plugins.\r\n\r\nPlugins also can implement some APIs to participate in a build optimizer, \r\nso they can inject their resources into a built file. This is very useful \r\nfor browsers, but could also benefit node, by allowing single file JS \r\nutilities instead of delivering a whole package. Complete plugin \r\nAPI is here:\r\nhttp:\/\/requirejs.org\/docs\/plugins.html\r\n*\/\r\n\r\n\/\/***********************************************\r\n\/\/Level 4, configuration and pathing and packages\r\n\/\/***********************************************\r\n\/*\r\nBrowsers should only use one path to look up a module. It is error \r\nprone and very bad for performance to look in more than one place. \r\nSo it is important to configure where the baseUrl for all modules \r\nare found, and to allow some path mappings for modules that may not\r\nbe inside that baseUrl.\r\n\r\nI use an object passed to require() in the top level script, but \r\nI am open to specifying a require.config() instead of overloading \r\nrequire() so much:\r\n*\/\r\n\r\nrequire({\r\n    baseUrl: 'scripts',\r\n    \/\/Optional path adjustments for\r\n    \/\/modules that are not in the baseUrl directory.\r\n    paths: {\r\n        'some\/module': '..\/external\/some\/module'\r\n    }\r\n});\r\n\r\n\/*\r\n1) CommonJS packages with a 'lib' and 'main' config give too many\r\noptions for configuration, and in a browser configuration those \r\nconfig values need to be passed down to the client. This is \r\nawkward and ugly. I do support it in RequireJS via package config:\r\nhttp:\/\/requirejs.org\/docs\/api.html#packages\r\n\r\nHowever, I much rather prefer a stronger convention and \r\nto remove the 'main' and 'lib' features of CommonJS packages. \r\nIn this way, a package manager does not have to parse the \r\npackage.json and insert configuration in the application. \r\nIt is much cleaner and easier to follow.\r\n\r\nSo I prefer to move to an approach where getting a module from a\r\npackage uses its explicit module name. So instead of doing\r\nrequire('packageName'), use\r\nrequire('packageName\/index') or require('packageName\/main')\r\ninstead. This means there is no configuration besides a baseUrl\r\nis needed, and it is clearer all around what is going on.\r\n\r\n2) I have found with other systems like Java and Python that having a \r\nclasspath or a set of commonly used packages that are used across all \r\napplications to be a source of pain than an actual help. Version \r\nconflicts being the main issue, and tracking down the magic directories \r\nused by an execution environment being another.\r\n\r\nBy requiring each app to have its own packages relative to its own \r\nbaseUrl, it makes the application much more understandable and robust. \r\nSince there is only one lookup path per module it is even clearer. \r\n\r\nSo that is the other change I advocate: no more require.paths, \r\nno magic place to install modules. Having some basic modules\r\ndelivered as part of Node still may make sense though.\r\n\r\nThis also matches how web browser applications work today -- all\r\nthe scripts need to be visible relative to the HTML page on URLs\r\nthat are easy to discover.\r\n*\/",
        "3":"\/\/ source : https:\/\/gist.github.com\/907115\r\n\/\/*******************************************\r\n\/\/ Level 1, basic API, minimum support\r\n\/\/*******************************************\r\n\/*\r\nModules IDs are strings that follow CommonJS\r\nmodule names.\r\n*\/\r\n\r\n\/\/To load code at the top level JS file,\r\n\/\/or inside a module to dynamically fetch\r\n\/\/dependencies, use *require*.\r\n\/\/\r\n\/\/one and two's module exports are passed as\r\n\/\/function args to the callback.\r\nrequire(['one', 'two'], function (one, two) {\r\n\r\n});\r\n\r\n\/\/Define a module\r\ndefine(['one', 'two'], function (one, two) {\r\n\r\n    \/\/Return a value to define the module export\r\n    return function () {};\r\n});\r\n\r\n\/\/Allow named modules by allowing a string as the\r\n\/\/the first argument (support can be limited\r\n\/\/in Node by only allowing the ID\r\n\/\/to match the expected name by the Node loader)\r\ndefine('three', ['one', 'two'], function (one, two) {\r\n\r\n    \/\/require('string') can be used inside function\r\n    \/\/to get the module export of a module that has\r\n    \/\/already been fetched and evaluated.\r\n    var temp = require('one');\r\n\r\n    \/\/This next line would fail\r\n    var bad = require('four');\r\n\r\n    \/\/Return a value to define the module export\r\n    return function () {};\r\n});\r\n\r\n\/\/'require', 'exports' and 'module' are special dependency\r\n\/\/names that map roughly to the CommonJS values, except this\r\n\/\/require allows the dependency array\/callback style mentioned above\r\ndefine(['require', 'exports', 'module'], function (require, exports, module) {\r\n\r\n    \/\/exports is particularly (only?) useful for circular\r\n    \/\/dependency cases. If exports is asked for, but there is\r\n    \/\/a return value for this function, favor the return value\r\n    \/\/unless another module has been given this module's exported\r\n    \/\/value already.\r\n    exports.name = module.id;\r\n\r\n    \/\/module is important to get the module ID without\r\n    \/\/knowing the current module ID.\r\n});\r\n\r\n\/\/A simple object module with no dependencies\r\n\/\/(very useful for configuration objects):\r\ndefine({\r\n    color: 'blue',\r\n    size: 'large'\r\n});\r\n\r\n\/\/**********************************************************************\r\n\/\/ Level 2, sugar, particularly for converting existing CommonJS modules\r\n\/\/**********************************************************************\r\n\r\n\/\/For many dependencies, it may be desirable to list dependencies\r\n\/\/vertically. This form also helps translate old CommonJS modules\r\n\/\/to this wrapped format. It uses Function.prototype.toString() to find\r\n\/\/require('moduleName') references and loads them before executing\r\n\/\/the definition function.\r\ndefine(function (require) {\r\n    \/\/The function arg *must* be called require, and\r\n    \/\/dependencies *must* use that require name in order\r\n    \/\/for the parsing to work.\r\n    var one = require('one'),\r\n        two = require('two');\r\n\r\n    \/\/Return can still define a module.\r\n    return {\r\n        color: 'blue'\r\n    };\r\n});\r\n\r\n\/\/The above define call can be thought of being converted to\r\n\/\/this form after require calls are parsed out:\r\ndefine(['require', 'one', 'two'], function (require) {});\r\n\r\n\/\/For the full access to the CommonJS legacy variables, this form is also supported.\r\ndefine(function (require, exports, module) {\r\n    var one = require('one'),\r\n        two = require('two');\r\n\r\n    \/\/Return can still define a module.\r\n    exports.color = 'blue';\r\n});\r\n\r\n\/\/The above define call can be thought of being converted to\r\n\/\/this form after require calls are parsed out:\r\ndefine(['require', 'exports', 'module', 'one', 'two'], function (require, exports, module) {});\r\n\r\n\/*\r\nNOT ALL CommonJS modules can be converted to this syntax. An important\r\nbehavioral difference with this API: all dependencies are loaded *and*\r\nexecuted before the current module definition function is called. So\r\nin particular, CommonJS code that does these kinds of things will not\r\nwork the same, and may even generate an error. \r\n*\/\r\n\/\/BAD\r\nvar a;\r\nif (someCondition) {\r\n    a = require('a1');\r\n} else {\r\n    a = require('b1');\r\n}\r\n\r\n\/\/BAD: using a try catch to\r\n\/\/try to load a module that may or\r\n\/\/may not be available then doing something\r\n\/\/with it.\r\ntry {\r\n   var a = require('a');\r\n   \/\/more stuff here\r\n} catch (e) {\r\n    \/\/a may not exist\r\n}\r\n\r\n\/\/Any sort of logic used to choose a module to require needs \r\n\/\/to be handled by the callback-style require:\r\nrequire([computedModuleName], function (mod) {});\r\n\r\n\/\/Or by using loader plugins, level 3:\r\n\r\n\/\/***********************************************\r\n\/\/Level 3, Loader plugins\r\n\/\/***********************************************\r\n\/*\r\nLoader plugins allow conditional loading\/branching\r\nof loading, and also more complex loading.\r\nPlugins are just regular modules that implement a\r\nload() API. A plugin is indicated by separating\r\nthe plugin's module name from the resource name\r\nby a ! sign.\r\n*\/\r\n\r\n\/\/This example uses the 'text' plugin to load a resource\r\n\/\/called some\/template.html. So, text.js is loaded, then its\r\n\/\/load() method is called to load some\/template.html. The\r\n\/\/load() method is passed a callback function to indicate when\r\n\/\/the resource is loaded.\r\ndefine(['text!some\/template.html'], function (templateString) {\r\n});\r\n\r\n\/*\r\nUseful plugins:\r\n* env: changes a resource name to include the environment (node or browser)\r\n  in the resource name. I use this in RequireJS to allow running \r\n  the optimizer either in Node or Rhino:\r\n  https:\/\/github.com\/jrburke\/requirejs\/blob\/optimizer\/build\/jslib\/env.js\r\n  It can be seen as a replacement of the overlays feature in packages.\r\n* text: to load a text file, useful for templates.\r\n* i18n: can load a few modules to present one object\r\n  to the application which is a combination of country, language.\r\n\r\nThis plugin approach can be used instead of the require.extensions in Node.\r\nSo things like a coffeescript or binary extensions could\r\nbe supported via coffee! and node! plugins.\r\n\r\nPlugins also can implement some APIs to participate in a build optimizer, \r\nso they can inject their resources into a built file. This is very useful \r\nfor browsers, but could also benefit node, by allowing single file JS \r\nutilities instead of delivering a whole package. Complete plugin \r\nAPI is here:\r\nhttp:\/\/requirejs.org\/docs\/plugins.html\r\n*\/\r\n\r\n\/\/***********************************************\r\n\/\/Level 4, configuration and pathing and packages\r\n\/\/***********************************************\r\n\/*\r\nBrowsers should only use one path to look up a module. It is error \r\nprone and very bad for performance to look in more than one place. \r\nSo it is important to configure where the baseUrl for all modules \r\nare found, and to allow some path mappings for modules that may not\r\nbe inside that baseUrl.\r\n\r\nI use an object passed to require() in the top level script, but \r\nI am open to specifying a require.config() instead of overloading \r\nrequire() so much:\r\n*\/\r\n\r\nrequire({\r\n    baseUrl: 'scripts',\r\n    \/\/Optional path adjustments for\r\n    \/\/modules that are not in the baseUrl directory.\r\n    paths: {\r\n        'some\/module': '..\/external\/some\/module'\r\n    }\r\n});\r\n\r\n\/*\r\n1) CommonJS packages with a 'lib' and 'main' config give too many\r\noptions for configuration, and in a browser configuration those \r\nconfig values need to be passed down to the client. This is \r\nawkward and ugly. I do support it in RequireJS via package config:\r\nhttp:\/\/requirejs.org\/docs\/api.html#packages\r\n\r\nHowever, I much rather prefer a stronger convention and \r\nto remove the 'main' and 'lib' features of CommonJS packages. \r\nIn this way, a package manager does not have to parse the \r\npackage.json and insert configuration in the application. \r\nIt is much cleaner and easier to follow.\r\n\r\nSo I prefer to move to an approach where getting a module from a\r\npackage uses its explicit module name. So instead of doing\r\nrequire('packageName'), use\r\nrequire('packageName\/index') or require('packageName\/main')\r\ninstead. This means there is no configuration besides a baseUrl\r\nis needed, and it is clearer all around what is going on.\r\n\r\n2) I have found with other systems like Java and Python that having a \r\nclasspath or a set of commonly used packages that are used across all \r\napplications to be a source of pain than an actual help. Version \r\nconflicts being the main issue, and tracking down the magic directories \r\nused by an execution environment being another.\r\n\r\nBy requiring each app to have its own packages relative to its own \r\nbaseUrl, it makes the application much more understandable and robust. \r\nSince there is only one lookup path per module it is even clearer. \r\n\r\nSo that is the other change I advocate: no more require.paths, \r\nno magic place to install modules. Having some basic modules\r\ndelivered as part of Node still may make sense though.\r\n\r\nThis also matches how web browser applications work today -- all\r\nthe scripts need to be visible relative to the HTML page on URLs\r\nthat are easy to discover.\r\n*\/",
        "created":"1336528177",
        "4":"1336528177",
        "updated":"1336528177",
        "5":"1336528177",
        "category_id":"2",
        "6":"2",
        "user_id":"3",
        "7":"3",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"52",
        "0":"52",
        "title":"CommonJS wrapper for RequireJS",
        "1":"CommonJS wrapper for RequireJS",
        "description":"CommonJS wrapper for RequireJS",
        "2":"CommonJS wrapper for RequireJS",
        "content":"\/*\r\nA \"simplified CommonJS wrapper\" form is also supported by many of the AMD loaders, if people want something close to the CommonJS format, and is more lightweight than your third example:\r\n*\/\r\n\r\ndefine(function (require) {\r\n    var myLib = require('path\/to\/myLib');\r\n    return moduleValue;\r\n});\r\nIf you want to use CommonJS exports and module:\r\n\r\ndefine(function (require, exports, module) {\r\n    var myLib = require('path\/to\/myLib');\r\n    exports.foo = 'foo';\r\n});\r\n\/*\r\nIn these forms, the AMD loader will toString the function and scan for the require calls, load and execute those dependencies then call this function. More info here: http:\/\/requirejs.org\/docs\/commonjs.html\r\n*\/",
        "3":"\/*\r\nA \"simplified CommonJS wrapper\" form is also supported by many of the AMD loaders, if people want something close to the CommonJS format, and is more lightweight than your third example:\r\n*\/\r\n\r\ndefine(function (require) {\r\n    var myLib = require('path\/to\/myLib');\r\n    return moduleValue;\r\n});\r\nIf you want to use CommonJS exports and module:\r\n\r\ndefine(function (require, exports, module) {\r\n    var myLib = require('path\/to\/myLib');\r\n    exports.foo = 'foo';\r\n});\r\n\/*\r\nIn these forms, the AMD loader will toString the function and scan for the require calls, load and execute those dependencies then call this function. More info here: http:\/\/requirejs.org\/docs\/commonjs.html\r\n*\/",
        "created":"1336542733",
        "4":"1336542733",
        "updated":"1336542733",
        "5":"1336542733",
        "category_id":"2",
        "6":"2",
        "user_id":"3",
        "7":"3",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"53",
        "0":"53",
        "title":"CurlJS - exemple",
        "1":"CurlJS - exemple",
        "description":"CurlJs - simple exemple",
        "2":"CurlJs - simple exemple",
        "content":"<script>\r\n\r\n    \/\/ configure curl\r\n    curl = {\r\n        paths: {\r\n            cssx: 'cssx\/src\/cssx\/',\r\n            stuff: 'my\/stuff\/'\r\n        }\r\n    };\r\n\r\n<\/script>\r\n<script src=\"..\/js\/curl.js\" type=\"text\/javascript\"><\/script>\r\n<script type=\"text\/javascript\">\r\n\r\n    curl(\r\n        \/\/ fetch all of these resources (\"dependencies\")\r\n        [\r\n            'stuff\/three', \/\/ an AMD module\r\n            'cssx\/css!stuff\/base', \/\/ a css file\r\n            'i18n!stuff\/nls\/strings', \/\/ a translation file\r\n            'text!stuff\/template.html', \/\/ an html template\r\n            'domReady!'\r\n        ]\r\n    )\r\n    \/\/ when they are loaded\r\n    .then(\r\n        \/\/ execute this callback, passing all dependencies as params\r\n        function (three, link, strings, template) {\r\n            var body = document.body;\r\n            if (body) {\r\n                body.appendChild(document.createTextNode('three == ' + three.toString() + ' '));\r\n                body.appendChild(document.createElement('br'));\r\n                body.appendChild(document.createTextNode(strings.hello));\r\n                body.appendChild(document.createElement('div')).innerHTML = template;\r\n            }\r\n        },\r\n        \/\/ execute this callback if there was a problem\r\n        function (ex) {\r\n            var msg = 'OH SNAP: ' + ex.message;\r\n            alert(msg);\r\n        }\r\n    );\r\n\r\n<\/script>",
        "3":"<script>\r\n\r\n    \/\/ configure curl\r\n    curl = {\r\n        paths: {\r\n            cssx: 'cssx\/src\/cssx\/',\r\n            stuff: 'my\/stuff\/'\r\n        }\r\n    };\r\n\r\n<\/script>\r\n<script src=\"..\/js\/curl.js\" type=\"text\/javascript\"><\/script>\r\n<script type=\"text\/javascript\">\r\n\r\n    curl(\r\n        \/\/ fetch all of these resources (\"dependencies\")\r\n        [\r\n            'stuff\/three', \/\/ an AMD module\r\n            'cssx\/css!stuff\/base', \/\/ a css file\r\n            'i18n!stuff\/nls\/strings', \/\/ a translation file\r\n            'text!stuff\/template.html', \/\/ an html template\r\n            'domReady!'\r\n        ]\r\n    )\r\n    \/\/ when they are loaded\r\n    .then(\r\n        \/\/ execute this callback, passing all dependencies as params\r\n        function (three, link, strings, template) {\r\n            var body = document.body;\r\n            if (body) {\r\n                body.appendChild(document.createTextNode('three == ' + three.toString() + ' '));\r\n                body.appendChild(document.createElement('br'));\r\n                body.appendChild(document.createTextNode(strings.hello));\r\n                body.appendChild(document.createElement('div')).innerHTML = template;\r\n            }\r\n        },\r\n        \/\/ execute this callback if there was a problem\r\n        function (ex) {\r\n            var msg = 'OH SNAP: ' + ex.message;\r\n            alert(msg);\r\n        }\r\n    );\r\n\r\n<\/script>",
        "created":"1336584351",
        "4":"1336584351",
        "updated":"1336584351",
        "5":"1336584351",
        "category_id":"2",
        "6":"2",
        "user_id":"3",
        "7":"3",
        "private":"1",
        "8":"1",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"54",
        "0":"54",
        "title":"JavaScript Design Patterns: Mediator",
        "1":"JavaScript Design Patterns: Mediator",
        "description":"JavaScript Design Patterns: Mediator",
        "2":"JavaScript Design Patterns: Mediator",
        "content":"\/\/ source : http:\/\/arguments.callee.info\/2009\/05\/18\/javascript-design-patterns--mediator\/\r\n\r\n Mediator = function() {\r\n        \r\n        var debug = function() {\r\n            \/\/ console.log or air.trace as desired\r\n        };\r\n        \r\n        var components = {};\r\n        \r\n        var broadcast = function(event, args, source) {\r\n            var e = event || false;\r\n            var a = args || [];\r\n            if (!e) {\r\n                return;\r\n            }\r\n            \/\/debug([\"Mediator received\", e, a].join(' '));\r\n            for (var c in components) {\r\n                if (typeof components[c][\"on\" + e] == \"function\") {\r\n                    try {\r\n                        \/\/debug(\"Mediator calling \" + e + \" on \" + c);\r\n                        var s = source || components[c];\r\n                        components[c][\"on\" + e].apply(s, a);\r\n                    } catch (err) {\r\n                        debug([\"Mediator error.\", e, a, s, err].join(' '));\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        \r\n        var addComponent = function(name, component, replaceDuplicate) {\r\n            if (name in components) {\r\n                if (replaceDuplicate) {\r\n                    removeComponent(name);\r\n                } else {\r\n                    throw new Error('Mediator name conflict: ' + name);\r\n                }\r\n            }\r\n            components[name] = component;\r\n        };\r\n        \r\n        var removeComponent = function(name) {\r\n            if (name in components) {\r\n                delete components[name];\r\n            }\r\n        };\r\n        \r\n        var getComponent = function(name) {\r\n            return components[name] || false;\r\n        };\r\n        \r\n        var contains = function(name) {\r\n            return (name in components);\r\n        };\r\n        \r\n        return {\r\n            name      : \"Mediator\",\r\n            broadcast : broadcast,\r\n            add       : addComponent,\r\n            rem       : removeComponent,\r\n            get       : getComponent,\r\n            has       : contains\r\n        };\r\n    }();\r\n\r\n\r\n\/\/\/ use :\r\n\r\n   Mediator.add('TestObject', function() {\r\n        \r\n        var someNumber = 0; \/\/ sample variable\r\n        var someString = 'another sample variable';\r\n        \r\n        return {\r\n            onInitialize: function() {\r\n                \/\/ this.name is automatically assigned by the Mediator\r\n                alert(this.name + \" initialized.\");\r\n            },\r\n            onFakeEvent: function() {\r\n                someNumber++;\r\n                alert(\"Handled \" + someNumber + \" times!\");\r\n            },\r\n            onSetString: function(str) {\r\n                someString = str;\r\n                alert('Assigned ' + someString);\r\n            }\r\n        }\r\n    }());\r\n    Mediator.broadcast(\"Initialize\");                 \/\/ alerts \"TestObject initialized\"\r\n    Mediator.broadcast('FakeEvent');                  \/\/ alerts \"Handled 1 times!\" (I know, bad grammar)\r\n    Mediator.broadcast('SetString', ['test string']); \/\/ alerts \"Assigned test string\"\r\n    Mediator.broadcast('FakeEvent');                  \/\/ alerts \"Handled 2 times!\"\r\n    Mediator.broadcast('SessionStart');               \/\/ this call is safely ignored\r\n    Mediator.broadcast('Translate', ['this is also safely ignored']);",
        "3":"\/\/ source : http:\/\/arguments.callee.info\/2009\/05\/18\/javascript-design-patterns--mediator\/\r\n\r\n Mediator = function() {\r\n        \r\n        var debug = function() {\r\n            \/\/ console.log or air.trace as desired\r\n        };\r\n        \r\n        var components = {};\r\n        \r\n        var broadcast = function(event, args, source) {\r\n            var e = event || false;\r\n            var a = args || [];\r\n            if (!e) {\r\n                return;\r\n            }\r\n            \/\/debug([\"Mediator received\", e, a].join(' '));\r\n            for (var c in components) {\r\n                if (typeof components[c][\"on\" + e] == \"function\") {\r\n                    try {\r\n                        \/\/debug(\"Mediator calling \" + e + \" on \" + c);\r\n                        var s = source || components[c];\r\n                        components[c][\"on\" + e].apply(s, a);\r\n                    } catch (err) {\r\n                        debug([\"Mediator error.\", e, a, s, err].join(' '));\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        \r\n        var addComponent = function(name, component, replaceDuplicate) {\r\n            if (name in components) {\r\n                if (replaceDuplicate) {\r\n                    removeComponent(name);\r\n                } else {\r\n                    throw new Error('Mediator name conflict: ' + name);\r\n                }\r\n            }\r\n            components[name] = component;\r\n        };\r\n        \r\n        var removeComponent = function(name) {\r\n            if (name in components) {\r\n                delete components[name];\r\n            }\r\n        };\r\n        \r\n        var getComponent = function(name) {\r\n            return components[name] || false;\r\n        };\r\n        \r\n        var contains = function(name) {\r\n            return (name in components);\r\n        };\r\n        \r\n        return {\r\n            name      : \"Mediator\",\r\n            broadcast : broadcast,\r\n            add       : addComponent,\r\n            rem       : removeComponent,\r\n            get       : getComponent,\r\n            has       : contains\r\n        };\r\n    }();\r\n\r\n\r\n\/\/\/ use :\r\n\r\n   Mediator.add('TestObject', function() {\r\n        \r\n        var someNumber = 0; \/\/ sample variable\r\n        var someString = 'another sample variable';\r\n        \r\n        return {\r\n            onInitialize: function() {\r\n                \/\/ this.name is automatically assigned by the Mediator\r\n                alert(this.name + \" initialized.\");\r\n            },\r\n            onFakeEvent: function() {\r\n                someNumber++;\r\n                alert(\"Handled \" + someNumber + \" times!\");\r\n            },\r\n            onSetString: function(str) {\r\n                someString = str;\r\n                alert('Assigned ' + someString);\r\n            }\r\n        }\r\n    }());\r\n    Mediator.broadcast(\"Initialize\");                 \/\/ alerts \"TestObject initialized\"\r\n    Mediator.broadcast('FakeEvent');                  \/\/ alerts \"Handled 1 times!\" (I know, bad grammar)\r\n    Mediator.broadcast('SetString', ['test string']); \/\/ alerts \"Assigned test string\"\r\n    Mediator.broadcast('FakeEvent');                  \/\/ alerts \"Handled 2 times!\"\r\n    Mediator.broadcast('SessionStart');               \/\/ this call is safely ignored\r\n    Mediator.broadcast('Translate', ['this is also safely ignored']);",
        "created":"1336620936",
        "4":"1336620936",
        "updated":"1336620936",
        "5":"1336620936",
        "category_id":"2",
        "6":"2",
        "user_id":"3",
        "7":"3",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"55",
        "0":"55",
        "title":"_VIMRC file example",
        "1":"_VIMRC file example",
        "description":"_VIMRC file example",
        "2":"_VIMRC file example",
        "content":"\"\"\"\"\"\"\"\"\"\"\"\r\n\"BEGIN MES SETTINGS\r\n\"\"\"\"\"\"\"\"\"\"\"\r\nset ff=unix\r\nset number\r\nsyntax on\r\nset mouse=a\r\n\"colo darkblue\r\ncolo desert\r\nset noswapfile\r\n\"set guifont=Lucida_Console:h9\r\nset guifont=Consolas:h10\r\n\r\nset backspace=indent,eol,start\r\nfiletype plugin on\r\nfiletype on\r\nset nowrap\r\n\"utilise tab pour l'auto completion\r\n\"inoremap <tab> <c-x><c-o>\r\n\"USE CTRL SPACE FOR INDENT \/ UTILISER CTRL SPACE pour indentation\r\ninoremap <c-space> <c-x><c-o>\r\n\"filetype indentation\r\n\r\nset smartindent\r\nset autoindent\r\nset expandtab\r\nset softtabstop=2\r\nset shiftwidth=2\r\nfiletype indent on\r\n\"raccourci zen coding\r\nlet g:user_zen_expandabbr_key = '<c-e>'\r\n\"\"\"d'autres options pour l'auto completion\r\nset wildmode=list,full\r\nset wildmenu\r\n\"\"\"auto close quotes\r\ninoremap \" \"\"<left>\r\ninoremap \"<space> \"\r\ninoremap \"\" \"\"\r\ninoremap '<space> '\r\ninoremap ' ''<left>\r\ninoremap '' ''\r\n\"\"\"AUTO CLOSE BRACKETS\r\ninoremap {      {}<Left>\r\ninoremap {<CR>  {<CR>}<Esc>O\r\ninoremap {{     {\r\ninoremap {<space> {\r\ninoremap {}     {}\r\n\"AUTO CLOSE PARANTHESIS\r\ninoremap (      ()<Left>\r\ninoremap (<space> (\r\ninoremap (<CR>  (<CR>)<Esc>O\r\ninoremap ((     (\r\ninoremap ()     ()\r\n\"\"\"AUTO CLOSE ARRAY PARANTHESIS\r\ninoremap [      []<Left>\r\ninoremap [<CR>  [<CR>]<Esc>O\r\ninoremap [[     [\r\ninoremap [<space> [\r\ninoremap []     []\r\n\"save shortcut\"\r\ninoremap <c-s> <esc>:w<cr>i\r\nmap <c-s> <esc>:w<cr>i\r\nmap <f5> <esc>:NERDTreeToggle<cr>\r\ninoremap <f5> <esc>:NERDTreeToggle<cr>\r\n\r\n\"INDENT GUIDES\r\nIndentGuidesEnable\r\n\r\n\"TlistToggle\r\ninoremap <f8> <esc>:TlistToggle<cr>\r\nmap <f8> <esc>:TlistToggle<cr>\r\n\r\nif executable('coffeetags')\r\n  let g:tagbar_type_coffee = {\r\n        \\ 'ctagsbin' : 'coffeetags',\r\n        \\ 'ctagsargs' : '-f coffeetags',\r\n        \\ 'kinds' : [\r\n        \\ 'f:functions',\r\n        \\ 'o:object',\r\n        \\ ],\r\n        \\ 'sro' : \".\",\r\n        \\ 'kind2scope' : {\r\n        \\ 'f' : 'object',\r\n        \\ 'o' : 'object',\r\n        \\ }\r\n        \\ }\r\nendif\r\n\r\nset fdm=indent\r\nset foldcolumn=4",
        "3":"\"\"\"\"\"\"\"\"\"\"\"\r\n\"BEGIN MES SETTINGS\r\n\"\"\"\"\"\"\"\"\"\"\"\r\nset ff=unix\r\nset number\r\nsyntax on\r\nset mouse=a\r\n\"colo darkblue\r\ncolo desert\r\nset noswapfile\r\n\"set guifont=Lucida_Console:h9\r\nset guifont=Consolas:h10\r\n\r\nset backspace=indent,eol,start\r\nfiletype plugin on\r\nfiletype on\r\nset nowrap\r\n\"utilise tab pour l'auto completion\r\n\"inoremap <tab> <c-x><c-o>\r\n\"USE CTRL SPACE FOR INDENT \/ UTILISER CTRL SPACE pour indentation\r\ninoremap <c-space> <c-x><c-o>\r\n\"filetype indentation\r\n\r\nset smartindent\r\nset autoindent\r\nset expandtab\r\nset softtabstop=2\r\nset shiftwidth=2\r\nfiletype indent on\r\n\"raccourci zen coding\r\nlet g:user_zen_expandabbr_key = '<c-e>'\r\n\"\"\"d'autres options pour l'auto completion\r\nset wildmode=list,full\r\nset wildmenu\r\n\"\"\"auto close quotes\r\ninoremap \" \"\"<left>\r\ninoremap \"<space> \"\r\ninoremap \"\" \"\"\r\ninoremap '<space> '\r\ninoremap ' ''<left>\r\ninoremap '' ''\r\n\"\"\"AUTO CLOSE BRACKETS\r\ninoremap {      {}<Left>\r\ninoremap {<CR>  {<CR>}<Esc>O\r\ninoremap {{     {\r\ninoremap {<space> {\r\ninoremap {}     {}\r\n\"AUTO CLOSE PARANTHESIS\r\ninoremap (      ()<Left>\r\ninoremap (<space> (\r\ninoremap (<CR>  (<CR>)<Esc>O\r\ninoremap ((     (\r\ninoremap ()     ()\r\n\"\"\"AUTO CLOSE ARRAY PARANTHESIS\r\ninoremap [      []<Left>\r\ninoremap [<CR>  [<CR>]<Esc>O\r\ninoremap [[     [\r\ninoremap [<space> [\r\ninoremap []     []\r\n\"save shortcut\"\r\ninoremap <c-s> <esc>:w<cr>i\r\nmap <c-s> <esc>:w<cr>i\r\nmap <f5> <esc>:NERDTreeToggle<cr>\r\ninoremap <f5> <esc>:NERDTreeToggle<cr>\r\n\r\n\"INDENT GUIDES\r\nIndentGuidesEnable\r\n\r\n\"TlistToggle\r\ninoremap <f8> <esc>:TlistToggle<cr>\r\nmap <f8> <esc>:TlistToggle<cr>\r\n\r\nif executable('coffeetags')\r\n  let g:tagbar_type_coffee = {\r\n        \\ 'ctagsbin' : 'coffeetags',\r\n        \\ 'ctagsargs' : '-f coffeetags',\r\n        \\ 'kinds' : [\r\n        \\ 'f:functions',\r\n        \\ 'o:object',\r\n        \\ ],\r\n        \\ 'sro' : \".\",\r\n        \\ 'kind2scope' : {\r\n        \\ 'f' : 'object',\r\n        \\ 'o' : 'object',\r\n        \\ }\r\n        \\ }\r\nendif\r\n\r\nset fdm=indent\r\nset foldcolumn=4",
        "created":"1336634930",
        "4":"1336634930",
        "updated":"1336634930",
        "5":"1336634930",
        "category_id":"11",
        "6":"11",
        "user_id":"3",
        "7":"3",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"56",
        "0":"56",
        "title":"GIT - Rename a branch",
        "1":"GIT - Rename a branch",
        "description":"GIT - Rename a branch",
        "2":"GIT - Rename a branch",
        "content":"git branch -m old_branch new_branch",
        "3":"git branch -m old_branch new_branch",
        "created":"1336665430",
        "4":"1336665430",
        "updated":"1336665430",
        "5":"1336665430",
        "category_id":"11",
        "6":"11",
        "user_id":"3",
        "7":"3",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"57",
        "0":"57",
        "title":"Parse an XML Document",
        "1":"Parse an XML Document",
        "description":"Parse an XML Document",
        "2":"Parse an XML Document",
        "content":"\/*\r\nsource : http:\/\/www.w3schools.com\/xml\/xml_parser.asp\r\nParse an XML Document\r\nThe following code fragment parses an XML document into an XML DOM object:\r\n*\/\r\n\r\nif (window.XMLHttpRequest)\r\n  {\/\/ code for IE7+, Firefox, Chrome, Opera, Safari\r\n  xmlhttp=new XMLHttpRequest();\r\n  }\r\nelse\r\n  {\/\/ code for IE6, IE5\r\n  xmlhttp=new ActiveXObject(\"Microsoft.XMLHTTP\");\r\n  }\r\nxmlhttp.open(\"GET\",\"books.xml\",false);\r\nxmlhttp.send();\r\nxmlDoc=xmlhttp.responseXML;\r\n\/*\r\nParse an XML String\r\n\r\nThe following code fragment parses an XML string into an XML DOM object:\r\n*\/\r\ntxt=\"<bookstore><book>\";\r\ntxt=txt+\"<title>Everyday Italian<\/title>\";\r\ntxt=txt+\"<author>Giada De Laurentiis<\/author>\";\r\ntxt=txt+\"<year>2005<\/year>\";\r\ntxt=txt+\"<\/book><\/bookstore>\";\r\n\r\nif (window.DOMParser)\r\n  {\r\n  parser=new DOMParser();\r\n  xmlDoc=parser.parseFromString(txt,\"text\/xml\");\r\n  }\r\nelse \/\/ Internet Explorer\r\n  {\r\n  xmlDoc=new ActiveXObject(\"Microsoft.XMLDOM\");\r\n  xmlDoc.async=false;\r\n  xmlDoc.loadXML(txt); \r\n  }",
        "3":"\/*\r\nsource : http:\/\/www.w3schools.com\/xml\/xml_parser.asp\r\nParse an XML Document\r\nThe following code fragment parses an XML document into an XML DOM object:\r\n*\/\r\n\r\nif (window.XMLHttpRequest)\r\n  {\/\/ code for IE7+, Firefox, Chrome, Opera, Safari\r\n  xmlhttp=new XMLHttpRequest();\r\n  }\r\nelse\r\n  {\/\/ code for IE6, IE5\r\n  xmlhttp=new ActiveXObject(\"Microsoft.XMLHTTP\");\r\n  }\r\nxmlhttp.open(\"GET\",\"books.xml\",false);\r\nxmlhttp.send();\r\nxmlDoc=xmlhttp.responseXML;\r\n\/*\r\nParse an XML String\r\n\r\nThe following code fragment parses an XML string into an XML DOM object:\r\n*\/\r\ntxt=\"<bookstore><book>\";\r\ntxt=txt+\"<title>Everyday Italian<\/title>\";\r\ntxt=txt+\"<author>Giada De Laurentiis<\/author>\";\r\ntxt=txt+\"<year>2005<\/year>\";\r\ntxt=txt+\"<\/book><\/bookstore>\";\r\n\r\nif (window.DOMParser)\r\n  {\r\n  parser=new DOMParser();\r\n  xmlDoc=parser.parseFromString(txt,\"text\/xml\");\r\n  }\r\nelse \/\/ Internet Explorer\r\n  {\r\n  xmlDoc=new ActiveXObject(\"Microsoft.XMLDOM\");\r\n  xmlDoc.async=false;\r\n  xmlDoc.loadXML(txt); \r\n  }",
        "created":"1336670453",
        "4":"1336670453",
        "updated":"1336670453",
        "5":"1336670453",
        "category_id":"2",
        "6":"2",
        "user_id":"3",
        "7":"3",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"58",
        "0":"58",
        "title":"Git - Change commit encoding to UTF8",
        "1":"Git - Change commit encoding to UTF8",
        "description":"Git - Change commit encoding to UTF8",
        "2":"Git - Change commit encoding to UTF8",
        "content":"git config --global i18n.commitEncoding 'utf8'",
        "3":"git config --global i18n.commitEncoding 'utf8'",
        "created":"1336777244",
        "4":"1336777244",
        "updated":"1336777244",
        "5":"1336777244",
        "category_id":"11",
        "6":"11",
        "user_id":"3",
        "7":"3",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"59",
        "0":"59",
        "title":"Custom DOM events",
        "1":"Custom DOM events",
        "description":"Custom DOM events",
        "2":"Custom DOM events",
        "content":"\/\/Listen for the event\r\nwindow.addEventListener(\"MyEventType\", function(evt) {\r\n    alert(evt.detail);\r\n}, false);\r\n\r\n\/\/Dispatch an event\r\nvar evt = document.createEvent(\"CustomEvent\");\r\nevt.initCustomEvent(\"MyEventType\", true, true, \"Any Object Here\");\r\nwindow.dispatchEvent(evt);\r\nlink|edit|flag",
        "3":"\/\/Listen for the event\r\nwindow.addEventListener(\"MyEventType\", function(evt) {\r\n    alert(evt.detail);\r\n}, false);\r\n\r\n\/\/Dispatch an event\r\nvar evt = document.createEvent(\"CustomEvent\");\r\nevt.initCustomEvent(\"MyEventType\", true, true, \"Any Object Here\");\r\nwindow.dispatchEvent(evt);\r\nlink|edit|flag",
        "created":"1336831975",
        "4":"1336831975",
        "updated":"1336831975",
        "5":"1336831975",
        "category_id":"2",
        "6":"2",
        "user_id":"3",
        "7":"3",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"60",
        "0":"60",
        "title":"a new snippet",
        "1":"a new snippet",
        "description":"description of a new snippet",
        "2":"description of a new snippet",
        "content":"content of the new snippet",
        "3":"content of the new snippet",
        "created":"1336924978",
        "4":"1336924978",
        "updated":"1336924978",
        "5":"1336924978",
        "category_id":"1",
        "6":"1",
        "user_id":"3",
        "7":"3",
        "private":null,
        "8":null,
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"61",
        "0":"61",
        "title":"Coffeescript tips and tricks",
        "1":"Coffeescript tips and tricks",
        "description":"Coffeescript tips and tricks",
        "2":"Coffeescript tips and tricks",
        "content":"# source : https:\/\/gist.github.com\/993584\r\n\r\n# These are my notes from the PragProg book on CoffeeScript of things that either \r\n# aren't in the main CS language reference or I didn't pick them up there. I wrote \r\n# them down before I forgot, and put it here for others but mainly as a reference for \r\n# myself.\r\n\r\n# assign arguments in constructor to properties of the same name:\r\nclass Thingie\r\n    constructor: (@name, @url) ->\r\n\r\n# is the same as:\r\nclass Thingie\r\n    constructor: (name, url) ->\r\n        @name = name\r\n        @url = url\r\n\r\n#execute a function with no arguments:\r\nlcword = do str.toLowerCase\r\n# is the same as:\r\nlcword = str.toLowerCase()\r\n\r\n# invoke a method on each object in an array\r\n(marker.remove()) for marker in @markers\r\n\r\nfor key, value of object\r\n     # do things with key and value\r\n\r\nfor own key, value of object\r\n     # do things with object's own properties only\r\n\r\nfor key, value of object when key in ['foo', 'bar', 'baz']\r\n     # iterate through properties that meet the when condition\r\n\r\n# give me an array's values based on a condition: \r\nfoobar = (value for key, value of object when key in ['foo', 'bar'])\r\n\r\nfor x in [1..100] by 10\r\n     # iterate from 1 to 100 in steps of 10\r\n\r\n# Call the \"process\" function on each property of results array that has \"food\" in the title\r\nprocess result for result in results when _.include(result.title, 'food')\r\n\r\n# Executing an anonymous function while a condition is met:\r\na = 0\r\n(do -> console.log(a++)) while a<10\r\n(do -> console.log(a--)) until a is 1\r\n\r\n# Put the comprehension in parentheses to return it as an array, including only those values that meet the by\/when condition:\r\nevens = (x for x in [2..10] by 2)\r\n=> evens = [2,4,6,8,10]\r\n\r\n# Given an alphabet:\r\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\r\n\r\n# Iterate over part of the alphabet:\r\nconsole.log letter for letter in alphabet[4..8]\r\n=> Logs 'e' through 'i' to the console\r\n\r\n# Iterate through the first part of the alphabet, up to e:\r\nconsole.log letter for letter in alphabet[..4]\r\n\r\n# Stop just before e (notice the 3 dots in the range:\r\nconsole.log letter for letter in alphabet[...4]\r\n\r\n# Start at e and go to the end alphabet:\r\nconsole.log letter for letter in alphabet[4..]\r\n\r\n# Useful for pagination:\r\npaginate = (start, end) -> @results[start..end]\r\n\r\n# Just JS but useful to remember:\r\nbreak # stop iterating\r\ncontinue # jump to the next iteration\r\n\r\n# Iterate using \"for\" but have each iteration run in closure:\r\nfor x in arr\r\n     do (x) ->\r\n          # do something in own scope",
        "3":"# source : https:\/\/gist.github.com\/993584\r\n\r\n# These are my notes from the PragProg book on CoffeeScript of things that either \r\n# aren't in the main CS language reference or I didn't pick them up there. I wrote \r\n# them down before I forgot, and put it here for others but mainly as a reference for \r\n# myself.\r\n\r\n# assign arguments in constructor to properties of the same name:\r\nclass Thingie\r\n    constructor: (@name, @url) ->\r\n\r\n# is the same as:\r\nclass Thingie\r\n    constructor: (name, url) ->\r\n        @name = name\r\n        @url = url\r\n\r\n#execute a function with no arguments:\r\nlcword = do str.toLowerCase\r\n# is the same as:\r\nlcword = str.toLowerCase()\r\n\r\n# invoke a method on each object in an array\r\n(marker.remove()) for marker in @markers\r\n\r\nfor key, value of object\r\n     # do things with key and value\r\n\r\nfor own key, value of object\r\n     # do things with object's own properties only\r\n\r\nfor key, value of object when key in ['foo', 'bar', 'baz']\r\n     # iterate through properties that meet the when condition\r\n\r\n# give me an array's values based on a condition: \r\nfoobar = (value for key, value of object when key in ['foo', 'bar'])\r\n\r\nfor x in [1..100] by 10\r\n     # iterate from 1 to 100 in steps of 10\r\n\r\n# Call the \"process\" function on each property of results array that has \"food\" in the title\r\nprocess result for result in results when _.include(result.title, 'food')\r\n\r\n# Executing an anonymous function while a condition is met:\r\na = 0\r\n(do -> console.log(a++)) while a<10\r\n(do -> console.log(a--)) until a is 1\r\n\r\n# Put the comprehension in parentheses to return it as an array, including only those values that meet the by\/when condition:\r\nevens = (x for x in [2..10] by 2)\r\n=> evens = [2,4,6,8,10]\r\n\r\n# Given an alphabet:\r\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\r\n\r\n# Iterate over part of the alphabet:\r\nconsole.log letter for letter in alphabet[4..8]\r\n=> Logs 'e' through 'i' to the console\r\n\r\n# Iterate through the first part of the alphabet, up to e:\r\nconsole.log letter for letter in alphabet[..4]\r\n\r\n# Stop just before e (notice the 3 dots in the range:\r\nconsole.log letter for letter in alphabet[...4]\r\n\r\n# Start at e and go to the end alphabet:\r\nconsole.log letter for letter in alphabet[4..]\r\n\r\n# Useful for pagination:\r\npaginate = (start, end) -> @results[start..end]\r\n\r\n# Just JS but useful to remember:\r\nbreak # stop iterating\r\ncontinue # jump to the next iteration\r\n\r\n# Iterate using \"for\" but have each iteration run in closure:\r\nfor x in arr\r\n     do (x) ->\r\n          # do something in own scope",
        "created":"1337017811",
        "4":"1337017811",
        "updated":"1337017811",
        "5":"1337017811",
        "category_id":"14",
        "6":"14",
        "user_id":"2",
        "7":"2",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"62",
        "0":"62",
        "title":"Couchapp - 101",
        "1":"Couchapp - 101",
        "description":"how to create a basic couch app",
        "2":"how to create a basic couch app",
        "content":"\/\/ install couch db\r\n\/\/ install couch app tool\r\nin the console :\r\ncouchapp generate hello-couch",
        "3":"\/\/ install couch db\r\n\/\/ install couch app tool\r\nin the console :\r\ncouchapp generate hello-couch",
        "created":"1337194870",
        "4":"1337194870",
        "updated":"1337194870",
        "5":"1337194870",
        "category_id":"2",
        "6":"2",
        "user_id":"2",
        "7":"2",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"63",
        "0":"63",
        "title":"REST requests with Curl",
        "1":"REST requests with Curl",
        "description":"REST requests with Curl",
        "2":"REST requests with Curl",
        "content":"source : http:\/\/blogs.plexibus.com\/2009\/01\/15\/rest-esting-with-curl\/\r\n\r\nREST-esting with cURL\r\nI have been working on RESTful web applications over the past few months and have been using cURL to quickly test functionality.\r\n\r\nThe following are basic curl commands to test REST resources\r\n\r\nPOSTing data to a REST resource:\r\n\r\ncurl -i -H \"Accept: application\/json\" -X POST -d \"firstName=james\" http:\/\/192.168.0.165\/persons\/person\r\nwhere,\r\ni \u2013 show response headers\r\nH \u2013 pass request headers to the resource\r\nX \u2013 pass a HTTP method name\r\nd \u2013 pass in parameters enclosed in quotes; multiple parameters are separated by \u2018&\u2019\r\nThe above command posts the first name \u201cjames\u201d to the persons resource. Assuming the server creates a new person resource with first name of James, I also tell the server to return a json representation of the newly created resource.\r\n\r\nPUT a resource:\r\n\r\ncurl -i -H \"Accept: application\/json\" -X PUT -d \"phone=1-800-999-9999\" http:\/\/192.168.0.165\/persons\/person\/1\r\nThis puts a phone number to the person resource created in the previous example.\r\n\r\nGET a resource:\r\n\r\ncurl -i -H \"Accept: application\/json\" http:\/\/192.168.0.165\/persons\/person\/1\r\nFor GET requests, the -X GET option is optional.\r\n\r\ncurl -i -H \"Accept: application\/json\" http:\/\/192.168.0.165\/persons?zipcode=93031\r\nYou can pass in query parameters by appending it to the url.\r\n\r\ncurl -i -H \"Accept: application\/json\" \"http:\/\/192.168.0.165\/persons?firstName=james&lastName=wallis\"\r\nThe resource uri needs to be quoted if you pass in multiple query parameters separated by \u2018&\u2019. If you have spaces in the query values, you should encode them i.e. either use the \u2018+\u2019 symbol or %20 instead of the space.\r\n\r\nDELETE a resource:\r\n\r\ncurl -i -H \"Accept: application\/json\" -X DELETE http:\/\/192.168.0.165\/persons\/person\/1\r\nTo delete a resource, supply DELETE as a -X option.\r\n\r\nUsing POST to PUT a resource:\r\n\r\ncurl -i -H \"Accept: application\/json\" -H \"X-HTTP-Method-Override: PUT\" -X POST -d \"phone=1-800-999-9999\" http:\/\/192.168.0.165\/persons\/person\/1\r\nSome clients do not support PUT or it\u2019s difficult to send in a PUT request. For these cases, you could POST the request with a request header of X-HTTP-Method-Override set to PUT. What this tells the server is that the intended request is a PUT.\r\nMost web servers (or you could code it) support the X-HTTP-Method-Override and convert the request method to the intended HTTP method (value of the X-HTTP-Method-Override)\r\nThis example puts a phone number (by POSTing) to the person resource identified by 1.\r\n\r\nUsing POST to DELETE a resource:\r\n\r\ncurl -i -H \"Accept: application\/json\" -H \"X-HTTP-Method-Override: DELETE\" -X POST http:\/\/192.168.0.3:8090\/persons\/person\/1\r\nSimilar to the previous command, this example deletes the person resource identified by the above uri using the POST HTTP method but telling the server to override it with DELETE.\r\n\r\nAnother good tool to test REST resources is the Poster Firefox Add-on. It\u2019s a great GUI tool if you do not want to get down and dirty with cURL or if you are testing from Windows (of course you could install Cygwin and then install and use cURL).\r\nBut I\u2019m still more productive with cURL as opposed to Poster.\r\n\r\nTo use cURL to PUT\/GET files, see here.",
        "3":"source : http:\/\/blogs.plexibus.com\/2009\/01\/15\/rest-esting-with-curl\/\r\n\r\nREST-esting with cURL\r\nI have been working on RESTful web applications over the past few months and have been using cURL to quickly test functionality.\r\n\r\nThe following are basic curl commands to test REST resources\r\n\r\nPOSTing data to a REST resource:\r\n\r\ncurl -i -H \"Accept: application\/json\" -X POST -d \"firstName=james\" http:\/\/192.168.0.165\/persons\/person\r\nwhere,\r\ni \u2013 show response headers\r\nH \u2013 pass request headers to the resource\r\nX \u2013 pass a HTTP method name\r\nd \u2013 pass in parameters enclosed in quotes; multiple parameters are separated by \u2018&\u2019\r\nThe above command posts the first name \u201cjames\u201d to the persons resource. Assuming the server creates a new person resource with first name of James, I also tell the server to return a json representation of the newly created resource.\r\n\r\nPUT a resource:\r\n\r\ncurl -i -H \"Accept: application\/json\" -X PUT -d \"phone=1-800-999-9999\" http:\/\/192.168.0.165\/persons\/person\/1\r\nThis puts a phone number to the person resource created in the previous example.\r\n\r\nGET a resource:\r\n\r\ncurl -i -H \"Accept: application\/json\" http:\/\/192.168.0.165\/persons\/person\/1\r\nFor GET requests, the -X GET option is optional.\r\n\r\ncurl -i -H \"Accept: application\/json\" http:\/\/192.168.0.165\/persons?zipcode=93031\r\nYou can pass in query parameters by appending it to the url.\r\n\r\ncurl -i -H \"Accept: application\/json\" \"http:\/\/192.168.0.165\/persons?firstName=james&lastName=wallis\"\r\nThe resource uri needs to be quoted if you pass in multiple query parameters separated by \u2018&\u2019. If you have spaces in the query values, you should encode them i.e. either use the \u2018+\u2019 symbol or %20 instead of the space.\r\n\r\nDELETE a resource:\r\n\r\ncurl -i -H \"Accept: application\/json\" -X DELETE http:\/\/192.168.0.165\/persons\/person\/1\r\nTo delete a resource, supply DELETE as a -X option.\r\n\r\nUsing POST to PUT a resource:\r\n\r\ncurl -i -H \"Accept: application\/json\" -H \"X-HTTP-Method-Override: PUT\" -X POST -d \"phone=1-800-999-9999\" http:\/\/192.168.0.165\/persons\/person\/1\r\nSome clients do not support PUT or it\u2019s difficult to send in a PUT request. For these cases, you could POST the request with a request header of X-HTTP-Method-Override set to PUT. What this tells the server is that the intended request is a PUT.\r\nMost web servers (or you could code it) support the X-HTTP-Method-Override and convert the request method to the intended HTTP method (value of the X-HTTP-Method-Override)\r\nThis example puts a phone number (by POSTing) to the person resource identified by 1.\r\n\r\nUsing POST to DELETE a resource:\r\n\r\ncurl -i -H \"Accept: application\/json\" -H \"X-HTTP-Method-Override: DELETE\" -X POST http:\/\/192.168.0.3:8090\/persons\/person\/1\r\nSimilar to the previous command, this example deletes the person resource identified by the above uri using the POST HTTP method but telling the server to override it with DELETE.\r\n\r\nAnother good tool to test REST resources is the Poster Firefox Add-on. It\u2019s a great GUI tool if you do not want to get down and dirty with cURL or if you are testing from Windows (of course you could install Cygwin and then install and use cURL).\r\nBut I\u2019m still more productive with cURL as opposed to Poster.\r\n\r\nTo use cURL to PUT\/GET files, see here.",
        "created":"1337197717",
        "4":"1337197717",
        "updated":"1337197717",
        "5":"1337197717",
        "category_id":"11",
        "6":"11",
        "user_id":"2",
        "7":"2",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"64",
        "0":"64",
        "title":"a new snippet",
        "1":"a new snippet",
        "description":"description of a new snippet",
        "2":"description of a new snippet",
        "content":"content of the new snippet",
        "3":"content of the new snippet",
        "created":"1337231667",
        "4":"1337231667",
        "updated":"1337231667",
        "5":"1337231667",
        "category_id":"1",
        "6":"1",
        "user_id":"3",
        "7":"3",
        "private":null,
        "8":null,
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"65",
        "0":"65",
        "title":"Shortcut  icon - favicon",
        "1":"Shortcut  icon - favicon",
        "description":"Shortcut  icon - favicon",
        "2":"Shortcut  icon - favicon",
        "content":"<!-- in the HEAD of a html document -->\r\n<link rel=\"shortcut icon\" type=\"image\/png\" href=\"images\/mp.png\" \/>\r\n",
        "3":"<!-- in the HEAD of a html document -->\r\n<link rel=\"shortcut icon\" type=\"image\/png\" href=\"images\/mp.png\" \/>\r\n",
        "created":"1337231710",
        "4":"1337231710",
        "updated":"1337231710",
        "5":"1337231710",
        "category_id":"4",
        "6":"4",
        "user_id":"2",
        "7":"2",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"66",
        "0":"66",
        "title":"CouchDB 101",
        "1":"CouchDB 101",
        "description":"CouchDB 101",
        "2":"CouchDB 101",
        "content":"#lister les bases de donn\u00e9es\r\n\r\ncurl -X GET http:\/\/127.0.0.1:5984\/_all_dbs\r\n\r\n# creer une base de donn\u00e9e\r\n\r\ncurl -X PUT http:\/\/127.0.0.1:5984\/database_name\r\n\r\n# effacer une base de donn\u00e9e\r\n\r\ncurl -X DELETE http:\/\/127.0.0.1:5984\/database_name",
        "3":"#lister les bases de donn\u00e9es\r\n\r\ncurl -X GET http:\/\/127.0.0.1:5984\/_all_dbs\r\n\r\n# creer une base de donn\u00e9e\r\n\r\ncurl -X PUT http:\/\/127.0.0.1:5984\/database_name\r\n\r\n# effacer une base de donn\u00e9e\r\n\r\ncurl -X DELETE http:\/\/127.0.0.1:5984\/database_name",
        "created":"1337303834",
        "4":"1337303834",
        "updated":"1337303834",
        "5":"1337303834",
        "category_id":"11",
        "6":"11",
        "user_id":"2",
        "7":"2",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"67",
        "0":"67",
        "title":"REST-esting with cURL: File Handling",
        "1":"REST-esting with cURL: File Handling",
        "description":"REST-esting with cURL: File Handling",
        "2":"REST-esting with cURL: File Handling",
        "content":"#REST-esting with cURL: File Handling\r\n#The preview of CloudIQ Storage brings Amazon S3-like functionality to Managed Service Providers, organizations, and businesses. It opens up new possibilities with distributed, reliable storage of data and and importantly, computational storage.\r\n#\r\n#CloudIQ Storage exposes a RESTful interface that clients can use to store and retrieve files. Using cURL you can be on your way to PUTing and GETing files to CloudIQ Storage or any RESTful server that accepts files. This post is a follow-up to the REST-esting with cURL.\r\n#\r\n#The following are basic curl commands to test PUT\/GET of files\r\n#\r\n#PUT a file\r\n#\r\n#view plaincopy to clipboardprint?\r\ncurl -i -u fabric-admin:fabric-admin -X PUT -T \"test\" http:\/\/192.168.0.165:16088\/files\/test  \r\n#where,\r\n#i \u2013 show response headers\r\n#u \u2013 server authentication information, in the form of user:password\r\n#X \u2013 pass a HTTP method name\r\n#T \u2013 name of file to upload\r\n#The above command PUTs test file.\r\n#\r\n#Optionally, you can leave out the file part in the URL, ending the URL with a trailing slash. cURL will append the local file name in this case. Note that you must use a trailing slash (\/) on the last directory to tell cURL to use the file name as specified in the -T argument or cURL will use your last directory name as the remote file name to use.\r\n#\r\n#view plaincopy to clipboardprint?\r\ncurl -i -u fabric-admin:fabric-admin -X PUT -T \"test\" http:\/\/192.168.0.165:16088\/files\/  \r\n#The above command transfers test file to http:\/\/192.168.0.165:16088\/files\/.\r\n#\r\n#PUT multiple files in single command\r\n#\r\n#You can PUT multiple files via a single command by enclosing them within braces as shown below:\r\n#\r\n#view plaincopy to clipboardprint?\r\ncurl -i -u fabric-admin:fabric-admin -X PUT -T \"{test4,test5}\" http:\/\/192.168.0.165:16088\/files\/  \r\n#The above command transfers files test4 and test5 to http:\/\/192.168.0.165:16088\/files\/.\r\n#\r\n#If you have many files with the almost the same name but differentiated from each other by a number (say, test4, test5, test6, test7), you could use an alternative to the above command to transfer all these files in one cURL command:\r\n#\r\n#view plaincopy to clipboardprint?\r\ncurl -i -u fabric-admin:fabric-admin -X PUT -T \"test[4-6]\" http:\/\/192.168.0.165:16088\/files\/  \r\n#GET a file\r\n#\r\n#view plaincopy to clipboardprint?\r\ncurl -u fabric-admin:fabric-admin -O http:\/\/192.168.0.165:16088\/files\/test4  \r\n#where,\r\n#O \u2013 use the remote file name for the local file\r\n#The above command GETs the contents of file test4 from remote location http:\/\/192.168.0.165:16088\/files\/test4 and writes the output to local file named like the remote file (in this case, test4).\r\n#\r\n#If you want to store the contents in a local file with a name different from the remote file name, you could use the -o option:\r\n#\r\n#view plaincopy to clipboardprint?\r\ncurl -u fabric-admin:fabric-admin -o test10 http:\/\/192.168.0.165:16088\/files\/test4  \r\n#The above command GETs the contents of file test4 from remote location http:\/\/192.168.0.165:16088\/files\/test4 and writes the output to local file test10.\r\n#\r\n#Get HEADers\r\n#There are times when you just need the headers for a file. You could retrieve the headers for a file by running the following command:\r\n#\r\n#view plaincopy to clipboardprint?\r\ncurl -I -u fabric-admin:fabric-admin http:\/\/192.168.0.165:16088\/files\/test4  \r\n#where,\r\n#I \u2013 fetches the HTTP headers only\r\n#The above command will display the HTTP headers returned by http:\/\/192.168.0.165:16088\/files\/test4\r\n#\r\n#If you want to capture the file contents and the HTTP headers at the same time, you can use the -D option:\r\n#\r\n#view plaincopy to clipboardprint?\r\ncurl -u fabric-admin:fabric-admin -D \"test4-headers\" -O http:\/\/192.168.0.165:16088\/files\/test4  \r\n#The above command GETs the contents of file test4 from remote location http:\/\/192.168.0.165:16088\/files\/test4 and at the same time outputs the HTTP headers to file test4-headers\r\n#\r\n#For more examples using cURL for testing web services, see here.",
        "3":"#REST-esting with cURL: File Handling\r\n#The preview of CloudIQ Storage brings Amazon S3-like functionality to Managed Service Providers, organizations, and businesses. It opens up new possibilities with distributed, reliable storage of data and and importantly, computational storage.\r\n#\r\n#CloudIQ Storage exposes a RESTful interface that clients can use to store and retrieve files. Using cURL you can be on your way to PUTing and GETing files to CloudIQ Storage or any RESTful server that accepts files. This post is a follow-up to the REST-esting with cURL.\r\n#\r\n#The following are basic curl commands to test PUT\/GET of files\r\n#\r\n#PUT a file\r\n#\r\n#view plaincopy to clipboardprint?\r\ncurl -i -u fabric-admin:fabric-admin -X PUT -T \"test\" http:\/\/192.168.0.165:16088\/files\/test  \r\n#where,\r\n#i \u2013 show response headers\r\n#u \u2013 server authentication information, in the form of user:password\r\n#X \u2013 pass a HTTP method name\r\n#T \u2013 name of file to upload\r\n#The above command PUTs test file.\r\n#\r\n#Optionally, you can leave out the file part in the URL, ending the URL with a trailing slash. cURL will append the local file name in this case. Note that you must use a trailing slash (\/) on the last directory to tell cURL to use the file name as specified in the -T argument or cURL will use your last directory name as the remote file name to use.\r\n#\r\n#view plaincopy to clipboardprint?\r\ncurl -i -u fabric-admin:fabric-admin -X PUT -T \"test\" http:\/\/192.168.0.165:16088\/files\/  \r\n#The above command transfers test file to http:\/\/192.168.0.165:16088\/files\/.\r\n#\r\n#PUT multiple files in single command\r\n#\r\n#You can PUT multiple files via a single command by enclosing them within braces as shown below:\r\n#\r\n#view plaincopy to clipboardprint?\r\ncurl -i -u fabric-admin:fabric-admin -X PUT -T \"{test4,test5}\" http:\/\/192.168.0.165:16088\/files\/  \r\n#The above command transfers files test4 and test5 to http:\/\/192.168.0.165:16088\/files\/.\r\n#\r\n#If you have many files with the almost the same name but differentiated from each other by a number (say, test4, test5, test6, test7), you could use an alternative to the above command to transfer all these files in one cURL command:\r\n#\r\n#view plaincopy to clipboardprint?\r\ncurl -i -u fabric-admin:fabric-admin -X PUT -T \"test[4-6]\" http:\/\/192.168.0.165:16088\/files\/  \r\n#GET a file\r\n#\r\n#view plaincopy to clipboardprint?\r\ncurl -u fabric-admin:fabric-admin -O http:\/\/192.168.0.165:16088\/files\/test4  \r\n#where,\r\n#O \u2013 use the remote file name for the local file\r\n#The above command GETs the contents of file test4 from remote location http:\/\/192.168.0.165:16088\/files\/test4 and writes the output to local file named like the remote file (in this case, test4).\r\n#\r\n#If you want to store the contents in a local file with a name different from the remote file name, you could use the -o option:\r\n#\r\n#view plaincopy to clipboardprint?\r\ncurl -u fabric-admin:fabric-admin -o test10 http:\/\/192.168.0.165:16088\/files\/test4  \r\n#The above command GETs the contents of file test4 from remote location http:\/\/192.168.0.165:16088\/files\/test4 and writes the output to local file test10.\r\n#\r\n#Get HEADers\r\n#There are times when you just need the headers for a file. You could retrieve the headers for a file by running the following command:\r\n#\r\n#view plaincopy to clipboardprint?\r\ncurl -I -u fabric-admin:fabric-admin http:\/\/192.168.0.165:16088\/files\/test4  \r\n#where,\r\n#I \u2013 fetches the HTTP headers only\r\n#The above command will display the HTTP headers returned by http:\/\/192.168.0.165:16088\/files\/test4\r\n#\r\n#If you want to capture the file contents and the HTTP headers at the same time, you can use the -D option:\r\n#\r\n#view plaincopy to clipboardprint?\r\ncurl -u fabric-admin:fabric-admin -D \"test4-headers\" -O http:\/\/192.168.0.165:16088\/files\/test4  \r\n#The above command GETs the contents of file test4 from remote location http:\/\/192.168.0.165:16088\/files\/test4 and at the same time outputs the HTTP headers to file test4-headers\r\n#\r\n#For more examples using cURL for testing web services, see here.",
        "created":"1337353380",
        "4":"1337353380",
        "updated":"1337353380",
        "5":"1337353380",
        "category_id":"11",
        "6":"11",
        "user_id":"3",
        "7":"3",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"68",
        "0":"68",
        "title":"Autoload Classes using namespaces ",
        "1":"Autoload Classes using namespaces ",
        "description":"Autoload Classes using namespaces ",
        "2":"Autoload Classes using namespaces ",
        "content":"#I think there shouldn't be tests in an autoload callback function, this callback will trigger \r\n#because the class you're trying to load is not defined... in any case if your class is not \r\n#defined, the code must fail. Therefore an autoload function should be like : \r\n\r\n<?php \r\nspl_autoload_register(function($className) \r\n{ \r\n    require(str_replace('\\\\', '\/', ltrim($className, '\\\\')) . '.php'); \r\n}); \r\n?> \r\n\r\n#As the \"require\" function uses the include_path, the folders for the autoinclusion should be added using set_include_path, let's say your index.php is located in a \"public\" directory and your MVC classes are in \"core\", the index.php should be : \r\n\r\n<?php \r\ndefine('ROOT_DIR', realpath(__DIR__ . '\/..')); \r\n\r\nset_include_path(ROOT_DIR . PATH_SEPARATOR . get_include_path()); \r\n?> \r\n\r\n#And of course you want to catch the loading errors, so you can use class_exists : \r\n\r\n<?php \r\n$className = '\\core\\Controller\\Hello\\World'; \r\n\r\nif (!class_exists($className)) \r\n{ \r\n    throw new ErrorException('Class Not Found !'); \r\n} \r\nelse \r\n{ \r\n    $object = new $className(); \r\n} \r\n?> \r\n\r\n#This code sample will autoload the \"World.php\" file located in your \"core\/Controller\/Hello\" directory, assuming that your class declaration is like : \r\n\r\n<?php \r\nnamespace coreControllerHello; \r\n\r\nclass World \r\n{ \r\n    function __construct() \r\n    { \r\n        echo \"Helloworld\"; \r\n    } \r\n} \r\n?>",
        "3":"#I think there shouldn't be tests in an autoload callback function, this callback will trigger \r\n#because the class you're trying to load is not defined... in any case if your class is not \r\n#defined, the code must fail. Therefore an autoload function should be like : \r\n\r\n<?php \r\nspl_autoload_register(function($className) \r\n{ \r\n    require(str_replace('\\\\', '\/', ltrim($className, '\\\\')) . '.php'); \r\n}); \r\n?> \r\n\r\n#As the \"require\" function uses the include_path, the folders for the autoinclusion should be added using set_include_path, let's say your index.php is located in a \"public\" directory and your MVC classes are in \"core\", the index.php should be : \r\n\r\n<?php \r\ndefine('ROOT_DIR', realpath(__DIR__ . '\/..')); \r\n\r\nset_include_path(ROOT_DIR . PATH_SEPARATOR . get_include_path()); \r\n?> \r\n\r\n#And of course you want to catch the loading errors, so you can use class_exists : \r\n\r\n<?php \r\n$className = '\\core\\Controller\\Hello\\World'; \r\n\r\nif (!class_exists($className)) \r\n{ \r\n    throw new ErrorException('Class Not Found !'); \r\n} \r\nelse \r\n{ \r\n    $object = new $className(); \r\n} \r\n?> \r\n\r\n#This code sample will autoload the \"World.php\" file located in your \"core\/Controller\/Hello\" directory, assuming that your class declaration is like : \r\n\r\n<?php \r\nnamespace coreControllerHello; \r\n\r\nclass World \r\n{ \r\n    function __construct() \r\n    { \r\n        echo \"Helloworld\"; \r\n    } \r\n} \r\n?>",
        "created":"1337796731",
        "4":"1337796731",
        "updated":"1337796731",
        "5":"1337796731",
        "category_id":"1",
        "6":"1",
        "user_id":"2",
        "7":"2",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    },
    {
        "id":"69",
        "0":"69",
        "title":"PDO 101",
        "1":"PDO 101",
        "description":"PDO 101",
        "2":"PDO 101",
        "content":"# What is PDO.\r\n# \r\n# PDO is a PHP extension to formalise PHP's database connections by creating a uniform interface. This allows developers to create code which is portable across many databases and platforms. PDO is _not_ just another abstraction layer like PearDB although PearDB may use PDO as a backend. Those of you familiar with Perls DBI may find the syntax disturbingly familiar.\r\n# Note: Your must read the section on Error Handling to benifit from this tutorial\r\n# \r\n# During this tutorial we will be using a database called animals, which, as you might have guessed, is a database of animals, genius! The animals table is described here.\r\n# CREATE TABLE animals ( animal_id MEDIUMINT(8) NOT NULL AUTO_INCREMENT PRIMARY KEY,\r\n# animal_type VARCHAR(25) NOT NULL,\r\n# animal_name VARCHAR(25) NOT NULL \r\n# ) ENGINE = MYISAM ;\r\n# \r\n# INSERT INTO `animals` (`animal_id`, `animal_type`, `animal_name`) VALUES\r\n# (1, 'kookaburra', 'bruce'),\r\n# (2, 'emu', 'bruce'),\r\n# (3, 'goanna', 'bruce'),\r\n# (4, 'dingo', 'bruce'),\r\n# (5, 'kangaroo', 'bruce'),\r\n# (6, 'wallaby', 'bruce'),\r\n# (7, 'wombat', 'bruce'),\r\n# (8, 'koala', 'bruce');\r\n# What databases does PDO support?\r\n# \r\n# PDO supports many of the popular databases as seen on the list below.\r\n# DBLIB: FreeTDS \/ Microsoft SQL Server \/ Sybase\r\n# Firebird (http:\/\/firebird.sourceforge.net\/): Firebird\/Interbase 6\r\n# IBM (IBM DB2)\r\n# INFORMIX - IBM Informix Dynamic Server\r\n# MYSQL (http:\/\/www.mysql.com\/): MySQL 3.x\/4.0\r\n# OCI (http:\/\/www.oracle.com): Oracle Call Interface\r\n# ODBC: ODBC v3 (IBM DB2 and unixODBC)\r\n# PGSQL (http:\/\/www.postgresql.org\/): PostgreSQL\r\n# SQLITE (http:\/\/sqlite.org\/): SQLite 3.x\r\n# To see if the PDO driver is available for your database, check phpinfo() and you should have a section named PDO and another pdo_mysql or pdo_sqlite depending on your choice of database. You may also check the available drivers with the static method PDO::getAvailableDrivers().\r\n# \r\n<?php\r\nforeach(PDO::getAvailableDrivers() as $driver)\r\n    {\r\n    echo $driver.'<br \/>';\r\n    }\r\n?>\r\n# To enable PDO simply configure --enable-pdo and --with-pdo_sqlite --with_pdo_mysql or whatever database needs supporting by PDO.\r\n# Windows users will need to un-comment the appropriate line in php.ini and restart the web server.\r\n# Where do I begin?\r\n# \r\n# If you are reading this you are more than likely to have connected to a database using PHP before using a database specific function such as mysql_connect() or pg_connect or, for the truely evolved coder, SQLite. To use PDO with your database you need to have the correct PDO driver installed for it. For the SQLite PDO driver you need to configure PHP --with-pdo-sqlite. If you are using a RPM based system there are pdo-sqlite.rpm's available. Before we go any further, lets connect to a database and see what all the fuss is about.\r\n# Connect to a database\r\n# \r\n# Every interaction with a database begins with a connection. Regardless of the database you use, you must connect first and establish a database handler. After connecting you your database of choice, much of the PDO methods are similar. This is why PDO is such a powerful and useful tool for PHP. Here we show how to connect to various databases and establish a database handler object that we can use for further interaction with the database.\r\n# Connect with PgSQL\r\n\r\n# As mentioned above, you may have previously tried to connect to a PgSQL database using pg_connect. Here we connect with PDO.\r\n<?php\r\ntry {\r\n    $db = new PDO(\"pgsql:dbname=pdo;host=localhost\", \"username\", \"password\" );\r\n    echo \"PDO connection object created\";\r\n    }\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# So that was a bit of a no-brainer to start with, we see the use of \"new\" to create the PDO object followed by the database type username and password. This should be familiar to most people who have connected to a database before using traditional methods.. As we have used try{} and catch(){} we see upon failure that an exception is thrown with the error message \"could not find driver\". This tells us the PDO_PGSQL driver is not present and needs to be loaded. As noted, an exception is thrown. PDO can handle errors in several ways, more on this later.\r\n# How did it connect to the database?\r\n# The database connection is handled internally by PDO's __construct() and this represents our database connection.\r\n# Lets see what happens if we try to connect to database as we did above without catching the exception and see what happens..\r\n<?php\r\n $db = new PDO(\"pgsql:dbname=no_database;host=localhost\", \"username\", \"password\" );\r\n?>\r\n# From the above snippet you will get a result something like this below\r\n# Fatal error: Uncaught exception 'PDOException' with message 'could not find driver' in \/www\/pdo.php:2 Stack trace: #0 \/www\/pdo.php(2): PDO->__construct('pgsql:dbname=pd...', 'username', 'password') #1 {main} thrown in \/www\/pdo.php on line 2\r\n# This is the default behaviour when an exception is not caught, a backtrace is generated and the script is terminated. As you can see, all the information is dumped including the file path and the database username and password. It is the responsibility of the coder to catch exceptions or to deal with the errors using set_exception_handler() function to prevent this happening. More about handling errors and exceptions later.\r\n# Connect to SQLite\r\n# When PDO is used with SQLite, database creation becomes even easier. Simply specify the path to the database file and it will be loaded. If the database file does not exist, PDO will attempt to create it. Lets see how we go with the same code but change the database to SQLite.\r\n<?php\r\ntry {\r\n    \/*** connect to SQLite database ***\/\r\n    $dbh = new PDO(\"sqlite:\/path\/to\/database.sdb\");\r\n    }\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# Because the database path does not exist and cannot be created, an exception is thrown, the exception is caught in the catch block and the error message is displayed with $e->Message(). Now that we know how to create a database, we can create tables and INSERT some data.\r\n# Another feature of SQLite is the ability to create tables in memory. This can be amazingly helpful if you wish to create tempory databases or tables or even for development code.\r\n<?php\r\ntry {\r\n    \/*** connect to SQLite database ***\/\r\n    $db = new PDO(\"sqlite::memory\");\r\n\r\n    \/*** a little message to say we did it ***\/\r\n    echo 'database created in memory';\r\n    }\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# We see above that a database is created in memory and a message is displayed to let us know. If the creation of the database failed, a PDO exception would be thrown and the script terminated at that point, passing control to the catch block.\r\n# Connect to MySQL\r\n# \r\n# MySQL is the choice of many web developers and will be used as the database of choice for much of this tutorial. Here we see how to connect to a MySQL database.\r\n\r\n<?php\r\n\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=mysql\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database';\r\n    }\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# Connect to Firebird\r\n# Often used by developers using windows, Firebird is a good database and connection is just as simple as the examples above.\r\n<?php\r\ntry {\r\n    $dbh = new PDO(\"firebird:dbname=localhost:C:\\Programs\\Firebird\\DATABASE.FDB\", \"SYSDBA\", \"masterkey\");\r\n    }   \r\ncatch (PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# Connect to Informix\r\n#Informix is popular with many windows users also, this example shows how to connect to an informix database cataloged as InformixDB in odbc.ini:\r\n<?php\r\ntry {\r\n    $dbh = new PDO(\"informix:DSN=InformixDB\", \"username\", \"password\");\r\n    }\r\ncatch (PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# Connect to Oracle\r\n\r\n# The Oracle database is used by many 'enterprise' companies but these days there are sleeker options. Lets see a simple connection to Oracle\r\n<?php\r\ntry {\r\n    $dbh = new PDO(\"OCI:\", \"username\", \"password\")\r\n    }\r\ncatch (PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# This works fine for a simple Oracle connection. The oracle driver may take two optional parameters, The database name, and the character set. To connect with a database name of \"accounts\" and a charset of UTF-8 the following code should be used.\r\n<?php\r\ntry {\r\n    $dbh = new PDO(\"OCI:dbname=accounts;charset=UTF-8\", \"username\", \"password\");\r\n    }\r\ncatch (PDOException $e)\r\n    {     echo $e->getMessage();     } ?>\r\n# Connect to ODBC\r\n\r\n# There are many connections ODBC can create, here we show how to connect to a MS Access database named accounts. The specified path is c:\\\\accounts.mdb.\r\n<?php\r\ntry {\r\n    $dbh = new PDO(\"odbc:Driver={Microsoft Access Driver (*.mdb)};Dbq=C:\\accounts.mdb;Uid=Admin\");\r\n    }\r\ncatch (PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    } \r\n?>\r\n# Connect to DBLIB\r\n\r\n# Once again a Windows specific database, DBLIB can be used as follows\r\n<?php\r\ntry {\r\n    $hostname = \"localhost\";\r\n    $port     = 10060;\r\n    $dbname   = \"my_database\";\r\n    $username = \"username\";\r\n    $password = \"password\";\r\n\r\n    $dbh = new PDO (\"dblib:host=$hostname:$port;dbname=$dbname\",\"$username\",\"$password\");\r\n    }\r\ncatch (PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# Connect to IBM\r\n\r\n# This example shows connecting to an IBM DB2 database named accounts\r\n<?php\r\ntry {\r\n    $db = new PDO(\"ibm:DRIVER={IBM DB2 ODBC DRIVER};DATABASE=accounts; HOSTNAME=1.2.3,4;PORT=56789;PROTOCOL=TCPIP;\", \"username\", \"password\");\r\n    }\r\ncatch (PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# Close a Database Connection\r\n\r\n# Up to this point we have seen how to connect to a database using PDO. But of course, we also need to disconnect when we have finished. To close the connection the object needs to be destroyed so that no reference to it remains. This is normally done at the end of a script where PHP will automatically close the connection. However, the connection may be close implicitly by assigning the value of null to the object as seen below.\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=mysql\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database';\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n    }\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# If the database connection fails, the code to assign a null value is never called as the exception throws control to the catch block.\r\n# PDO Query\r\n\r\n# Now that we can open and close a connection to the database with PDO, we can make use of it for what databases are made for, storing and retrieving information. The simplest form of query is the PDO query method. As the name suggests, this is used to perform database queries. Before we begin to query a database, lets create a small database with a table for animals. This will be a MySQL database for use throughout much of this tutorial. Remember, because PDO provides a common set of tools for databases, once we have the correct connection, the rest of the code is the same, regardless of the database you choose. When using PDO to query a database, the function used to do so depends on the statement you wish to send to the database. Below we will see three queries on how to INSERT, SELECT and UPDATE.\r\n# INSERT\r\n\r\nTo gather information from a database, we first need to put some info into it. We use the same code from above to connect and disconnect from the database and the INSERT query is accomplished using the PDO::exec method.\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** INSERT data ***\/\r\n    $count = $dbh->exec(\"INSERT INTO animals(animal_type, animal_name) VALUES ('kiwi', 'troy')\");\r\n\r\n    \/*** echo the number of affected rows ***\/\r\n    echo $count;\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n    }\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nThe output of the script above will look like this:\r\nConnected to database\r\n1\r\nThis shows us that we connected successfully to the database and then we have displayed the number of affected rows. PDO::exec returns the number of affected rows if successful, or zero (0) if no rows are affected. This may cause issues if you are checking for a boolean value and why it is recommended using === when to check for type also, as zero (0) may evaluate to boolean FALSE.\r\nThe PDO::exec method should be used for SQL statements that do not return a result set. We could use this same method to INSERT many more animals to our database, but a more effecient method would be to use a transaction. This is covered in the section on Transactions.\r\nSELECT\r\n\r\nUnlike PDO::exec the PDO::query method returns a result set, that is, a group of information from the database in the form of a PDOStatement object. Our database should look a little like the example in the What is PDO section. Using this we can SELECT information.\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** The SQL SELECT statement ***\/\r\n    $sql = \"SELECT * FROM animals\";\r\n    foreach ($dbh->query($sql) as $row)\r\n        {\r\n        print $row['animal_type'] .' - '. $row['animal_name'] . '<br \/>';\r\n        }\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nFrom the script above, we can expect the results to look like this:\r\nConnected to database\r\nemu - bruce\r\nfunnel web - bruce\r\nlizard - bruce\r\ndingo - bruce\r\nkangaroo - bruce\r\nwallaby - bruce\r\nwombat - bruce\r\nkoala - bruce\r\nkiwi - troy\r\nYou will have noticed that we can iterate over the result set directly with foreach. This is because internally the PDO statement implements the SPL traversble iterator, thus giving all the benifits of using SPL. For more on SPL refer to the Introduction to SPL page. The greatest benifit of this is that SPL iterators know only one element at a time and thus large result sets become manageable without hogging memory.\r\nUPDATE\r\n\r\nTo update a field in a database with PDO we once again use the PDO::exec method in the same manner as we did with the INSERT\r\n<?php\r\n\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** INSERT data ***\/\r\n    $count = $dbh->exec(\"UPDATE animals SET animal_name='bruce' WHERE animal_name='troy'\");\r\n\r\n    \/*** echo the number of affected rows ***\/\r\n    echo $count;\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n    }\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nOnce again we see that the connection is made to the database and one row is affected as now the kiwi has become a true Australian like the rest of the creatures. PDO::exec should be used for all database queries where no result set is required.\r\nFETCH Modes\r\n\r\nThe section above showed how using PDO::query we can fetch information from the database. The PDO::query method returns a PDOStatement object that can be utilized in much the same was as mysql_fetch_object() or pg_fetch_object(). Of course there are times when an numerical index is needed or an associative index. PDO::query provides for this also by allowing the coder to set the fetch mode for via the PDOStatement object or via PDOStatement::setFetchMode().\r\nFETCH ASSOC\r\n\r\nTo fetch an associative array from our results the constant PDO::FETCH_ASSOC is used and returns the column names as indexes or keys of the resulting array.\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** The SQL SELECT statement ***\/\r\n    $sql = \"SELECT * FROM animals\";\r\n\r\n    \/*** fetch into an PDOStatement object ***\/\r\n    $stmt = $dbh->query($sql);\r\n\r\n    \/*** echo number of columns ***\/\r\n    $result = $stmt->fetch(PDO::FETCH_ASSOC);\r\n\r\n    \/*** loop over the object directly ***\/\r\n    foreach($result as $key=>$val)\r\n    {\r\n    echo $key.' - '.$val.'<br \/>';\r\n    }\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nThe above code will give a result like this:\r\nConnected to database\r\nanimal_id - 1\r\nanimal_type - emu\r\nanimal_name - bruce\r\nPDO has returned the results as a PDOStatement object that we can iterate over directly. The resulting indexes are the names of the fields within the animals database.\r\nFETCH NUM\r\n\r\nLike PDO::FETCH_ASSOC, the PDO::FETCH_NUM produces a numerical index of the result set rather than the field names.\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** The SQL SELECT statement ***\/\r\n    $sql = \"SELECT * FROM animals\";\r\n\r\n    \/*** fetch into an PDOStatement object ***\/\r\n    $stmt = $dbh->query($sql);\r\n\r\n    \/*** echo number of columns ***\/\r\n    $result = $stmt->fetch(PDO::FETCH_NUM);\r\n\r\n    \/*** loop over the object directly ***\/\r\n    foreach($result as $key=>$val)\r\n    {\r\n    echo $key.' - '.$val.'<br \/>';\r\n    }\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nThe above code will give a result like this:\r\nConnected to database\r\n0 - 1\r\n1 - emu\r\n2 - bruce\r\nAs you can see above the indexes are now numeric in the result set\r\nFETCH BOTH\r\n\r\nThere may be times you need to fetch both numerical and associative indexes. PDO::FETCH_BOTH produces a numerical and associative index of the result set so you can use either, or both.\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** The SQL SELECT statement ***\/\r\n    $sql = \"SELECT * FROM animals\";\r\n\r\n    \/*** fetch into an PDOStatement object ***\/\r\n    $stmt = $dbh->query($sql);\r\n\r\n    \/*** echo number of columns ***\/\r\n    $result = $stmt->fetch(PDO::FETCH_BOTH);\r\n\r\n    \/*** loop over the object directly ***\/\r\n    foreach($result as $key=>$val)\r\n    {\r\n    echo $key.' - '.$val.'<br \/>';\r\n    }\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nNow we see the results have included both indexes.\r\nConnected to database\r\nanimal_id - 1\r\n0 - 1\r\nanimal_type - emu\r\n1 - emu\r\nanimal_name - bruce\r\n2 - bruce\r\nFETCH OBJECT\r\n\r\nThis little gem takes the result set and returns it as an anonymous object or stdClass and maps the field names from the database as object properties with the values the values of stored in the database.\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** The SQL SELECT statement ***\/\r\n    $sql = \"SELECT * FROM animals\";\r\n\r\n    \/*** fetch into an PDOStatement object ***\/\r\n    $stmt = $dbh->query($sql);\r\n\r\n    \/*** echo number of columns ***\/\r\n    $obj = $stmt->fetch(PDO::FETCH_OBJ);\r\n\r\n    \/*** loop over the object directly ***\/\r\n    echo $obj->animal_id.'<br \/>';\r\n    echo $obj->animal_type.'<br \/>';\r\n    echo $obj->animal_name;\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nThe above code gives the results like this:\r\nConnected to database\r\n1\r\nemu\r\nbruce\r\nThe use of the field names as class properties makes integrating results into an Object Oriented envioronment simple.\r\nFETCH LAZY\r\n\r\nPDO::FETCH_LAZY is odd as it combines PDO::FETCH_BOTH and PDO::FETCH_OBJ. I am unsure why you would want to do this, but it must have been important enough for somebody to create it. The code below is that of PDO::FETCH_BOTH and is reproduced here for examples sake.\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** The SQL SELECT statement ***\/\r\n    $sql = \"SELECT * FROM animals\";\r\n\r\n    \/*** fetch into an PDOStatement object ***\/\r\n    $stmt = $dbh->query($sql);\r\n\r\n    \/*** echo number of columns ***\/\r\n    $result = $stmt->fetch(PDO::FETCH_BOTH);\r\n\r\n    \/*** loop over the object directly ***\/\r\n    foreach($result as $key=>$val)\r\n    {\r\n    echo $key.' - '.$val.'<br \/>';\r\n    }\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nThe above code will give a result the same as that of PDO::FETCH_BOTH. Genius!\r\nFETCH CLASS\r\n\r\nPDO::FETCH_CLASS instantiates a new instance of the specified class. The field names are mapped to properties (variables) within the class called. This saves quite a bit of code and speed is enhanced as the mappings are dealt with internally.\r\n<?php\r\nclass animals{\r\n\r\npublic $animal_id;\r\n\r\npublic $animal_type;\r\n\r\npublic $animal_name;\r\n\r\n\/***\r\n *\r\n * @capitalize first words\r\n *\r\n * @access public\r\n *\r\n * @return string\r\n *\r\n *\/\r\npublic function capitalizeType(){\r\n return ucwords($this->animal_type);\r\n}\r\n\r\n} \/*** end of class ***\/\r\n\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** The SQL SELECT statement ***\/\r\n    $sql = \"SELECT * FROM animals\";\r\n\r\n    \/*** fetch into an PDOStatement object ***\/\r\n    $stmt = $dbh->query($sql);\r\n\r\n    \/*** fetch into the animals class ***\/\r\n    $obj = $stmt->fetchALL(PDO::FETCH_CLASS, 'animals');\r\n\r\n    \/*** loop of the object directly ***\/\r\n    foreach($obj as $animals)\r\n        {\r\n        \/*** call the capitalizeType method ***\/\r\n        echo $animals->capitalizeType().'<br \/>';\r\n        } \r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nThe code above produces a list of animal types, with the first letter capitalized like this:\r\nConnected to database\r\nEmu\r\nFunnel Web\r\nLizard\r\nDingo\r\nKangaroo\r\nWallaby\r\nWombat\r\nKoala\r\nKiwi\r\nThe PDO::FETCH_CLASS constant has fetched the results directly into the animals class where we were able to directly manipulate the results, nifty.\r\nPDO provides an alternative to PDO::fetch and PDO::FETCH_CLASS. PDOStatement::fetchObject() will bundle them together to give the same result as shown here.\r\n<?php\r\nclass animals{\r\n\r\npublic $animal_id;\r\n\r\npublic $animal_type;\r\n\r\npublic $animal_name;\r\n\r\n\/***\r\n *\r\n * @capitalize first words\r\n *\r\n * @access public\r\n *\r\n * @return string\r\n *\r\n *\/\r\npublic function capitalizeType(){\r\n return ucwords($this->animal_type);\r\n}\r\n\r\n} \/*** end of class ***\/\r\n\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** The SQL SELECT statement ***\/\r\n    $sql = \"SELECT * FROM animals\";\r\n\r\n    \/*** fetch into an PDOStatement object ***\/\r\n    $stmt = $dbh->query($sql);\r\n\r\n    \/*** fetch into the animals class ***\/\r\n    $animals = $stmt->fetchObject('animals');\r\n\r\n    \/*** echo the class properties ***\/\r\n    echo $animals->animal_id.'<br \/>';\r\n    echo $animals->capitalizeType().'<br \/>';\r\n    echo $animals->animal_name;\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nThe above code gives the results like this:\r\nConnected to database\r\n1\r\nEmu\r\nbruce\r\nNote that we have called the animals::capitalizeType() method to show that we are in fact working with an instance of the animals class. PDO::fetchObject() will also work as a substitute for PDO::FETCH_OBJ.\r\nFETCH INTO\r\n\r\nThe PDO::FETCH_INTO constant allows us to fetch the data into an existing instance of a class. Like PDO::FETCH_CLASS the field names are mapped to the class properties. With this in mind, we should be able to replicate the behaviour of PDO::FETCH_CLASS by instantiating the new object when setting the fetch mode. In this instance, the fetch mode is set using PDO::setFetchMode() method.\r\n<?php\r\nclass animals{\r\n\r\npublic $animal_id;\r\n\r\npublic $animal_type;\r\n\r\npublic $animal_name;\r\n\r\n\r\npublic function capitalizeType(){\r\n return ucwords($this->animal_type);\r\n}\r\n\r\n} \/*** end of class ***\/\r\n\r\n\/*** instantiate a new animals instance ***\/\r\n$animals = new animals;\r\n\r\n$animals->animal_id = 10;\r\n\r\n$animals->animal_type = 'crocodile';\r\n\r\n$animals->animal_name = 'bruce';\r\n\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** The SQL SELECT statement ***\/\r\n    $sql = \"SELECT * FROM animals\";\r\n\r\n    \/*** fetch into an PDOStatement object ***\/\r\n    $stmt = $dbh->query($sql);\r\n\r\n    \/*** set the fetch mode with PDO::setFetchMode() ***\/\r\n    $stmt->setFetchMode(PDO::FETCH_INTO, new animals);\r\n\r\n    \/*** loop over the PDOStatement directly ***\/\r\n    foreach($stmt as $animals)\r\n    {\r\n    echo $animals->capitalizeType().'<br \/>';\r\n    } \r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nOnce again, the above code produces a list of animal types, with the first letter capitalized like this:\r\nConnected to database\r\nEmu\r\nFunnel Web\r\nLizard\r\nDingo\r\nKangaroo\r\nWallaby\r\nWombat\r\nKoala\r\nKiwi\r\nError Handling\r\n\r\nPDO error handling is comes in several flavours. Previously in this tutorial we have have only used the simplest of try{} catch(){} blocks to catch an error in the database connection, but what of other errors? perhaps a field name does not exist? Lets see how we go with a simple error with the previous code.\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** The SQL SELECT statement with incorrect fieldname ***\/\r\n    $sql = \"SELECT username FROM animals\";\r\n\r\n    foreach ($dbh->query($sql) as $row)\r\n        {\r\n        print $row['animal_type'] .' - '. $row['animal_name'] . '<br \/>';\r\n        }\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nThe above script will produce an error such as this:\r\nConnected to database\r\n\r\nWarning: Invalid argument supplied for foreach() in \/www\/pdo.php on line 18\r\nThis is because there is no error handling. The SELECT statement has a field name 'username' which does not exist and an error is generated by the database. The only default error handling is done with the initial connection. Unless we deal with the error, we have a problem with displaying full path to the world. To deal with this we need to set an attribute to the type of error handling we wish to utilize. The types of error handling are\r\nException\r\nWarning\r\nSilent\r\nLets begin with exception as we have the try{} catch(){} blocks in place already.\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** set the error reporting attribute ***\/\r\n    $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\r\n\r\n    \/*** The SQL SELECT statement ***\/\r\n    $sql = \"SELECT username FROM animals\";\r\n    foreach ($dbh->query($sql) as $row)\r\n        {\r\n        print $row['animal_type'] .' - '. $row['animal_name'] . '<br \/>';\r\n        }\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nNow with the error mode set to Exception the error generated looks like this:\r\nConnected to database\r\nSQLSTATE[42S22]: Column not found: 1054 Unknown column 'username' in 'field list'\r\nNormally we would not show this type of error to the end user, and the exception would be handled perhaps with message saying No Results Found or something vague, but this does show how we can set the error mode as we wish. To set the error mode to Warning should look easy from here.\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** set the error reporting attribute ***\/\r\n    $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_WARNING);\r\n\r\n    \/*** The SQL SELECT statement ***\/\r\n    $sql = \"SELECT username FROM animals\";\r\n    foreach ($dbh->query($sql) as $row)\r\n        {\r\n        print $row['animal_type'] .' - '. $row['animal_name'] . '<br \/>';\r\n        }\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nNow a different error is displayed.\r\nConnected to database\r\n\r\nWarning: PDO::query() [function.PDO-query]: SQLSTATE[42S22]: Column not found: 1054 Unknown column 'username' in 'field list' in \/www\/pdo.php on line 21\r\n\r\nWarning: Invalid argument supplied for foreach() in \/www\/pdo.php on line 21\r\nHere and E_WARNING has been generated and if display_errors is on the error would be seen by an end user. It is hoped that if you are in a production environment this is not the case.\r\nLastly, there is the Silent mode. As the name suggests, this mode silences the errors so no output is sent from the error. However, it does not stop the code at the point of error and any further errors are still sent.\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** set the error reporting attribute ***\/\r\n    $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_SILENT);\r\n\r\n    \/*** The SQL SELECT statement ***\/\r\n    $sql = \"SELECT username FROM animals\";\r\n    foreach ($dbh->query($sql) as $row)\r\n        {\r\n        print $row['animal_type'] .' - '. $row['animal_name'] . '<br \/>';\r\n        }\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nNow we see the script above produces the following output.\r\nConnected to database\r\n\r\nWarning: Invalid argument supplied for foreach() in \/www\/pdo.php on line 21\r\nAs you can see, the error has been silenced, but the following error has not been attended to, and would need further checks to ensure the value passed to the foreach is a valid arguement.\r\nAs we saw with the exception code, the SQLSTATE code was part of the error message. This error code is also available with the PDO::errorCode() method.\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n    }\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n\r\n\/*** an invalide fieldname ***\/\r\n$sql = \"SELECT username FROM animals\";\r\n\r\n\/*** run the query ***\/\r\n$result = $dbh->query($sql);\r\n\r\n\/*** show the error code ***\/\r\necho $dbh->errorCode();\r\n?>\r\nThe code above shows the error code relevant to the SQLSTATE. This is a five character string as defined by the ANSI SQL standard.\r\nConnected to database\r\n42S22\r\nFurther information about an error may be gained from the PDO::errorInfo() method. This returns an array containing the SQLSTATE, the error code, and the error message.\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n    }\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n\/*** an invalid table name ***\/\r\n$sql = \"SELECT animal_id FROM users\";\r\n\r\n\/*** run the query ***\/\r\n$result = $dbh->query($sql);\r\n\r\n\/*** show the error info ***\/\r\nforeach($dbh->errorInfo() as $error)\r\n    {\r\n    echo $error.'<br \/>';\r\n    }\r\n?>\r\nWith this code, the error information looks like this:\r\nConnected to database\r\n42S02\r\n1146\r\nTable 'animals.users' doesn't exist\r\nIf there is no error, the SQLSTATE will be the only value shown, with a value of 00000.\r\nPrepared statements\r\n\r\nWhat is a prepared statement? A prepared statement is a pre-compiled SQL statement that accepts zero or more named parameters. Ok, so thats my attempt at describing what it is, if you have a better description, let us know.\r\nThe SQL is prepared for execution. This is especially useful when using the same statement or query multiple times with different parameters, or field values. The boost in speed is hidden from userland code as the PDO driver allows client and server side caching of the query and meta data. It also helps prevent SQL injection by calling the PDO::quote() method internally.\r\nPDO accepts two kinds of parameter markers.\r\nnamed - :name\r\nquestion mark - ?\r\nYou must choose one or the other, they cannot be mixed.\r\nLets dive in and have a look at how PDO::prepare and PDOStatement::execute work together.\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** set the error reporting attribute ***\/\r\n    $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\r\n\r\n    \/*** some variables ***\/\r\n    $animal_id = 6;\r\n\r\n    $animal_name = 'bruce';\r\n\r\n    \/*** prepare the SQL statement ***\/\r\n    $stmt = $dbh->prepare(\"SELECT * FROM animals WHERE animal_id = :animal_id AND animal_name = :animal_name\");\r\n\r\n    \/*** bind the paramaters ***\/\r\n    $stmt->bindParam(':animal_id', $animal_id, PDO::PARAM_INT);\r\n    $stmt->bindParam(':animal_name', $animal_name, PDO::PARAM_STR, 5);\r\n\r\n    \/*** execute the prepared statement ***\/\r\n    $stmt->execute();\r\n\r\n    \/*** fetch the results ***\/\r\n    $result = $stmt->fetchAll();\r\n\r\n    \/*** loop of the results ***\/\r\n    foreach($result as $row)\r\n        {\r\n        echo $row['animal_id'].'<br \/>';\r\n        echo $row['animal_type'].'<br \/>';\r\n        echo $row['animal_name'];\r\n        }\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nThe above code will produce the following:\r\nConnected to database\r\n6\r\nwallaby\r\nbruce\r\nErrr, what was that?\r\nWhat is this name = :variable business\r\nWhat we have done is bind the variable named $animal_id and $animal_name to the statement. Remember this as many find it difficult to grasp. You are not binding the value of the variable, you are binding the variable itself. Lets change the value of the animal_id after the variable is bound and see what happens..\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** set the error reporting attribute ***\/\r\n    $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\r\n\r\n    \/*** some variables ***\/\r\n    $animal_id = 6;\r\n\r\n    $animal_name = 'bruce';\r\n\r\n    \/*** prepare the SQL statement ***\/\r\n    $stmt = $dbh->prepare(\"SELECT * FROM animals WHERE animal_id = :animal_id AND animal_name = :animal_name\");\r\n\r\n    \/*** bind the paramaters ***\/\r\n    $stmt->bindParam(':animal_id', $animal_id, PDO::PARAM_INT);\r\n    $stmt->bindParam(':animal_name', $animal_name, PDO::PARAM_STR, 5);\r\n\r\n    \/*** reassign the animal_id ***\/\r\n    $animal_id = 3;\r\n\r\n    \/*** execute the prepared statement ***\/\r\n    $stmt->execute();\r\n\r\n    \/*** loop over the results ***\/\r\n    while($row = $stmt->fetch())\r\n        {\r\n        echo $row['animal_id'].'<br \/>';\r\n        echo $row['animal_type'].'<br \/>';\r\n        echo $row['animal_name'];\r\n        }\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# Now see the results have changed\r\n# Connected to database\r\n# 3\r\n# lizard\r\n# bruce\r\n# Because we have bound the variable $animal_id to the $stmt object any change to the value of that varible will be reflected in the statement. This format can be used for both SELECT and INSERT statements. But this is a bit cumbersome for a single query and the above PDO query could have done the job equally as well, so lets run the query multiple times. Ssimply by changing the animal_id and animal_name variables we can run the query over and over without re-writing as it is already 'prepared'.\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** set the error reporting attribute ***\/\r\n    $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\r\n\r\n    \/*** some variables ***\/\r\n    $animal_id = 6;\r\n    $animal_name = 'bruce';\r\n\r\n    \/*** prepare the SQL statement ***\/\r\n    $stmt = $dbh->prepare(\"SELECT * FROM animals WHERE animal_id = :animal_id AND animal_name = :animal_name\");\r\n\r\n    \/*** bind the paramaters ***\/\r\n    $stmt->bindParam(':animal_id', $animal_id, PDO::PARAM_INT);\r\n    $stmt->bindParam(':animal_name', $animal_name, PDO::PARAM_STR, 5);\r\n\r\n    \/*** reassign the animal_id ***\/\r\n    $animal_id = 3;\r\n    $animal_name = 'kevin';\r\n\r\n    \/*** execute the prepared statement ***\/\r\n    $stmt->execute();\r\n\r\n    \/*** loop over the results ***\/\r\n    while($row = $stmt->fetch())\r\n        {\r\n        echo $row['animal_id'].'<br \/>';\r\n        echo $row['animal_type'].'<br \/>';\r\n        echo $row['animal_name'].'<br \/>';\r\n        }\r\n\r\n    \/*** reassign the animal_id ***\/\r\n    $animal_id = 7;\r\n    $animal_name = 'bruce';\r\n\r\n    \/*** execute the prepared statement ***\/\r\n    $stmt->execute();\r\n\r\n    \/*** loop over the results ***\/\r\n    while($row = $stmt->fetch())\r\n        {\r\n        echo $row['animal_id'].'<br \/>';\r\n        echo $row['animal_type'].'<br \/>';\r\n        echo $row['animal_name'].'<br \/>';\r\n        }\r\n\r\n    \/*** reassign the animal_id ***\/\r\n    $animal_id = 4;\r\n    \/*** execute the prepared statement ***\/\r\n    $stmt->execute();\r\n\r\n    \/*** loop over the results ***\/\r\n    while($row = $stmt->fetch())\r\n        {\r\n        echo $row['animal_id'].'<br \/>';\r\n        echo $row['animal_type'].'<br \/>';\r\n        echo $row['animal_name'];\r\n        }\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# Now we have run the query 3 times using the same prepared statement. The results look like this:\r\n# Connected to database\r\n# 7\r\n# wombat\r\n# bruce\r\n# 4\r\n# dingo\r\n# bruce\r\n# The second result set is missing as there is no animal named \\'kevin\\', all Australians are named \\'bruce\\'. Note also in the above code we have changed the loop from foreach and PDOStatement::fetchAll() to a while loop using PDOStatement::fetch()As has been mentioned we can run this over and over, but while it is shorter than coding the query over and over, we can also use an array of values!\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** set the error reporting attribute ***\/\r\n    $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\r\n\r\n    \/*** some variables ***\/\r\n    $data = array('animal_id'=>6, 'animal_name'=>'bruce');\r\n\r\n    \/*** prepare the SQL statement ***\/\r\n    $stmt = $dbh->prepare(\"SELECT * FROM animals WHERE animal_id = :animal_id AND animal_name = :animal_name\");\r\n\r\n    \/*** bind the paramaters ***\/\r\n    $stmt->bindParam(':animal_id', $animal_id, PDO::PARAM_INT);\r\n    $stmt->bindParam(':animal_name', $animal_name, PDO::PARAM_STR, 5);\r\n\r\n    \/*** reassign the variables ***\/\r\n    $data = array('animal_id'=>3, 'animal_name' => 'bruce');\r\n\r\n    \/*** execute the prepared statement ***\/\r\n    $stmt->execute($data);\r\n\r\n    \/*** loop over the results ***\/\r\n    while($row = $stmt->fetch())\r\n        {\r\n        echo $row['animal_id'].'<br \/>';\r\n        echo $row['animal_type'].'<br \/>';\r\n        echo $row['animal_name'].'<br \/>';\r\n        }\r\n\r\n    \/*** reassign the variables again ***\/\r\n    $data = array('animal_id'=>4, 'animal_name' => 'bruce');\r\n\r\n    \/*** execute the prepared statement ***\/\r\n    $stmt->execute($data);\r\n\r\n    \/*** loop over the results ***\/\r\n    while($row = $stmt->fetch())\r\n        {\r\n        echo $row['animal_id'].'<br \/>';\r\n        echo $row['animal_type'].'<br \/>';\r\n        echo $row['animal_name'].'<br \/>';\r\n        }\r\n\r\n    \/*** reassign the variables ***\/\r\n    $data = array('animal_id'=>9, 'animal_name' => 'bruce');\r\n\r\n    \/*** execute the prepared statement ***\/\r\n    $stmt->execute($data);\r\n\r\n    \/*** loop over the results ***\/\r\n    while($row = $stmt->fetch())\r\n        {\r\n        echo $row['animal_id'].'<br \/>';\r\n        echo $row['animal_type'].'<br \/>';\r\n        echo $row['animal_name'];\r\n        }\r\n\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# Transactions\r\n\r\n# At the beginning of this tutorial was saw multiple INSERT statements to set up the initial database. This works fine but is code intensive and with a database like SQLite a problem arises with file locking for each access. The process can be bundled into a single access by using a transaction. Transactions are quite simple and have the benifit of rolling back changes should an error occur, perhaps a system crash.\r\n# A PDO transaction begins with the with PDO::beginTransaction() method. This method turns off auto-commit and any database statements or queries are not committed to the database until the transaction is committed with PDO::commit. When PDO::commit is called, all statements\/queries are enacted and the database connection is returned to auto-commit mode.\r\n# This example shows how we might set up the animals database used in this tutorial.\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\n\/*** database name ***\/\r\n$dbname = 'animals';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=$dbname\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** set the PDO error mode to exception ***\/\r\n    $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\r\n    \/*** begin the transaction ***\/\r\n    $dbh->beginTransaction();\r\n\r\n    \/*** CREATE table statements ***\/\r\n    $table = \"CREATE TABLE animals ( animal_id MEDIUMINT(8) NOT NULL AUTO_INCREMENT PRIMARY KEY,\r\n    animal_type VARCHAR(25) NOT NULL,\r\n    animal_name VARCHAR(25) NOT NULL \r\n    )\";\r\n    $dbh->exec($table);\r\n    \/***  INSERT statements ***\/\r\n    $dbh->exec(\"INSERT INTO animals (animal_type, animal_name) VALUES ('emu', 'bruce')\");\r\n    $dbh->exec(\"INSERT INTO animals (animal_type, animal_name) VALUES ('funnel web', 'bruce')\");\r\n    $dbh->exec(\"INSERT INTO animals (animal_type, animal_name) VALUES ('lizard', 'bruce')\");\r\n    $dbh->exec(\"INSERT INTO animals (animal_type, animal_name) VALUES ('dingo', 'bruce')\");\r\n    $dbh->exec(\"INSERT INTO animals (animal_type, animal_name) VALUES ('kangaroo', 'bruce')\");\r\n    $dbh->exec(\"INSERT INTO animals (animal_type, animal_name) VALUES ('wallaby', 'bruce')\");\r\n    $dbh->exec(\"INSERT INTO animals (animal_type, animal_name) VALUES ('wombat', 'bruce')\");\r\n    $dbh->exec(\"INSERT INTO animals (animal_type, animal_name) VALUES ('koala', 'bruce')\");\r\n    $dbh->exec(\"INSERT INTO animals (animal_type, animal_name) VALUES ('kiwi', 'bruce')\");\r\n\r\n    \/*** commit the transaction ***\/\r\n    $dbh->commit();\r\n\r\n    \/*** echo a message to say the database was created ***\/\r\n    echo 'Data entered successfully<br \/>';\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    \/*** roll back the transaction if we fail ***\/\r\n    $dbh->rollback();\r\n\r\n    \/*** echo the sql statement and error message ***\/\r\n    echo $sql . '<br \/>' . $e->getMessage();\r\n    }\r\n?>\r\n# Get Last Insert Id\r\n\r\n# This is a common task required when you need to get the id of the last INSERT. This is done with PDO::lastInserId() method as shown here.\r\n\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** set the error reporting attribute ***\/\r\n    $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\r\n\r\n    \/*** INSERT a new row ***\/\r\n    $dbh->exec(\"INSERT INTO animals(animal_type, animal_name) VALUES ('galah', 'polly')\");\r\n\r\n    \/*** display the id of the last INSERT ***\/\r\n    echo $dbh->lastInsertId();\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n    }\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# A Global Instance\r\n\r\n# Ever need a global instance of your database connection? Here we achieve this with the use of the Singleton design patern. The goal of a singleton is to ensure the class has only a single instance and provide a global point of access to it. Here we use the getInstance() method to achieve this. A new instance is only created the first time it is accessed and all subsequent accesses are simply returned the existing instance.\r\n\r\n<?php\r\nclass db{\r\n\r\n\/*** Declare instance ***\/\r\nprivate static $instance = NULL;\r\n\r\n\/**\r\n*\r\n* the constructor is set to private so\r\n* so nobody can create a new instance using new\r\n*\r\n*\/\r\nprivate function __construct() {\r\n  \/*** maybe set the db name here later ***\/\r\n}\r\n\r\n\/**\r\n*\r\n* Return DB instance or create intitial connection\r\n*\r\n* @return object (PDO)\r\n*\r\n* @access public\r\n*\r\n*\/\r\npublic static function getInstance() {\r\n\r\nif (!self::$instance)\r\n    {\r\n    self::$instance = new PDO(\"mysql:host='localhost';dbname='animals'\", 'username', 'password');;\r\n    self::$instance-> setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\r\n    }\r\nreturn self::$instance;\r\n}\r\n\r\n\/**\r\n*\r\n* Like the constructor, we make __clone private\r\n* so nobody can clone the instance\r\n*\r\n*\/\r\nprivate function __clone(){\r\n}\r\n\r\n} \/*** end of class ***\/\r\n\r\ntry    {\r\n    \/*** query the database ***\/\r\n    $result = DB::getInstance()->query(\"SELECT * FROM animals\");\r\n\r\n    \/*** loop over the results ***\/\r\n    foreach($result as $row)\r\n        {\r\n        print $row['animal_type'] .' - '. $row['animal_name'] . '<br \/>';\r\n        }\r\n    }\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# The above code will produce a result like this:\r\n# emu - bruce\r\n# funnel web - bruce\r\n# lizard - bruce\r\n# dingo - bruce\r\n# kangaroo - bruce\r\n# wallaby - bruce\r\n# wombat - bruce\r\n# koala - bruce\r\n# This method of access saves the overhead created when a new instance of an object is called each time it is referenced, so you have have few references to it. Also, if you wish to pass the objects state from one reference to another there is no need to create from the initial state.\r\n# Note that the constructor and clone methods have been made private to ensure that an instance of the class cannot be instantiated or cloned.\r\n# Conclusions.\r\n# \r\n# If you have got this far you will have seen how to create a connection, prepare a statement and exceute, and to bind Params using bindParam(). This is what most folks will be using to begin with and shows the effectiveness of using PDO to make code more portable. We highly recommend you visit http:\/\/www.php.net\/manual\/en\/ref.pdo.php and read up on all that PDO has to offer.\r\n",
        "3":"# What is PDO.\r\n# \r\n# PDO is a PHP extension to formalise PHP's database connections by creating a uniform interface. This allows developers to create code which is portable across many databases and platforms. PDO is _not_ just another abstraction layer like PearDB although PearDB may use PDO as a backend. Those of you familiar with Perls DBI may find the syntax disturbingly familiar.\r\n# Note: Your must read the section on Error Handling to benifit from this tutorial\r\n# \r\n# During this tutorial we will be using a database called animals, which, as you might have guessed, is a database of animals, genius! The animals table is described here.\r\n# CREATE TABLE animals ( animal_id MEDIUMINT(8) NOT NULL AUTO_INCREMENT PRIMARY KEY,\r\n# animal_type VARCHAR(25) NOT NULL,\r\n# animal_name VARCHAR(25) NOT NULL \r\n# ) ENGINE = MYISAM ;\r\n# \r\n# INSERT INTO `animals` (`animal_id`, `animal_type`, `animal_name`) VALUES\r\n# (1, 'kookaburra', 'bruce'),\r\n# (2, 'emu', 'bruce'),\r\n# (3, 'goanna', 'bruce'),\r\n# (4, 'dingo', 'bruce'),\r\n# (5, 'kangaroo', 'bruce'),\r\n# (6, 'wallaby', 'bruce'),\r\n# (7, 'wombat', 'bruce'),\r\n# (8, 'koala', 'bruce');\r\n# What databases does PDO support?\r\n# \r\n# PDO supports many of the popular databases as seen on the list below.\r\n# DBLIB: FreeTDS \/ Microsoft SQL Server \/ Sybase\r\n# Firebird (http:\/\/firebird.sourceforge.net\/): Firebird\/Interbase 6\r\n# IBM (IBM DB2)\r\n# INFORMIX - IBM Informix Dynamic Server\r\n# MYSQL (http:\/\/www.mysql.com\/): MySQL 3.x\/4.0\r\n# OCI (http:\/\/www.oracle.com): Oracle Call Interface\r\n# ODBC: ODBC v3 (IBM DB2 and unixODBC)\r\n# PGSQL (http:\/\/www.postgresql.org\/): PostgreSQL\r\n# SQLITE (http:\/\/sqlite.org\/): SQLite 3.x\r\n# To see if the PDO driver is available for your database, check phpinfo() and you should have a section named PDO and another pdo_mysql or pdo_sqlite depending on your choice of database. You may also check the available drivers with the static method PDO::getAvailableDrivers().\r\n# \r\n<?php\r\nforeach(PDO::getAvailableDrivers() as $driver)\r\n    {\r\n    echo $driver.'<br \/>';\r\n    }\r\n?>\r\n# To enable PDO simply configure --enable-pdo and --with-pdo_sqlite --with_pdo_mysql or whatever database needs supporting by PDO.\r\n# Windows users will need to un-comment the appropriate line in php.ini and restart the web server.\r\n# Where do I begin?\r\n# \r\n# If you are reading this you are more than likely to have connected to a database using PHP before using a database specific function such as mysql_connect() or pg_connect or, for the truely evolved coder, SQLite. To use PDO with your database you need to have the correct PDO driver installed for it. For the SQLite PDO driver you need to configure PHP --with-pdo-sqlite. If you are using a RPM based system there are pdo-sqlite.rpm's available. Before we go any further, lets connect to a database and see what all the fuss is about.\r\n# Connect to a database\r\n# \r\n# Every interaction with a database begins with a connection. Regardless of the database you use, you must connect first and establish a database handler. After connecting you your database of choice, much of the PDO methods are similar. This is why PDO is such a powerful and useful tool for PHP. Here we show how to connect to various databases and establish a database handler object that we can use for further interaction with the database.\r\n# Connect with PgSQL\r\n\r\n# As mentioned above, you may have previously tried to connect to a PgSQL database using pg_connect. Here we connect with PDO.\r\n<?php\r\ntry {\r\n    $db = new PDO(\"pgsql:dbname=pdo;host=localhost\", \"username\", \"password\" );\r\n    echo \"PDO connection object created\";\r\n    }\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# So that was a bit of a no-brainer to start with, we see the use of \"new\" to create the PDO object followed by the database type username and password. This should be familiar to most people who have connected to a database before using traditional methods.. As we have used try{} and catch(){} we see upon failure that an exception is thrown with the error message \"could not find driver\". This tells us the PDO_PGSQL driver is not present and needs to be loaded. As noted, an exception is thrown. PDO can handle errors in several ways, more on this later.\r\n# How did it connect to the database?\r\n# The database connection is handled internally by PDO's __construct() and this represents our database connection.\r\n# Lets see what happens if we try to connect to database as we did above without catching the exception and see what happens..\r\n<?php\r\n $db = new PDO(\"pgsql:dbname=no_database;host=localhost\", \"username\", \"password\" );\r\n?>\r\n# From the above snippet you will get a result something like this below\r\n# Fatal error: Uncaught exception 'PDOException' with message 'could not find driver' in \/www\/pdo.php:2 Stack trace: #0 \/www\/pdo.php(2): PDO->__construct('pgsql:dbname=pd...', 'username', 'password') #1 {main} thrown in \/www\/pdo.php on line 2\r\n# This is the default behaviour when an exception is not caught, a backtrace is generated and the script is terminated. As you can see, all the information is dumped including the file path and the database username and password. It is the responsibility of the coder to catch exceptions or to deal with the errors using set_exception_handler() function to prevent this happening. More about handling errors and exceptions later.\r\n# Connect to SQLite\r\n# When PDO is used with SQLite, database creation becomes even easier. Simply specify the path to the database file and it will be loaded. If the database file does not exist, PDO will attempt to create it. Lets see how we go with the same code but change the database to SQLite.\r\n<?php\r\ntry {\r\n    \/*** connect to SQLite database ***\/\r\n    $dbh = new PDO(\"sqlite:\/path\/to\/database.sdb\");\r\n    }\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# Because the database path does not exist and cannot be created, an exception is thrown, the exception is caught in the catch block and the error message is displayed with $e->Message(). Now that we know how to create a database, we can create tables and INSERT some data.\r\n# Another feature of SQLite is the ability to create tables in memory. This can be amazingly helpful if you wish to create tempory databases or tables or even for development code.\r\n<?php\r\ntry {\r\n    \/*** connect to SQLite database ***\/\r\n    $db = new PDO(\"sqlite::memory\");\r\n\r\n    \/*** a little message to say we did it ***\/\r\n    echo 'database created in memory';\r\n    }\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# We see above that a database is created in memory and a message is displayed to let us know. If the creation of the database failed, a PDO exception would be thrown and the script terminated at that point, passing control to the catch block.\r\n# Connect to MySQL\r\n# \r\n# MySQL is the choice of many web developers and will be used as the database of choice for much of this tutorial. Here we see how to connect to a MySQL database.\r\n\r\n<?php\r\n\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=mysql\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database';\r\n    }\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# Connect to Firebird\r\n# Often used by developers using windows, Firebird is a good database and connection is just as simple as the examples above.\r\n<?php\r\ntry {\r\n    $dbh = new PDO(\"firebird:dbname=localhost:C:\\Programs\\Firebird\\DATABASE.FDB\", \"SYSDBA\", \"masterkey\");\r\n    }   \r\ncatch (PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# Connect to Informix\r\n#Informix is popular with many windows users also, this example shows how to connect to an informix database cataloged as InformixDB in odbc.ini:\r\n<?php\r\ntry {\r\n    $dbh = new PDO(\"informix:DSN=InformixDB\", \"username\", \"password\");\r\n    }\r\ncatch (PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# Connect to Oracle\r\n\r\n# The Oracle database is used by many 'enterprise' companies but these days there are sleeker options. Lets see a simple connection to Oracle\r\n<?php\r\ntry {\r\n    $dbh = new PDO(\"OCI:\", \"username\", \"password\")\r\n    }\r\ncatch (PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# This works fine for a simple Oracle connection. The oracle driver may take two optional parameters, The database name, and the character set. To connect with a database name of \"accounts\" and a charset of UTF-8 the following code should be used.\r\n<?php\r\ntry {\r\n    $dbh = new PDO(\"OCI:dbname=accounts;charset=UTF-8\", \"username\", \"password\");\r\n    }\r\ncatch (PDOException $e)\r\n    {     echo $e->getMessage();     } ?>\r\n# Connect to ODBC\r\n\r\n# There are many connections ODBC can create, here we show how to connect to a MS Access database named accounts. The specified path is c:\\\\accounts.mdb.\r\n<?php\r\ntry {\r\n    $dbh = new PDO(\"odbc:Driver={Microsoft Access Driver (*.mdb)};Dbq=C:\\accounts.mdb;Uid=Admin\");\r\n    }\r\ncatch (PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    } \r\n?>\r\n# Connect to DBLIB\r\n\r\n# Once again a Windows specific database, DBLIB can be used as follows\r\n<?php\r\ntry {\r\n    $hostname = \"localhost\";\r\n    $port     = 10060;\r\n    $dbname   = \"my_database\";\r\n    $username = \"username\";\r\n    $password = \"password\";\r\n\r\n    $dbh = new PDO (\"dblib:host=$hostname:$port;dbname=$dbname\",\"$username\",\"$password\");\r\n    }\r\ncatch (PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# Connect to IBM\r\n\r\n# This example shows connecting to an IBM DB2 database named accounts\r\n<?php\r\ntry {\r\n    $db = new PDO(\"ibm:DRIVER={IBM DB2 ODBC DRIVER};DATABASE=accounts; HOSTNAME=1.2.3,4;PORT=56789;PROTOCOL=TCPIP;\", \"username\", \"password\");\r\n    }\r\ncatch (PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# Close a Database Connection\r\n\r\n# Up to this point we have seen how to connect to a database using PDO. But of course, we also need to disconnect when we have finished. To close the connection the object needs to be destroyed so that no reference to it remains. This is normally done at the end of a script where PHP will automatically close the connection. However, the connection may be close implicitly by assigning the value of null to the object as seen below.\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=mysql\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database';\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n    }\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# If the database connection fails, the code to assign a null value is never called as the exception throws control to the catch block.\r\n# PDO Query\r\n\r\n# Now that we can open and close a connection to the database with PDO, we can make use of it for what databases are made for, storing and retrieving information. The simplest form of query is the PDO query method. As the name suggests, this is used to perform database queries. Before we begin to query a database, lets create a small database with a table for animals. This will be a MySQL database for use throughout much of this tutorial. Remember, because PDO provides a common set of tools for databases, once we have the correct connection, the rest of the code is the same, regardless of the database you choose. When using PDO to query a database, the function used to do so depends on the statement you wish to send to the database. Below we will see three queries on how to INSERT, SELECT and UPDATE.\r\n# INSERT\r\n\r\nTo gather information from a database, we first need to put some info into it. We use the same code from above to connect and disconnect from the database and the INSERT query is accomplished using the PDO::exec method.\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** INSERT data ***\/\r\n    $count = $dbh->exec(\"INSERT INTO animals(animal_type, animal_name) VALUES ('kiwi', 'troy')\");\r\n\r\n    \/*** echo the number of affected rows ***\/\r\n    echo $count;\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n    }\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nThe output of the script above will look like this:\r\nConnected to database\r\n1\r\nThis shows us that we connected successfully to the database and then we have displayed the number of affected rows. PDO::exec returns the number of affected rows if successful, or zero (0) if no rows are affected. This may cause issues if you are checking for a boolean value and why it is recommended using === when to check for type also, as zero (0) may evaluate to boolean FALSE.\r\nThe PDO::exec method should be used for SQL statements that do not return a result set. We could use this same method to INSERT many more animals to our database, but a more effecient method would be to use a transaction. This is covered in the section on Transactions.\r\nSELECT\r\n\r\nUnlike PDO::exec the PDO::query method returns a result set, that is, a group of information from the database in the form of a PDOStatement object. Our database should look a little like the example in the What is PDO section. Using this we can SELECT information.\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** The SQL SELECT statement ***\/\r\n    $sql = \"SELECT * FROM animals\";\r\n    foreach ($dbh->query($sql) as $row)\r\n        {\r\n        print $row['animal_type'] .' - '. $row['animal_name'] . '<br \/>';\r\n        }\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nFrom the script above, we can expect the results to look like this:\r\nConnected to database\r\nemu - bruce\r\nfunnel web - bruce\r\nlizard - bruce\r\ndingo - bruce\r\nkangaroo - bruce\r\nwallaby - bruce\r\nwombat - bruce\r\nkoala - bruce\r\nkiwi - troy\r\nYou will have noticed that we can iterate over the result set directly with foreach. This is because internally the PDO statement implements the SPL traversble iterator, thus giving all the benifits of using SPL. For more on SPL refer to the Introduction to SPL page. The greatest benifit of this is that SPL iterators know only one element at a time and thus large result sets become manageable without hogging memory.\r\nUPDATE\r\n\r\nTo update a field in a database with PDO we once again use the PDO::exec method in the same manner as we did with the INSERT\r\n<?php\r\n\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** INSERT data ***\/\r\n    $count = $dbh->exec(\"UPDATE animals SET animal_name='bruce' WHERE animal_name='troy'\");\r\n\r\n    \/*** echo the number of affected rows ***\/\r\n    echo $count;\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n    }\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nOnce again we see that the connection is made to the database and one row is affected as now the kiwi has become a true Australian like the rest of the creatures. PDO::exec should be used for all database queries where no result set is required.\r\nFETCH Modes\r\n\r\nThe section above showed how using PDO::query we can fetch information from the database. The PDO::query method returns a PDOStatement object that can be utilized in much the same was as mysql_fetch_object() or pg_fetch_object(). Of course there are times when an numerical index is needed or an associative index. PDO::query provides for this also by allowing the coder to set the fetch mode for via the PDOStatement object or via PDOStatement::setFetchMode().\r\nFETCH ASSOC\r\n\r\nTo fetch an associative array from our results the constant PDO::FETCH_ASSOC is used and returns the column names as indexes or keys of the resulting array.\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** The SQL SELECT statement ***\/\r\n    $sql = \"SELECT * FROM animals\";\r\n\r\n    \/*** fetch into an PDOStatement object ***\/\r\n    $stmt = $dbh->query($sql);\r\n\r\n    \/*** echo number of columns ***\/\r\n    $result = $stmt->fetch(PDO::FETCH_ASSOC);\r\n\r\n    \/*** loop over the object directly ***\/\r\n    foreach($result as $key=>$val)\r\n    {\r\n    echo $key.' - '.$val.'<br \/>';\r\n    }\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nThe above code will give a result like this:\r\nConnected to database\r\nanimal_id - 1\r\nanimal_type - emu\r\nanimal_name - bruce\r\nPDO has returned the results as a PDOStatement object that we can iterate over directly. The resulting indexes are the names of the fields within the animals database.\r\nFETCH NUM\r\n\r\nLike PDO::FETCH_ASSOC, the PDO::FETCH_NUM produces a numerical index of the result set rather than the field names.\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** The SQL SELECT statement ***\/\r\n    $sql = \"SELECT * FROM animals\";\r\n\r\n    \/*** fetch into an PDOStatement object ***\/\r\n    $stmt = $dbh->query($sql);\r\n\r\n    \/*** echo number of columns ***\/\r\n    $result = $stmt->fetch(PDO::FETCH_NUM);\r\n\r\n    \/*** loop over the object directly ***\/\r\n    foreach($result as $key=>$val)\r\n    {\r\n    echo $key.' - '.$val.'<br \/>';\r\n    }\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nThe above code will give a result like this:\r\nConnected to database\r\n0 - 1\r\n1 - emu\r\n2 - bruce\r\nAs you can see above the indexes are now numeric in the result set\r\nFETCH BOTH\r\n\r\nThere may be times you need to fetch both numerical and associative indexes. PDO::FETCH_BOTH produces a numerical and associative index of the result set so you can use either, or both.\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** The SQL SELECT statement ***\/\r\n    $sql = \"SELECT * FROM animals\";\r\n\r\n    \/*** fetch into an PDOStatement object ***\/\r\n    $stmt = $dbh->query($sql);\r\n\r\n    \/*** echo number of columns ***\/\r\n    $result = $stmt->fetch(PDO::FETCH_BOTH);\r\n\r\n    \/*** loop over the object directly ***\/\r\n    foreach($result as $key=>$val)\r\n    {\r\n    echo $key.' - '.$val.'<br \/>';\r\n    }\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nNow we see the results have included both indexes.\r\nConnected to database\r\nanimal_id - 1\r\n0 - 1\r\nanimal_type - emu\r\n1 - emu\r\nanimal_name - bruce\r\n2 - bruce\r\nFETCH OBJECT\r\n\r\nThis little gem takes the result set and returns it as an anonymous object or stdClass and maps the field names from the database as object properties with the values the values of stored in the database.\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** The SQL SELECT statement ***\/\r\n    $sql = \"SELECT * FROM animals\";\r\n\r\n    \/*** fetch into an PDOStatement object ***\/\r\n    $stmt = $dbh->query($sql);\r\n\r\n    \/*** echo number of columns ***\/\r\n    $obj = $stmt->fetch(PDO::FETCH_OBJ);\r\n\r\n    \/*** loop over the object directly ***\/\r\n    echo $obj->animal_id.'<br \/>';\r\n    echo $obj->animal_type.'<br \/>';\r\n    echo $obj->animal_name;\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nThe above code gives the results like this:\r\nConnected to database\r\n1\r\nemu\r\nbruce\r\nThe use of the field names as class properties makes integrating results into an Object Oriented envioronment simple.\r\nFETCH LAZY\r\n\r\nPDO::FETCH_LAZY is odd as it combines PDO::FETCH_BOTH and PDO::FETCH_OBJ. I am unsure why you would want to do this, but it must have been important enough for somebody to create it. The code below is that of PDO::FETCH_BOTH and is reproduced here for examples sake.\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** The SQL SELECT statement ***\/\r\n    $sql = \"SELECT * FROM animals\";\r\n\r\n    \/*** fetch into an PDOStatement object ***\/\r\n    $stmt = $dbh->query($sql);\r\n\r\n    \/*** echo number of columns ***\/\r\n    $result = $stmt->fetch(PDO::FETCH_BOTH);\r\n\r\n    \/*** loop over the object directly ***\/\r\n    foreach($result as $key=>$val)\r\n    {\r\n    echo $key.' - '.$val.'<br \/>';\r\n    }\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nThe above code will give a result the same as that of PDO::FETCH_BOTH. Genius!\r\nFETCH CLASS\r\n\r\nPDO::FETCH_CLASS instantiates a new instance of the specified class. The field names are mapped to properties (variables) within the class called. This saves quite a bit of code and speed is enhanced as the mappings are dealt with internally.\r\n<?php\r\nclass animals{\r\n\r\npublic $animal_id;\r\n\r\npublic $animal_type;\r\n\r\npublic $animal_name;\r\n\r\n\/***\r\n *\r\n * @capitalize first words\r\n *\r\n * @access public\r\n *\r\n * @return string\r\n *\r\n *\/\r\npublic function capitalizeType(){\r\n return ucwords($this->animal_type);\r\n}\r\n\r\n} \/*** end of class ***\/\r\n\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** The SQL SELECT statement ***\/\r\n    $sql = \"SELECT * FROM animals\";\r\n\r\n    \/*** fetch into an PDOStatement object ***\/\r\n    $stmt = $dbh->query($sql);\r\n\r\n    \/*** fetch into the animals class ***\/\r\n    $obj = $stmt->fetchALL(PDO::FETCH_CLASS, 'animals');\r\n\r\n    \/*** loop of the object directly ***\/\r\n    foreach($obj as $animals)\r\n        {\r\n        \/*** call the capitalizeType method ***\/\r\n        echo $animals->capitalizeType().'<br \/>';\r\n        } \r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nThe code above produces a list of animal types, with the first letter capitalized like this:\r\nConnected to database\r\nEmu\r\nFunnel Web\r\nLizard\r\nDingo\r\nKangaroo\r\nWallaby\r\nWombat\r\nKoala\r\nKiwi\r\nThe PDO::FETCH_CLASS constant has fetched the results directly into the animals class where we were able to directly manipulate the results, nifty.\r\nPDO provides an alternative to PDO::fetch and PDO::FETCH_CLASS. PDOStatement::fetchObject() will bundle them together to give the same result as shown here.\r\n<?php\r\nclass animals{\r\n\r\npublic $animal_id;\r\n\r\npublic $animal_type;\r\n\r\npublic $animal_name;\r\n\r\n\/***\r\n *\r\n * @capitalize first words\r\n *\r\n * @access public\r\n *\r\n * @return string\r\n *\r\n *\/\r\npublic function capitalizeType(){\r\n return ucwords($this->animal_type);\r\n}\r\n\r\n} \/*** end of class ***\/\r\n\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** The SQL SELECT statement ***\/\r\n    $sql = \"SELECT * FROM animals\";\r\n\r\n    \/*** fetch into an PDOStatement object ***\/\r\n    $stmt = $dbh->query($sql);\r\n\r\n    \/*** fetch into the animals class ***\/\r\n    $animals = $stmt->fetchObject('animals');\r\n\r\n    \/*** echo the class properties ***\/\r\n    echo $animals->animal_id.'<br \/>';\r\n    echo $animals->capitalizeType().'<br \/>';\r\n    echo $animals->animal_name;\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nThe above code gives the results like this:\r\nConnected to database\r\n1\r\nEmu\r\nbruce\r\nNote that we have called the animals::capitalizeType() method to show that we are in fact working with an instance of the animals class. PDO::fetchObject() will also work as a substitute for PDO::FETCH_OBJ.\r\nFETCH INTO\r\n\r\nThe PDO::FETCH_INTO constant allows us to fetch the data into an existing instance of a class. Like PDO::FETCH_CLASS the field names are mapped to the class properties. With this in mind, we should be able to replicate the behaviour of PDO::FETCH_CLASS by instantiating the new object when setting the fetch mode. In this instance, the fetch mode is set using PDO::setFetchMode() method.\r\n<?php\r\nclass animals{\r\n\r\npublic $animal_id;\r\n\r\npublic $animal_type;\r\n\r\npublic $animal_name;\r\n\r\n\r\npublic function capitalizeType(){\r\n return ucwords($this->animal_type);\r\n}\r\n\r\n} \/*** end of class ***\/\r\n\r\n\/*** instantiate a new animals instance ***\/\r\n$animals = new animals;\r\n\r\n$animals->animal_id = 10;\r\n\r\n$animals->animal_type = 'crocodile';\r\n\r\n$animals->animal_name = 'bruce';\r\n\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** The SQL SELECT statement ***\/\r\n    $sql = \"SELECT * FROM animals\";\r\n\r\n    \/*** fetch into an PDOStatement object ***\/\r\n    $stmt = $dbh->query($sql);\r\n\r\n    \/*** set the fetch mode with PDO::setFetchMode() ***\/\r\n    $stmt->setFetchMode(PDO::FETCH_INTO, new animals);\r\n\r\n    \/*** loop over the PDOStatement directly ***\/\r\n    foreach($stmt as $animals)\r\n    {\r\n    echo $animals->capitalizeType().'<br \/>';\r\n    } \r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nOnce again, the above code produces a list of animal types, with the first letter capitalized like this:\r\nConnected to database\r\nEmu\r\nFunnel Web\r\nLizard\r\nDingo\r\nKangaroo\r\nWallaby\r\nWombat\r\nKoala\r\nKiwi\r\nError Handling\r\n\r\nPDO error handling is comes in several flavours. Previously in this tutorial we have have only used the simplest of try{} catch(){} blocks to catch an error in the database connection, but what of other errors? perhaps a field name does not exist? Lets see how we go with a simple error with the previous code.\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** The SQL SELECT statement with incorrect fieldname ***\/\r\n    $sql = \"SELECT username FROM animals\";\r\n\r\n    foreach ($dbh->query($sql) as $row)\r\n        {\r\n        print $row['animal_type'] .' - '. $row['animal_name'] . '<br \/>';\r\n        }\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nThe above script will produce an error such as this:\r\nConnected to database\r\n\r\nWarning: Invalid argument supplied for foreach() in \/www\/pdo.php on line 18\r\nThis is because there is no error handling. The SELECT statement has a field name 'username' which does not exist and an error is generated by the database. The only default error handling is done with the initial connection. Unless we deal with the error, we have a problem with displaying full path to the world. To deal with this we need to set an attribute to the type of error handling we wish to utilize. The types of error handling are\r\nException\r\nWarning\r\nSilent\r\nLets begin with exception as we have the try{} catch(){} blocks in place already.\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** set the error reporting attribute ***\/\r\n    $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\r\n\r\n    \/*** The SQL SELECT statement ***\/\r\n    $sql = \"SELECT username FROM animals\";\r\n    foreach ($dbh->query($sql) as $row)\r\n        {\r\n        print $row['animal_type'] .' - '. $row['animal_name'] . '<br \/>';\r\n        }\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nNow with the error mode set to Exception the error generated looks like this:\r\nConnected to database\r\nSQLSTATE[42S22]: Column not found: 1054 Unknown column 'username' in 'field list'\r\nNormally we would not show this type of error to the end user, and the exception would be handled perhaps with message saying No Results Found or something vague, but this does show how we can set the error mode as we wish. To set the error mode to Warning should look easy from here.\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** set the error reporting attribute ***\/\r\n    $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_WARNING);\r\n\r\n    \/*** The SQL SELECT statement ***\/\r\n    $sql = \"SELECT username FROM animals\";\r\n    foreach ($dbh->query($sql) as $row)\r\n        {\r\n        print $row['animal_type'] .' - '. $row['animal_name'] . '<br \/>';\r\n        }\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nNow a different error is displayed.\r\nConnected to database\r\n\r\nWarning: PDO::query() [function.PDO-query]: SQLSTATE[42S22]: Column not found: 1054 Unknown column 'username' in 'field list' in \/www\/pdo.php on line 21\r\n\r\nWarning: Invalid argument supplied for foreach() in \/www\/pdo.php on line 21\r\nHere and E_WARNING has been generated and if display_errors is on the error would be seen by an end user. It is hoped that if you are in a production environment this is not the case.\r\nLastly, there is the Silent mode. As the name suggests, this mode silences the errors so no output is sent from the error. However, it does not stop the code at the point of error and any further errors are still sent.\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** set the error reporting attribute ***\/\r\n    $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_SILENT);\r\n\r\n    \/*** The SQL SELECT statement ***\/\r\n    $sql = \"SELECT username FROM animals\";\r\n    foreach ($dbh->query($sql) as $row)\r\n        {\r\n        print $row['animal_type'] .' - '. $row['animal_name'] . '<br \/>';\r\n        }\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nNow we see the script above produces the following output.\r\nConnected to database\r\n\r\nWarning: Invalid argument supplied for foreach() in \/www\/pdo.php on line 21\r\nAs you can see, the error has been silenced, but the following error has not been attended to, and would need further checks to ensure the value passed to the foreach is a valid arguement.\r\nAs we saw with the exception code, the SQLSTATE code was part of the error message. This error code is also available with the PDO::errorCode() method.\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n    }\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n\r\n\/*** an invalide fieldname ***\/\r\n$sql = \"SELECT username FROM animals\";\r\n\r\n\/*** run the query ***\/\r\n$result = $dbh->query($sql);\r\n\r\n\/*** show the error code ***\/\r\necho $dbh->errorCode();\r\n?>\r\nThe code above shows the error code relevant to the SQLSTATE. This is a five character string as defined by the ANSI SQL standard.\r\nConnected to database\r\n42S22\r\nFurther information about an error may be gained from the PDO::errorInfo() method. This returns an array containing the SQLSTATE, the error code, and the error message.\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n    }\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n\/*** an invalid table name ***\/\r\n$sql = \"SELECT animal_id FROM users\";\r\n\r\n\/*** run the query ***\/\r\n$result = $dbh->query($sql);\r\n\r\n\/*** show the error info ***\/\r\nforeach($dbh->errorInfo() as $error)\r\n    {\r\n    echo $error.'<br \/>';\r\n    }\r\n?>\r\nWith this code, the error information looks like this:\r\nConnected to database\r\n42S02\r\n1146\r\nTable 'animals.users' doesn't exist\r\nIf there is no error, the SQLSTATE will be the only value shown, with a value of 00000.\r\nPrepared statements\r\n\r\nWhat is a prepared statement? A prepared statement is a pre-compiled SQL statement that accepts zero or more named parameters. Ok, so thats my attempt at describing what it is, if you have a better description, let us know.\r\nThe SQL is prepared for execution. This is especially useful when using the same statement or query multiple times with different parameters, or field values. The boost in speed is hidden from userland code as the PDO driver allows client and server side caching of the query and meta data. It also helps prevent SQL injection by calling the PDO::quote() method internally.\r\nPDO accepts two kinds of parameter markers.\r\nnamed - :name\r\nquestion mark - ?\r\nYou must choose one or the other, they cannot be mixed.\r\nLets dive in and have a look at how PDO::prepare and PDOStatement::execute work together.\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** set the error reporting attribute ***\/\r\n    $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\r\n\r\n    \/*** some variables ***\/\r\n    $animal_id = 6;\r\n\r\n    $animal_name = 'bruce';\r\n\r\n    \/*** prepare the SQL statement ***\/\r\n    $stmt = $dbh->prepare(\"SELECT * FROM animals WHERE animal_id = :animal_id AND animal_name = :animal_name\");\r\n\r\n    \/*** bind the paramaters ***\/\r\n    $stmt->bindParam(':animal_id', $animal_id, PDO::PARAM_INT);\r\n    $stmt->bindParam(':animal_name', $animal_name, PDO::PARAM_STR, 5);\r\n\r\n    \/*** execute the prepared statement ***\/\r\n    $stmt->execute();\r\n\r\n    \/*** fetch the results ***\/\r\n    $result = $stmt->fetchAll();\r\n\r\n    \/*** loop of the results ***\/\r\n    foreach($result as $row)\r\n        {\r\n        echo $row['animal_id'].'<br \/>';\r\n        echo $row['animal_type'].'<br \/>';\r\n        echo $row['animal_name'];\r\n        }\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nThe above code will produce the following:\r\nConnected to database\r\n6\r\nwallaby\r\nbruce\r\nErrr, what was that?\r\nWhat is this name = :variable business\r\nWhat we have done is bind the variable named $animal_id and $animal_name to the statement. Remember this as many find it difficult to grasp. You are not binding the value of the variable, you are binding the variable itself. Lets change the value of the animal_id after the variable is bound and see what happens..\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** set the error reporting attribute ***\/\r\n    $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\r\n\r\n    \/*** some variables ***\/\r\n    $animal_id = 6;\r\n\r\n    $animal_name = 'bruce';\r\n\r\n    \/*** prepare the SQL statement ***\/\r\n    $stmt = $dbh->prepare(\"SELECT * FROM animals WHERE animal_id = :animal_id AND animal_name = :animal_name\");\r\n\r\n    \/*** bind the paramaters ***\/\r\n    $stmt->bindParam(':animal_id', $animal_id, PDO::PARAM_INT);\r\n    $stmt->bindParam(':animal_name', $animal_name, PDO::PARAM_STR, 5);\r\n\r\n    \/*** reassign the animal_id ***\/\r\n    $animal_id = 3;\r\n\r\n    \/*** execute the prepared statement ***\/\r\n    $stmt->execute();\r\n\r\n    \/*** loop over the results ***\/\r\n    while($row = $stmt->fetch())\r\n        {\r\n        echo $row['animal_id'].'<br \/>';\r\n        echo $row['animal_type'].'<br \/>';\r\n        echo $row['animal_name'];\r\n        }\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# Now see the results have changed\r\n# Connected to database\r\n# 3\r\n# lizard\r\n# bruce\r\n# Because we have bound the variable $animal_id to the $stmt object any change to the value of that varible will be reflected in the statement. This format can be used for both SELECT and INSERT statements. But this is a bit cumbersome for a single query and the above PDO query could have done the job equally as well, so lets run the query multiple times. Ssimply by changing the animal_id and animal_name variables we can run the query over and over without re-writing as it is already 'prepared'.\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** set the error reporting attribute ***\/\r\n    $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\r\n\r\n    \/*** some variables ***\/\r\n    $animal_id = 6;\r\n    $animal_name = 'bruce';\r\n\r\n    \/*** prepare the SQL statement ***\/\r\n    $stmt = $dbh->prepare(\"SELECT * FROM animals WHERE animal_id = :animal_id AND animal_name = :animal_name\");\r\n\r\n    \/*** bind the paramaters ***\/\r\n    $stmt->bindParam(':animal_id', $animal_id, PDO::PARAM_INT);\r\n    $stmt->bindParam(':animal_name', $animal_name, PDO::PARAM_STR, 5);\r\n\r\n    \/*** reassign the animal_id ***\/\r\n    $animal_id = 3;\r\n    $animal_name = 'kevin';\r\n\r\n    \/*** execute the prepared statement ***\/\r\n    $stmt->execute();\r\n\r\n    \/*** loop over the results ***\/\r\n    while($row = $stmt->fetch())\r\n        {\r\n        echo $row['animal_id'].'<br \/>';\r\n        echo $row['animal_type'].'<br \/>';\r\n        echo $row['animal_name'].'<br \/>';\r\n        }\r\n\r\n    \/*** reassign the animal_id ***\/\r\n    $animal_id = 7;\r\n    $animal_name = 'bruce';\r\n\r\n    \/*** execute the prepared statement ***\/\r\n    $stmt->execute();\r\n\r\n    \/*** loop over the results ***\/\r\n    while($row = $stmt->fetch())\r\n        {\r\n        echo $row['animal_id'].'<br \/>';\r\n        echo $row['animal_type'].'<br \/>';\r\n        echo $row['animal_name'].'<br \/>';\r\n        }\r\n\r\n    \/*** reassign the animal_id ***\/\r\n    $animal_id = 4;\r\n    \/*** execute the prepared statement ***\/\r\n    $stmt->execute();\r\n\r\n    \/*** loop over the results ***\/\r\n    while($row = $stmt->fetch())\r\n        {\r\n        echo $row['animal_id'].'<br \/>';\r\n        echo $row['animal_type'].'<br \/>';\r\n        echo $row['animal_name'];\r\n        }\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# Now we have run the query 3 times using the same prepared statement. The results look like this:\r\n# Connected to database\r\n# 7\r\n# wombat\r\n# bruce\r\n# 4\r\n# dingo\r\n# bruce\r\n# The second result set is missing as there is no animal named \\'kevin\\', all Australians are named \\'bruce\\'. Note also in the above code we have changed the loop from foreach and PDOStatement::fetchAll() to a while loop using PDOStatement::fetch()As has been mentioned we can run this over and over, but while it is shorter than coding the query over and over, we can also use an array of values!\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** set the error reporting attribute ***\/\r\n    $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\r\n\r\n    \/*** some variables ***\/\r\n    $data = array('animal_id'=>6, 'animal_name'=>'bruce');\r\n\r\n    \/*** prepare the SQL statement ***\/\r\n    $stmt = $dbh->prepare(\"SELECT * FROM animals WHERE animal_id = :animal_id AND animal_name = :animal_name\");\r\n\r\n    \/*** bind the paramaters ***\/\r\n    $stmt->bindParam(':animal_id', $animal_id, PDO::PARAM_INT);\r\n    $stmt->bindParam(':animal_name', $animal_name, PDO::PARAM_STR, 5);\r\n\r\n    \/*** reassign the variables ***\/\r\n    $data = array('animal_id'=>3, 'animal_name' => 'bruce');\r\n\r\n    \/*** execute the prepared statement ***\/\r\n    $stmt->execute($data);\r\n\r\n    \/*** loop over the results ***\/\r\n    while($row = $stmt->fetch())\r\n        {\r\n        echo $row['animal_id'].'<br \/>';\r\n        echo $row['animal_type'].'<br \/>';\r\n        echo $row['animal_name'].'<br \/>';\r\n        }\r\n\r\n    \/*** reassign the variables again ***\/\r\n    $data = array('animal_id'=>4, 'animal_name' => 'bruce');\r\n\r\n    \/*** execute the prepared statement ***\/\r\n    $stmt->execute($data);\r\n\r\n    \/*** loop over the results ***\/\r\n    while($row = $stmt->fetch())\r\n        {\r\n        echo $row['animal_id'].'<br \/>';\r\n        echo $row['animal_type'].'<br \/>';\r\n        echo $row['animal_name'].'<br \/>';\r\n        }\r\n\r\n    \/*** reassign the variables ***\/\r\n    $data = array('animal_id'=>9, 'animal_name' => 'bruce');\r\n\r\n    \/*** execute the prepared statement ***\/\r\n    $stmt->execute($data);\r\n\r\n    \/*** loop over the results ***\/\r\n    while($row = $stmt->fetch())\r\n        {\r\n        echo $row['animal_id'].'<br \/>';\r\n        echo $row['animal_type'].'<br \/>';\r\n        echo $row['animal_name'];\r\n        }\r\n\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# Transactions\r\n\r\n# At the beginning of this tutorial was saw multiple INSERT statements to set up the initial database. This works fine but is code intensive and with a database like SQLite a problem arises with file locking for each access. The process can be bundled into a single access by using a transaction. Transactions are quite simple and have the benifit of rolling back changes should an error occur, perhaps a system crash.\r\n# A PDO transaction begins with the with PDO::beginTransaction() method. This method turns off auto-commit and any database statements or queries are not committed to the database until the transaction is committed with PDO::commit. When PDO::commit is called, all statements\/queries are enacted and the database connection is returned to auto-commit mode.\r\n# This example shows how we might set up the animals database used in this tutorial.\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\n\/*** database name ***\/\r\n$dbname = 'animals';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=$dbname\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** set the PDO error mode to exception ***\/\r\n    $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\r\n    \/*** begin the transaction ***\/\r\n    $dbh->beginTransaction();\r\n\r\n    \/*** CREATE table statements ***\/\r\n    $table = \"CREATE TABLE animals ( animal_id MEDIUMINT(8) NOT NULL AUTO_INCREMENT PRIMARY KEY,\r\n    animal_type VARCHAR(25) NOT NULL,\r\n    animal_name VARCHAR(25) NOT NULL \r\n    )\";\r\n    $dbh->exec($table);\r\n    \/***  INSERT statements ***\/\r\n    $dbh->exec(\"INSERT INTO animals (animal_type, animal_name) VALUES ('emu', 'bruce')\");\r\n    $dbh->exec(\"INSERT INTO animals (animal_type, animal_name) VALUES ('funnel web', 'bruce')\");\r\n    $dbh->exec(\"INSERT INTO animals (animal_type, animal_name) VALUES ('lizard', 'bruce')\");\r\n    $dbh->exec(\"INSERT INTO animals (animal_type, animal_name) VALUES ('dingo', 'bruce')\");\r\n    $dbh->exec(\"INSERT INTO animals (animal_type, animal_name) VALUES ('kangaroo', 'bruce')\");\r\n    $dbh->exec(\"INSERT INTO animals (animal_type, animal_name) VALUES ('wallaby', 'bruce')\");\r\n    $dbh->exec(\"INSERT INTO animals (animal_type, animal_name) VALUES ('wombat', 'bruce')\");\r\n    $dbh->exec(\"INSERT INTO animals (animal_type, animal_name) VALUES ('koala', 'bruce')\");\r\n    $dbh->exec(\"INSERT INTO animals (animal_type, animal_name) VALUES ('kiwi', 'bruce')\");\r\n\r\n    \/*** commit the transaction ***\/\r\n    $dbh->commit();\r\n\r\n    \/*** echo a message to say the database was created ***\/\r\n    echo 'Data entered successfully<br \/>';\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    \/*** roll back the transaction if we fail ***\/\r\n    $dbh->rollback();\r\n\r\n    \/*** echo the sql statement and error message ***\/\r\n    echo $sql . '<br \/>' . $e->getMessage();\r\n    }\r\n?>\r\n# Get Last Insert Id\r\n\r\n# This is a common task required when you need to get the id of the last INSERT. This is done with PDO::lastInserId() method as shown here.\r\n\r\n<?php\r\n\/*** mysql hostname ***\/\r\n$hostname = 'localhost';\r\n\r\n\/*** mysql username ***\/\r\n$username = 'username';\r\n\r\n\/*** mysql password ***\/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    \/*** echo a message saying we have connected ***\/\r\n    echo 'Connected to database<br \/>';\r\n\r\n    \/*** set the error reporting attribute ***\/\r\n    $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\r\n\r\n    \/*** INSERT a new row ***\/\r\n    $dbh->exec(\"INSERT INTO animals(animal_type, animal_name) VALUES ('galah', 'polly')\");\r\n\r\n    \/*** display the id of the last INSERT ***\/\r\n    echo $dbh->lastInsertId();\r\n\r\n    \/*** close the database connection ***\/\r\n    $dbh = null;\r\n    }\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# A Global Instance\r\n\r\n# Ever need a global instance of your database connection? Here we achieve this with the use of the Singleton design patern. The goal of a singleton is to ensure the class has only a single instance and provide a global point of access to it. Here we use the getInstance() method to achieve this. A new instance is only created the first time it is accessed and all subsequent accesses are simply returned the existing instance.\r\n\r\n<?php\r\nclass db{\r\n\r\n\/*** Declare instance ***\/\r\nprivate static $instance = NULL;\r\n\r\n\/**\r\n*\r\n* the constructor is set to private so\r\n* so nobody can create a new instance using new\r\n*\r\n*\/\r\nprivate function __construct() {\r\n  \/*** maybe set the db name here later ***\/\r\n}\r\n\r\n\/**\r\n*\r\n* Return DB instance or create intitial connection\r\n*\r\n* @return object (PDO)\r\n*\r\n* @access public\r\n*\r\n*\/\r\npublic static function getInstance() {\r\n\r\nif (!self::$instance)\r\n    {\r\n    self::$instance = new PDO(\"mysql:host='localhost';dbname='animals'\", 'username', 'password');;\r\n    self::$instance-> setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\r\n    }\r\nreturn self::$instance;\r\n}\r\n\r\n\/**\r\n*\r\n* Like the constructor, we make __clone private\r\n* so nobody can clone the instance\r\n*\r\n*\/\r\nprivate function __clone(){\r\n}\r\n\r\n} \/*** end of class ***\/\r\n\r\ntry    {\r\n    \/*** query the database ***\/\r\n    $result = DB::getInstance()->query(\"SELECT * FROM animals\");\r\n\r\n    \/*** loop over the results ***\/\r\n    foreach($result as $row)\r\n        {\r\n        print $row['animal_type'] .' - '. $row['animal_name'] . '<br \/>';\r\n        }\r\n    }\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# The above code will produce a result like this:\r\n# emu - bruce\r\n# funnel web - bruce\r\n# lizard - bruce\r\n# dingo - bruce\r\n# kangaroo - bruce\r\n# wallaby - bruce\r\n# wombat - bruce\r\n# koala - bruce\r\n# This method of access saves the overhead created when a new instance of an object is called each time it is referenced, so you have have few references to it. Also, if you wish to pass the objects state from one reference to another there is no need to create from the initial state.\r\n# Note that the constructor and clone methods have been made private to ensure that an instance of the class cannot be instantiated or cloned.\r\n# Conclusions.\r\n# \r\n# If you have got this far you will have seen how to create a connection, prepare a statement and exceute, and to bind Params using bindParam(). This is what most folks will be using to begin with and shows the effectiveness of using PDO to make code more portable. We highly recommend you visit http:\/\/www.php.net\/manual\/en\/ref.pdo.php and read up on all that PDO has to offer.\r\n",
        "created":"1337802990",
        "4":"1337802990",
        "updated":"1337802990",
        "5":"1337802990",
        "category_id":"1",
        "6":"1",
        "user_id":"2",
        "7":"2",
        "private":"0",
        "8":"0",
        "rating":"0",
        "9":"0",
        "favorite":"FALSE",
        "10":"FALSE",
        "active":"0",
        "11":"0"
    }
]