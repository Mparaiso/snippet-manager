[
    {
        "id": 1371254774862,
        "title": "LESS FUNCTIONS",
        "description": "LESS FUNCTIONS",
        "content": "Function Reference\n\nIndex\n\nescape(@string);               // URL encodes a string\ne(@string);                    // escape string content\n%(@string, values...);         // formats a string\n\nunit(@dimension, [@unit: \"\"]); // remove or change the unit of a dimension\ncolor(@string);                // parses a string to a color\ndata-uri([mimetype,] url);       // * inlines a resource and falls back to url()\n\nceil(@number);                 // rounds up to an integer\nfloor(@number);                // rounds down to an integer\npercentage(@number);           // converts to a %, e.g. 0.5 -> 50%\nround(number, [places: 0]);    // rounds a number to a number of places\nsqrt(number);                  // * calculates square root of a number\nabs(number);                   // * absolute value of a number\nsin(number);                   // * sine function\nasin(number);                  // * arcsine - inverse of sine function\ncos(number);                   // * cosine function\nacos(number);                  // * arccosine - inverse of cosine function\ntan(number);                   // * tangent function\natan(number);                  // * arctangent - inverse of tangent function\npi();                          // * returns pi\npow(@base, @exponent);     // * first argument raised to the power of the second argument\nmod(number, number);       // * first argument modulus second argument\n\nconvert(number, units);    // * converts between number types\nunit(number, units);       // *changes number units without converting it\ncolor(string);             // converts string or escaped value into color\n\nrgb(@r, @g, @b);                             // converts to a color\nrgba(@r, @g, @b, @a);                        // converts to a color\nargb(@color);                                // creates a #AARRGGBB\nhsl(@hue, @saturation, @lightness);          // creates a color\nhsla(@hue, @saturation, @lightness, @alpha); // creates a color\nhsv(@hue, @saturation, @value);              // creates a color\nhsva(@hue, @saturation, @value, @alpha);     // creates a color\n\nhue(@color);           // returns the `hue` channel of @color in the HSL space\nsaturation(@color);    // returns the `saturation` channel of @color in the HSL space\nlightness(@color);     // returns the 'lightness' channel of @color in the HSL space\nhsvhue(@color);        // * returns the `hue` channel of @color in the HSV space\nhsvsaturation(@color); // * returns the `saturation` channel of @color in the HSV space\nhsvvalue(@color);      // * returns the 'value' channel of @color in the HSV space\nred(@color);           // returns the 'red' channel of @color\ngreen(@color);         // returns the 'green' channel of @color\nblue(@color);          // returns the 'blue' channel of @color\nalpha(@color);         // returns the 'alpha' channel of @color\nluma(@color);          // returns the 'luma' value (perceptual brightness) of @color\n\nsaturate(@color, 10%);                  // return a color 10% points *more* saturated\ndesaturate(@color, 10%);                // return a color 10% points *less* saturated\nlighten(@color, 10%);                   // return a color 10% points *lighter*\ndarken(@color, 10%);                    // return a color 10% points *darker*\nfadein(@color, 10%);                    // return a color 10% points *less* transparent\nfadeout(@color, 10%);                   // return a color 10% points *more* transparent\nfade(@color, 50%);                      // return @color with 50% transparency\nspin(@color, 10);                       // return a color with a 10 degree larger in hue\nmix(@color1, @color2, [@weight: 50%]);  // return a mix of @color1 and @color2\ngreyscale(@color);                      // returns a grey, 100% desaturated color\ncontrast(@color1, [@darkcolor: black], [@lightcolor: white], [@threshold: 43%]); \n                                        // return @darkcolor if @color1 is > 43% luma\n                                        // otherwise return @lightcolor, see notes\n\nmultiply(@color1, @color2);\nscreen(@color1, @color2);\noverlay(@color1, @color2);\nsoftlight(@color1, @color2);\nhardlight(@color1, @color2);\ndifference(@color1, @color2);\nexclusion(@color1, @color2);\naverage(@color1, @color2);\nnegation(@color1, @color2);\n\niscolor(@colorOrAnything);              // returns true if passed a color, including keyword colors\nisnumber(@numberOrAnything);            // returns true if a number of any unit\nisstring(@stringOrAnything);            // returns true if it is passed a string\niskeyword(@keywordOrAnything);          // returns true if it is passed keyword\nisurl(@urlOrAnything);                  // returns true if it is a string and a url\nispixel(@pixelOrAnything);              // returns true if it is a number and a px\nispercentage(@percentageOrAnything);    // returns true if it is a number and a %\nisem(@emOrAnything);                    // returns true if it is a number and an em\nisunit(@numberOrAnything, \"rem\");       // * returns if a parameter is a number and is in a particular unit\n\n// * These functions are only available in the 1.4.0 beta",
        "tags": [],
        "category": {
            "id": 6,
            "name": "CSS"
        },
        "prettyContent": "Function Reference\n\nIndex\n\nescape(<span class=\"annotation\">@string</span>);               <span class=\"comment\">// URL encodes a string</span>\ne(<span class=\"annotation\">@string</span>);                    <span class=\"comment\">// escape string content</span>\n%(<span class=\"annotation\">@string</span>, values...);         <span class=\"comment\">// formats a string</span>\n\nunit(<span class=\"annotation\">@dimension</span>, [<span class=\"annotation\">@unit</span>: <span class=\"string\">\"\"</span>]); <span class=\"comment\">// remove or change the unit of a dimension</span>\ncolor(<span class=\"annotation\">@string</span>);                <span class=\"comment\">// parses a string to a color</span>\ndata-uri([mimetype,] url);       <span class=\"comment\">// * inlines a resource and falls back to url()</span>\n\nceil(<span class=\"annotation\">@number</span>);                 <span class=\"comment\">// rounds up to an integer</span>\nfloor(<span class=\"annotation\">@number</span>);                <span class=\"comment\">// rounds down to an integer</span>\npercentage(<span class=\"annotation\">@number</span>);           <span class=\"comment\">// converts to a %, e.g. 0.5 -&gt; 50%</span>\nround(number, [places: <span class=\"number\">0</span>]);    <span class=\"comment\">// rounds a number to a number of places</span>\nsqrt(number);                  <span class=\"comment\">// * calculates square root of a number</span>\nabs(number);                   <span class=\"comment\">// * absolute value of a number</span>\nsin(number);                   <span class=\"comment\">// * sine function</span>\nasin(number);                  <span class=\"comment\">// * arcsine - inverse of sine function</span>\ncos(number);                   <span class=\"comment\">// * cosine function</span>\nacos(number);                  <span class=\"comment\">// * arccosine - inverse of cosine function</span>\ntan(number);                   <span class=\"comment\">// * tangent function</span>\natan(number);                  <span class=\"comment\">// * arctangent - inverse of tangent function</span>\npi();                          <span class=\"comment\">// * returns pi</span>\npow(<span class=\"annotation\">@base</span>, <span class=\"annotation\">@exponent</span>);     <span class=\"comment\">// * first argument raised to the power of the second argument</span>\nmod(number, number);       <span class=\"comment\">// * first argument modulus second argument</span>\n\nconvert(number, units);    <span class=\"comment\">// * converts between number types</span>\nunit(number, units);       <span class=\"comment\">// *changes number units without converting it</span>\ncolor(string);             <span class=\"comment\">// converts string or escaped value into color</span>\n\nrgb(<span class=\"annotation\">@r</span>, <span class=\"annotation\">@g</span>, <span class=\"annotation\">@b</span>);                             <span class=\"comment\">// converts to a color</span>\nrgba(<span class=\"annotation\">@r</span>, <span class=\"annotation\">@g</span>, <span class=\"annotation\">@b</span>, <span class=\"annotation\">@a</span>);                        <span class=\"comment\">// converts to a color</span>\nargb(<span class=\"annotation\">@color</span>);                                <span class=\"comment\">// creates a #AARRGGBB</span>\nhsl(<span class=\"annotation\">@hue</span>, <span class=\"annotation\">@saturation</span>, <span class=\"annotation\">@lightness</span>);          <span class=\"comment\">// creates a color</span>\nhsla(<span class=\"annotation\">@hue</span>, <span class=\"annotation\">@saturation</span>, <span class=\"annotation\">@lightness</span>, <span class=\"annotation\">@alpha</span>); <span class=\"comment\">// creates a color</span>\nhsv(<span class=\"annotation\">@hue</span>, <span class=\"annotation\">@saturation</span>, <span class=\"annotation\">@value</span>);              <span class=\"comment\">// creates a color</span>\nhsva(<span class=\"annotation\">@hue</span>, <span class=\"annotation\">@saturation</span>, <span class=\"annotation\">@value</span>, <span class=\"annotation\">@alpha</span>);     <span class=\"comment\">// creates a color</span>\n\nhue(<span class=\"annotation\">@color</span>);           <span class=\"comment\">// returns the `hue` channel of @color in the HSL space</span>\nsaturation(<span class=\"annotation\">@color</span>);    <span class=\"comment\">// returns the `saturation` channel of @color in the HSL space</span>\nlightness(<span class=\"annotation\">@color</span>);     <span class=\"comment\">// returns the 'lightness' channel of @color in the HSL space</span>\nhsvhue(<span class=\"annotation\">@color</span>);        <span class=\"comment\">// * returns the `hue` channel of @color in the HSV space</span>\nhsvsaturation(<span class=\"annotation\">@color</span>); <span class=\"comment\">// * returns the `saturation` channel of @color in the HSV space</span>\nhsvvalue(<span class=\"annotation\">@color</span>);      <span class=\"comment\">// * returns the 'value' channel of @color in the HSV space</span>\nred(<span class=\"annotation\">@color</span>);           <span class=\"comment\">// returns the 'red' channel of @color</span>\ngreen(<span class=\"annotation\">@color</span>);         <span class=\"comment\">// returns the 'green' channel of @color</span>\nblue(<span class=\"annotation\">@color</span>);          <span class=\"comment\">// returns the 'blue' channel of @color</span>\nalpha(<span class=\"annotation\">@color</span>);         <span class=\"comment\">// returns the 'alpha' channel of @color</span>\nluma(<span class=\"annotation\">@color</span>);          <span class=\"comment\">// returns the 'luma' value (perceptual brightness) of @color</span>\n\nsaturate(<span class=\"annotation\">@color</span>, <span class=\"number\">10</span>%);                  <span class=\"comment\">// return a color 10% points *more* saturated</span>\ndesaturate(<span class=\"annotation\">@color</span>, <span class=\"number\">10</span>%);                <span class=\"comment\">// return a color 10% points *less* saturated</span>\nlighten(<span class=\"annotation\">@color</span>, <span class=\"number\">10</span>%);                   <span class=\"comment\">// return a color 10% points *lighter*</span>\ndarken(<span class=\"annotation\">@color</span>, <span class=\"number\">10</span>%);                    <span class=\"comment\">// return a color 10% points *darker*</span>\nfadein(<span class=\"annotation\">@color</span>, <span class=\"number\">10</span>%);                    <span class=\"comment\">// return a color 10% points *less* transparent</span>\nfadeout(<span class=\"annotation\">@color</span>, <span class=\"number\">10</span>%);                   <span class=\"comment\">// return a color 10% points *more* transparent</span>\nfade(<span class=\"annotation\">@color</span>, <span class=\"number\">50</span>%);                      <span class=\"comment\">// return @color with 50% transparency</span>\nspin(<span class=\"annotation\">@color</span>, <span class=\"number\">10</span>);                       <span class=\"comment\">// return a color with a 10 degree larger in hue</span>\nmix(<span class=\"annotation\">@color</span>1, <span class=\"annotation\">@color</span>2, [<span class=\"annotation\">@weight</span>: <span class=\"number\">50</span>%]);  <span class=\"comment\">// return a mix of @color1 and @color2</span>\ngreyscale(<span class=\"annotation\">@color</span>);                      <span class=\"comment\">// returns a grey, 100% desaturated color</span>\ncontrast(<span class=\"annotation\">@color</span>1, [<span class=\"annotation\">@darkcolor</span>: black], [<span class=\"annotation\">@lightcolor</span>: white], [<span class=\"annotation\">@threshold</span>: <span class=\"number\">43</span>%]); \n                                        <span class=\"comment\">// return @darkcolor if @color1 is &gt; 43% luma</span>\n                                        <span class=\"comment\">// otherwise return @lightcolor, see notes</span>\n\nmultiply(<span class=\"annotation\">@color</span>1, <span class=\"annotation\">@color</span>2);\nscreen(<span class=\"annotation\">@color</span>1, <span class=\"annotation\">@color</span>2);\noverlay(<span class=\"annotation\">@color</span>1, <span class=\"annotation\">@color</span>2);\nsoftlight(<span class=\"annotation\">@color</span>1, <span class=\"annotation\">@color</span>2);\nhardlight(<span class=\"annotation\">@color</span>1, <span class=\"annotation\">@color</span>2);\ndifference(<span class=\"annotation\">@color</span>1, <span class=\"annotation\">@color</span>2);\nexclusion(<span class=\"annotation\">@color</span>1, <span class=\"annotation\">@color</span>2);\naverage(<span class=\"annotation\">@color</span>1, <span class=\"annotation\">@color</span>2);\nnegation(<span class=\"annotation\">@color</span>1, <span class=\"annotation\">@color</span>2);\n\niscolor(<span class=\"annotation\">@colorOrAnything</span>);              <span class=\"comment\">// returns true if passed a color, including keyword colors</span>\nisnumber(<span class=\"annotation\">@numberOrAnything</span>);            <span class=\"comment\">// returns true if a number of any unit</span>\nisstring(<span class=\"annotation\">@stringOrAnything</span>);            <span class=\"comment\">// returns true if it is passed a string</span>\niskeyword(<span class=\"annotation\">@keywordOrAnything</span>);          <span class=\"comment\">// returns true if it is passed keyword</span>\nisurl(<span class=\"annotation\">@urlOrAnything</span>);                  <span class=\"comment\">// returns true if it is a string and a url</span>\nispixel(<span class=\"annotation\">@pixelOrAnything</span>);              <span class=\"comment\">// returns true if it is a number and a px</span>\nispercentage(<span class=\"annotation\">@percentageOrAnything</span>);    <span class=\"comment\">// returns true if it is a number and a %</span>\nisem(<span class=\"annotation\">@emOrAnything</span>);                    <span class=\"comment\">// returns true if it is a number and an em</span>\nisunit(<span class=\"annotation\">@numberOrAnything</span>, <span class=\"string\">\"rem\"</span>);       <span class=\"comment\">// * returns if a parameter is a number and is in a particular unit</span>\n\n<span class=\"comment\">// * These functions are only available in the 1.4.0 beta</span>",
        "updated_at": "2013-06-15T11:29:06.739Z",
        "created_at": "2013-06-15T10:34:21.930Z",
        "category_id": 6
    },
    {
        "id": 1371255214575,
        "title": "Linear Gradient",
        "description": "Linear Gradient",
        "content": ".gradient{\n     background-image:linear-gradient(white, black);\n}",
        "tags": [],
        "category": {
            "id": 6,
            "name": "CSS"
        },
        "prettyContent": "<span class=\"class\">.gradient</span><span class=\"rules\">{\n     <span class=\"rule\"><span class=\"attribute\">background-image</span>:<span class=\"value\">linear-<span class=\"function\">gradient(white, black)</span>;</span></span>\n<span class=\"rule\">}</span></span>",
        "updated_at": "2013-06-15T11:46:32.619Z",
        "created_at": "2013-06-15T11:12:11.843Z",
        "category_id": 6
    },
    {
        "id": 1371255376590,
        "title": "BOX Shadow",
        "description": "BOX shadow",
        "content": "box-shadow: inset 0px 0px 15px #000, 0px 0px 15px #ccc;",
        "tags": [],
        "category": {
            "id": 6,
            "name": "CSS"
        },
        "prettyContent": "<span class=\"tag\">box</span>-<span class=\"tag\">shadow</span>: <span class=\"tag\">inset</span> 0<span class=\"tag\">px</span> 0<span class=\"tag\">px</span> 15<span class=\"tag\">px</span> <span class=\"id\">#000</span>, 0<span class=\"tag\">px</span> 0<span class=\"tag\">px</span> 15<span class=\"tag\">px</span> <span class=\"id\">#ccc</span>;",
        "category_id": 6,
        "updated_at": "2013-06-15T11:47:16.154Z",
        "created_at": "2013-06-15T11:47:16.154Z"
    },
    {
        "id": 1371257453584,
        "title": "Style a Select Box Using Only CSS",
        "description": "Style a Select Box Using Only CSS",
        "content": ".styled-select select {\n   background: transparent;\n   width: 268px;\n   padding: 5px;\n   font-size: 16px;\n   line-height: 1;\n   border: 0;\n   border-radius: 0;\n   height: 34px;\n   -webkit-appearance: none;\n   }",
        "tags": [],
        "category": {
            "id": 6,
            "name": "CSS"
        },
        "prettyContent": "<span class=\"class\">.styled-select</span> <span class=\"tag\">select</span> <span class=\"rules\">{\n   <span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"> transparent;</span></span>\n   <span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"> <span class=\"number\">268</span>px;</span></span>\n   <span class=\"rule\"><span class=\"attribute\">padding</span>:<span class=\"value\"> <span class=\"number\">5</span>px;</span></span>\n   <span class=\"rule\"><span class=\"attribute\">font-size</span>:<span class=\"value\"> <span class=\"number\">16</span>px;</span></span>\n   <span class=\"rule\"><span class=\"attribute\">line-height</span>:<span class=\"value\"> <span class=\"number\">1</span>;</span></span>\n   <span class=\"rule\"><span class=\"attribute\">border</span>:<span class=\"value\"> <span class=\"number\">0</span>;</span></span>\n   <span class=\"rule\"><span class=\"attribute\">border-radius</span>:<span class=\"value\"> <span class=\"number\">0</span>;</span></span>\n   <span class=\"rule\"><span class=\"attribute\">height</span>:<span class=\"value\"> <span class=\"number\">34</span>px;</span></span>\n   <span class=\"rule\"><span class=\"attribute\">-webkit-appearance</span>:<span class=\"value\"> none;</span></span>\n   <span class=\"rule\">}</span></span>",
        "category_id": 6,
        "updated_at": "2013-06-15T11:47:04.922Z",
        "created_at": "2013-06-15T11:47:04.922Z"
    },
    {
        "id": 1371257559343,
        "title": "Getting Started with highlight.js",
        "description": "Getting Started with highlight.js",
        "content": "// https://github.com/isagalaev/highlight.js\nvar hljs = require('highlight.js');\n\n// If you know the language\nhljs.highlight(lang, code).value;\n\n// Automatic language detection\nhljs.highlightAuto(code).value;",
        "tags": [],
        "category": {
            "id": 17,
            "name": "Javascript"
        },
        "category_id": 17,
        "updated_at": "2013-06-15T11:48:40.594Z",
        "created_at": "2013-06-15T11:48:40.594Z",
        "prettyContent": "<span class=\"comment\">// https://github.com/isagalaev/highlight.js</span>\n<span class=\"keyword\">var</span> hljs = require(<span class=\"string\">'highlight.js'</span>);\n\n<span class=\"comment\">// If you know the language</span>\nhljs.highlight(lang, code).<span class=\"keyword\">value</span>;\n\n<span class=\"comment\">// Automatic language detection</span>\nhljs.highlightAuto(code).<span class=\"keyword\">value</span>;"
    },
    {
        "id": 1371257656664,
        "title": "node-webkit Manifest format",
        "description": "node-webkit Manifest format",
        "content": "{\n  \"main\": \"index.html\",\n  \"name\": \"nw-demo\",\n  \"description\": \"demo app of node-webkit\",\n  \"version\": \"0.1.0\",\n  \"keywords\": [ \"demo\", \"node-webkit\" ],\n  \"window\": {\n    \"icon\": \"link.png\",\n    \"toolbar\": true,\n    \"frame\": false,\n    \"width\": 800,\n    \"height\": 500,\n    \"position\": \"mouse\",\n    \"min_width\": 400,\n    \"min_height\": 200,\n    \"max_width\": 800,\n    \"max_height\": 600\n  },\n  \"webkit\": {\n    \"plugin\": true\n  }\n}",
        "tags": [],
        "category": {
            "id": 15,
            "name": "JSON"
        },
        "prettyContent": "{\n  \"<span class=\"attribute\">main</span>\": <span class=\"value\"><span class=\"string\">\"index.html\"</span></span>,\n  \"<span class=\"attribute\">name</span>\": <span class=\"value\"><span class=\"string\">\"nw-demo\"</span></span>,\n  \"<span class=\"attribute\">description</span>\": <span class=\"value\"><span class=\"string\">\"demo app of node-webkit\"</span></span>,\n  \"<span class=\"attribute\">version</span>\": <span class=\"value\"><span class=\"string\">\"0.1.0\"</span></span>,\n  \"<span class=\"attribute\">keywords</span>\": <span class=\"value\">[ <span class=\"string\">\"demo\"</span>, <span class=\"string\">\"node-webkit\"</span> ]</span>,\n  \"<span class=\"attribute\">window</span>\": <span class=\"value\">{\n    \"<span class=\"attribute\">icon</span>\": <span class=\"value\"><span class=\"string\">\"link.png\"</span></span>,\n    \"<span class=\"attribute\">toolbar</span>\": <span class=\"value\"><span class=\"literal\">true</span></span>,\n    \"<span class=\"attribute\">frame</span>\": <span class=\"value\"><span class=\"literal\">false</span></span>,\n    \"<span class=\"attribute\">width</span>\": <span class=\"value\"><span class=\"number\">800</span></span>,\n    \"<span class=\"attribute\">height</span>\": <span class=\"value\"><span class=\"number\">500</span></span>,\n    \"<span class=\"attribute\">position</span>\": <span class=\"value\"><span class=\"string\">\"mouse\"</span></span>,\n    \"<span class=\"attribute\">min_width</span>\": <span class=\"value\"><span class=\"number\">400</span></span>,\n    \"<span class=\"attribute\">min_height</span>\": <span class=\"value\"><span class=\"number\">200</span></span>,\n    \"<span class=\"attribute\">max_width</span>\": <span class=\"value\"><span class=\"number\">800</span></span>,\n    \"<span class=\"attribute\">max_height</span>\": <span class=\"value\"><span class=\"number\">600</span>\n  }</span></span>,\n  \"<span class=\"attribute\">webkit</span>\": <span class=\"value\">{\n    \"<span class=\"attribute\">plugin</span>\": <span class=\"value\"><span class=\"literal\">true</span>\n  }</span>\n}</span>",
        "category_id": 15,
        "updated_at": "2013-06-15T13:36:38.043Z",
        "created_at": "2013-06-15T13:36:38.043Z"
    },
    {
        "id": 1371258226526,
        "title": "AngularJS Animation module",
        "description": "AngularJS Animation module.\nsource: http://www.yearofmoo.com/2013/04/animation-in-angularjs.html",
        "content": "//you can inject stuff!\nmyModule.animation('cool-animation', ['$rootScope', function($rootScope) {\n  return { \n    setup : function(element) {\n      //this is called before the animation\n      jQuery(element).css({\n        'border-width':0\n      }); \n    },\n    start : function(element, done, memo) {\n      //this is where the animation is expected to be run\n      jQuery(element).animate({\n        'border-width':20\n      }, function() {\n        //call done to close when the animation is complete\n        done(); \n      });\n    },\n    cancel : function(element, done) {\n      //this is called when another animation is started\n      //whilst the previous animation is still chugging away\n    }   \n  };\n}]);",
        "tags": [],
        "category": {
            "id": 17,
            "name": "Javascript"
        },
        "prettyContent": "<span class=\"comment\">//you can inject stuff!</span>\nmyModule.animation(<span class=\"string\">'cool-animation'</span>, [<span class=\"string\">'$rootScope'</span>, <span class=\"keyword\">function</span>($rootScope) {\n  <span class=\"keyword\">return</span> { \n    setup : <span class=\"keyword\">function</span>(element) {\n      <span class=\"comment\">//this is called before the animation</span>\n      jQuery(element).css({\n        <span class=\"string\">'border-width'</span>:<span class=\"number\">0</span>\n      }); \n    },\n    start : <span class=\"keyword\">function</span>(element, done, memo) {\n      <span class=\"comment\">//this is where the animation is expected to be run</span>\n      jQuery(element).animate({\n        <span class=\"string\">'border-width'</span>:<span class=\"number\">20</span>\n      }, <span class=\"keyword\">function</span>() {\n        <span class=\"comment\">//call done to close when the animation is complete</span>\n        done(); \n      });\n    },\n    cancel : <span class=\"keyword\">function</span>(element, done) {\n      <span class=\"comment\">//this is called when another animation is started</span>\n      <span class=\"comment\">//whilst the previous animation is still chugging away</span>\n    }   \n  };\n}]);",
        "category_id": 6,
        "updated_at": "2013-06-15T11:46:54.703Z",
        "created_at": "2013-06-15T11:46:54.703Z"
    },
    {
        "id": 1371258828255,
        "title": "LESS MIXINS",
        "description": "LESS MIXINS",
        "content": ".rounded-corners (@radius: 5px) {\n  -webkit-border-radius: @radius;\n  -moz-border-radius: @radius;\n  -ms-border-radius: @radius;\n  -o-border-radius: @radius;\n  border-radius: @radius;\n}\n\n#header {\n  .rounded-corners;\n}\n#footer {\n  .rounded-corners(10px);\n}",
        "tags": [],
        "category": {
            "id": 6,
            "name": "CSS"
        },
        "prettyContent": ".rounded-corners (<span class=\"variable\">@radius</span><span class=\"symbol\">:</span> <span class=\"number\">5</span>px) {\n  -webkit-border-<span class=\"symbol\">radius:</span> <span class=\"variable\">@radius</span>;\n  -moz-border-<span class=\"symbol\">radius:</span> <span class=\"variable\">@radius</span>;\n  -ms-border-<span class=\"symbol\">radius:</span> <span class=\"variable\">@radius</span>;\n  -o-border-<span class=\"symbol\">radius:</span> <span class=\"variable\">@radius</span>;\n  border-<span class=\"symbol\">radius:</span> <span class=\"variable\">@radius</span>;\n}\n\n<span class=\"comment\">#header {</span>\n  .rounded-corners;\n}\n<span class=\"comment\">#footer {</span>\n  .rounded-corners(<span class=\"number\">10</span>px);\n}",
        "category_id": 6,
        "updated_at": "2013-06-15T11:46:43.778Z",
        "created_at": "2013-06-15T11:46:43.778Z"
    },
    {
        "id": 1371307172114,
        "title": "Angular JS and Radio buttons",
        "description": "Angular JS and Radio buttons",
        "content": "=== script.js ===\nfunction Ctrl($scope) {\n    \n  $scope.items = [{ color: \"red\" },{ color: \"green\" },{ color: \"blue\" }]\n    \n  $scope.color = 'blue';\n}\n\n=== index.html ===\n<div ng-app=\"\">\n  <form name=\"myForm\" ng-controller=\"Ctrl\">\n    <input ng-repeat=\"item in items\" \n      type=\"radio\" ng-model=\"$parent.color\" value=\"{{item.color}}\">  <br/>\n    <tt>color = {{color}}</tt><br/>\n   </form>\n</div>",
        "tags": [],
        "category": null,
        "updated_at": "2013-06-15T14:40:09.378Z",
        "created_at": "2013-06-15T14:39:32.114Z",
        "prettyContent": "=== script.js ===\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Ctrl</span><span class=\"params\">($scope)</span> {</span>\n    \n  $scope.items = [{ color: <span class=\"string\">\"red\"</span> },{ color: <span class=\"string\">\"green\"</span> },{ color: <span class=\"string\">\"blue\"</span> }]\n    \n  $scope.color = <span class=\"string\">'blue'</span>;\n}\n\n=== index.html ===\n<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">ng-app</span>=<span class=\"value\">\"\"</span>&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"title\">form</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"myForm\"</span> <span class=\"attribute\">ng-controller</span>=<span class=\"value\">\"Ctrl\"</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">input</span> <span class=\"attribute\">ng-repeat</span>=<span class=\"value\">\"item in items\"</span> \n      <span class=\"attribute\">type</span>=<span class=\"value\">\"radio\"</span> <span class=\"attribute\">ng-model</span>=<span class=\"value\">\"$parent.color\"</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"{{item.color}}\"</span>&gt;</span>  <span class=\"tag\">&lt;<span class=\"title\">br</span>/&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">tt</span>&gt;</span>color = {{color}}<span class=\"tag\">&lt;/<span class=\"title\">tt</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">br</span>/&gt;</span>\n   <span class=\"tag\">&lt;/<span class=\"title\">form</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></span>",
        "category_id": 17
    },
    {
        "id": 1371308643434,
        "title": "CSS Word wrap",
        "description": "CSS Word wrap",
        "content": "/* http://www.alsacreations.com/tuto/lire/1038-gerer-debordement-contenu-css.html */\np {\n  width: 100px;\n  margin: auto;\n  padding: 10px;\n  background: green;\n  color: #fff;\n  font-size: 1.2em;  \n  word-wrap: break-word;   \n}",
        "tags": [],
        "category": null,
        "category_id": 6,
        "updated_at": "2013-06-15T15:05:06.770Z",
        "created_at": "2013-06-15T15:04:03.433Z",
        "prettyContent": "<span class=\"comment\">/* http://www.alsacreations.com/tuto/lire/1038-gerer-debordement-contenu-css.html */</span>\n<span class=\"tag\">p</span> <span class=\"rules\">{\n  <span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"> <span class=\"number\">100</span>px;</span></span>\n  <span class=\"rule\"><span class=\"attribute\">margin</span>:<span class=\"value\"> auto;</span></span>\n  <span class=\"rule\"><span class=\"attribute\">padding</span>:<span class=\"value\"> <span class=\"number\">10</span>px;</span></span>\n  <span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"> green;</span></span>\n  <span class=\"rule\"><span class=\"attribute\">color</span>:<span class=\"value\"> <span class=\"hexcolor\">#fff</span>;</span></span>\n  <span class=\"rule\"><span class=\"attribute\">font-size</span>:<span class=\"value\"> <span class=\"number\">1.2</span>em;</span></span>  \n  <span class=\"rule\"><span class=\"attribute\">word-wrap</span>:<span class=\"value\"> break-word;</span></span>   \n<span class=\"rule\">}</span></span>"
    },
    {
        "id": 1371309572331,
        "title": "Create a Runtime JavaScript Script Tag Using a Blob",
        "description": "Create a Runtime JavaScript Script Tag Using a Blob",
        "content": "function () {\n            window.URL = window.URL || window.webkitURL;\n            function contentLoaded() {\n                var blob = new Blob(['alert(\"hello\")'], { type: 'text/javascript' });\n                var script = document.createElement('script');\n                script.setAttribute('src', window.URL.createObjectURL(blob));\n                document.body.appendChild(script);\n            }\n            window.addEventListener('DOMContentLoaded', contentLoaded, false);\n        }",
        "tags": [],
        "category": null,
        "updated_at": "2013-06-15T15:20:17.419Z",
        "created_at": "2013-06-15T15:19:32.331Z",
        "prettyContent": "<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n            window.URL = window.URL || window.webkitURL;\n            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">contentLoaded</span><span class=\"params\">()</span> {</span>\n                <span class=\"keyword\">var</span> blob = <span class=\"keyword\">new</span> Blob([<span class=\"string\">'alert(\"hello\")'</span>], { type: <span class=\"string\">'text/javascript'</span> });\n                <span class=\"keyword\">var</span> script = document.createElement(<span class=\"string\">'script'</span>);\n                script.setAttribute(<span class=\"string\">'src'</span>, window.URL.createObjectURL(blob));\n                document.body.appendChild(script);\n            }\n            window.addEventListener(<span class=\"string\">'DOMContentLoaded'</span>, contentLoaded, <span class=\"literal\">false</span>);\n        }",
        "category_id": 17
    },
    {
        "id": 1371314891514,
        "title": "Hello Flash",
        "description": "Hello Flash",
        "content": "trace(\"Hello Flash\")",
        "tags": [],
        "category": null,
        "category_id": 0,
        "updated_at": "2013-06-15T20:56:49.453Z",
        "created_at": "2013-06-15T16:48:11.514Z",
        "prettyContent": "trace(\"Hello Flash\")"
    },
    {
        "id": 1371355130155,
        "title": "CSS nth-child",
        "description": "Snippet Descrition",
        "content": "=== index.html ===\n<ul>\n    <li>Look at me!</li>\n    <li>I'm so f---ing awesome!</li>\n    <li>How awesome?</li>\n    <li>Too awesome for jQuery.</li>\n    <li>jQuery SUCKS!</li>\n    <li>Seriously, dude, there is literally no reason to use it.</li>\n    <li>jQuery is like a sledgehammer.</li>\n    <li>It might be good at some tasks, like sledgehamming :p</li>\n    <li>But for the most part it is excessive.</li>\n    <li>You wouldn't hang a picture with a sledgehammer, would you?</li>\n    <li>Well, bye!</li>\n</ul>\n\n=== index.css ===\n\nli:nth-child(4n+5) {border-top:1px solid black}",
        "tags": [],
        "category": null,
        "category_id": 6,
        "updated_at": "2013-06-16T03:58:50.155Z",
        "created_at": "2013-06-16T03:58:50.155Z",
        "prettyContent": "=== index.html ===\n<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"title\">ul</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span>Look at me!<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span>I'm so f---ing awesome!<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span>How awesome?<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span>Too awesome for jQuery.<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span>jQuery SUCKS!<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span>Seriously, dude, there is literally no reason to use it.<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span>jQuery is like a sledgehammer.<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span>It might be good at some tasks, like sledgehamming :p<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span>But for the most part it is excessive.<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span>You wouldn't hang a picture with a sledgehammer, would you?<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span>Well, bye!<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">ul</span>&gt;</span>\n\n=== index.css ===\n\nli:nth-child(4n+5) {border-top:1px solid black}</span>"
    }
]