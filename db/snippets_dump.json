[{"id":1,"category_id":1,"user_id":6,"title":"Javascript Alert!","description":"Javascript Alert","content":"<script type='text/javascript'>\r\n/* creates a javascript alert */\r\nwindow.alert(\"blop\");\r\n</script>","created_at":"2013-03-19 11:58:21 +0000","updated_at":"2014-08-30 02:39:21 +0000","private":0,"tags":"N;"},{"id":2,"category_id":6,"user_id":6,"title":"SQL DELETE","description":"SQL DELETE","content":"\r\nDELETE FROM \"nom de table\"\r\nWHERE {condition}\r\n\r\nDELETE FROM Store_Information\r\nWHERE store_name = \"Los Angeles\"\r\n\r\n","created_at":"2013-03-19 11:58:21 +0000","updated_at":"2013-03-19 11:58:21 +0000","private":0,"tags":"N;"},{"id":3,"category_id":1,"user_id":6,"title":"Manipulating Configuration Data with Zend_Config","description":"Manipulating Configuration Data with Zend_Config","content":"// XML\r\n\r\n<?xml version='1.0'?>\r\n<config>\r\n  <dialer>\r\n    <number>12345678</number>\r\n    <retries>15</retries>\r\n    <protocol>ppp</protocol>\r\n  </dialer>\r\n</config>\r\n\r\n// PHP \r\n\r\n<?php\r\n// include auto-loader class\r\nrequire_once 'Zend/Loader/Autoloader.php';\r\n\r\n// register auto-loader\r\n$loader = Zend_Loader_Autoloader::getInstance();\r\n\r\n// read XML config file\r\n$config = new Zend_Config_Xml('config.xml', 'dialer');\r\n\r\n// access individual nodes\r\nprintf(\"Number: %s \\r\\n\", $config->number);\r\nprintf(\"Retries: %s \\r\\n\", $config->retries);\r\nprintf(\"Protocol: %s \\r\\n\", $config->protocol);\r\n?>","created_at":"2013-03-19 11:58:21 +0000","updated_at":"2013-03-19 11:58:21 +0000","private":0,"tags":"N;"},{"id":4,"category_id":12,"user_id":6,"title":"C# convert video using FFMPEG","description":"C# convert video using FFMPEG","content":"// console application\r\nusing System;\r\nusing System.IO;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nnamespace flvToMp4\r\n{\r\n    class Program\r\n    {\r\n        private const string DEFAULT_DIRECTORY = @\"C:\\Users\\mark prades\\Videos\";\r\n        private string[] INPUT_FILE_FORMATS = { \"flv\", \"avi\", \"wmv\" };\r\n        private string[] OUTPUT_FILE_FORMATS = { \"mp4\" };\r\n        private DirectoryInfo directoryInfo;\r\n        private FileInfo[] files;\r\n        private string output_file_format;\r\n        public Program()\r\n        {\r\n            Console.WriteLine(\"Movie converter ( using FFMPEG )\");\r\n        }\r\n        static void Main(string[] args)\r\n        {\r\n            //TODO rÃ©cuperer les paramÃ¨tres d'application\r\n            //@TODO vÃ©rifier si le premier paramÃ¨tre est un rÃ©pertoire\r\n            //@TODO vÃ©rifier si le second paramÃ¨tre est un type de fichier si oui\r\n            //@TODO vÃ©rifier si le troisiÃ¨me paramÃ¨tre est un type de fichier\r\n            //@TODO sinon , utiliser les valeurs par dÃ©faut\r\n            var program = new Program();\r\n            switch (args.Length)\r\n            {\r\n                case 1:\r\n                    if (Directory.Exists(args[0]))\r\n                    {\r\n                        program.processFiles(args[0]);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    if (Directory.Exists(args[0]))\r\n                    {\r\n                        program.processFiles(args[0], args[1]);\r\n                    }\r\n                    break;\r\n                default:\r\n                    program.processFiles(DEFAULT_DIRECTORY);\r\n                    break;\r\n            }\r\n        }\r\n        private void processFiles(string directory, string output_file_format = \"mp4\")\r\n        {\r\n            this.output_file_format = output_file_format;\r\n            // crÃ©er un objet pour le rÃ©pertoire\r\n            directoryInfo = new DirectoryInfo(directory);\r\n            // rÃ©cupÃ¨re les fichiers du rÃ©pertoire\r\n            // en filtrant les fichiers suivant les extensions contenues tableau INPUT_FILE_FORMATS\r\n            // ( on teste chaque extension en elevant le .\r\n            this.files = directoryInfo.GetFiles().Where(\r\n                c => INPUT_FILE_FORMATS.Contains(c.Extension.Remove(0, 1))\r\n                ).ToArray();\r\n            // on traite chaque fichier avec FFMPEG\r\n            // idÃ©allement , on lance FFMEG et on \r\n            // attend la fin de chaque traitement pour lancer le traitement suivant\r\n            files = files.OrderBy(o=>o.Length).ToArray();\r\n            files.All(c => { Console.WriteLine(c.ToString()); return true; });\r\n            if (files.Length > 0)\r\n            {\r\n                processMovieFile(files.First(), output_file_format);\r\n            }\r\n            Console.ReadLine();\r\n        }\r\n        private void processMovieFile(FileInfo fileInfo,string output_file_format)\r\n        {\r\n            System.Diagnostics.ProcessStartInfo myInfo =\r\n                new System.Diagnostics.ProcessStartInfo();\r\n            myInfo.FileName = \"ffmpeg\";\r\n            myInfo.Arguments = \" -y -i \\\"\" + fileInfo.Name +\"\\\"  \\\"\"+\r\n              fileInfo.Name.Remove(fileInfo.Name.LastIndexOf(fileInfo.Extension))+\".\"+output_file_format+\"\\\" \";\r\n            myInfo.WorkingDirectory = directoryInfo.FullName;\r\n            System.Diagnostics.Process process = new System.Diagnostics.Process();\r\n            process.EnableRaisingEvents = true;\r\n            process.Exited += new EventHandler(process_Exited);\r\n            process.StartInfo = myInfo;\r\n            process.StartInfo.RedirectStandardOutput = true;\r\n            process.StartInfo.UseShellExecute = false;\r\n            process.Start();\r\n        }\r\n        void process_Exited(object sender, EventArgs e)\r\n        {\r\n            //throw new NotImplementedException();\r\n            Console.WriteLine(\"end of process\");\r\n            files = files.Where(c => c != files.First()).ToArray();\r\n            if (files.Length > 0)\r\n            {\r\n                processMovieFile(files.First(), output_file_format);\r\n            }\r\n        }\r\n    }\r\n}\r\n","created_at":"2013-03-19 11:58:21 +0000","updated_at":"2013-03-19 11:58:21 +0000","private":0,"tags":"N;"},{"id":5,"category_id":6,"user_id":6,"title":"SQLite  - How to show the schema for a SQLite database table","description":"description of the snippet","content":"To view the schema for a SQLite database table, just use the SQLite schema dot command, like this:\r\n\r\nsqlite> .schema salespeople\r\n(Note that you don't need to use a semi-colon at the end of that command.)\r\n\r\nFor my \"salespeople\" example SQLite table, this SQLite schema command produces the following output:\r\n\r\nCREATE TABLE salespeople (\r\n  id INTEGER PRIMARY KEY,\r\n  first_name TEXT NOT NULL,\r\n  last_name TEXT NOT NULL,\r\n  commission_rate REAL NOT NULL\r\n);\r\n","created_at":"2013-03-19 11:58:21 +0000","updated_at":"2013-03-19 11:58:21 +0000","private":0,"tags":"N;"},{"id":6,"category_id":1,"user_id":6,"title":"Creating Web Page Templates with PHP and Twig ","description":"shell> pear channel-discover pear.twig-project.org\r\nshell> pear install twig/Twig","content":"<html>\r\n  <head></head>\r\n  <body>\r\n  <h2>Account successfully created!</h2>\r\n\r\n  <p>Hello {{ name }}</p>\r\n\r\n  <p>Thank you for registering with us. Your account details are as follows: </p>\r\n\r\n  <p style=\"margin-left: 10px\">\r\n  Username: {{ username }} <br/>\r\n  Password: {{ password }}\r\n  </p>\r\n\r\n  <p>You've already been logged in, so go on in and have some fun!</p>\r\n  </body>\r\n</html>","created_at":"2013-03-19 11:58:21 +0000","updated_at":"2013-03-19 11:58:21 +0000","private":0,"tags":"N;"},{"id":7,"category_id":1,"user_id":6,"title":"Getter / Setter implicites PHP class","description":"Getter / Setter implicites PHP class","content":"<?php\r\n\r\n/*\r\n * Getter / Setter implicites PHP class\r\n */\r\n\r\nclass Dummy {\r\n\r\n  protected $firstName = \"\";\r\n  protected $lastName = \"\";\r\n\r\n  function __set($prop, $value) {\r\n    if (property_exists($this, $prop)):\r\n      $propName = ucwords($prop);\r\n      $setter = \"set$propName\";\r\n      if (method_exists($this, $setter)):\r\n        $this->$setter($value);\r\n      else:\r\n        $this->$prop = $value;\r\n      endif;\r\n    endif;\r\n  }\r\n\r\n  function setFirstName($value) {\r\n    echo \"setting Name = $value\";\r\n    $this->firstName = $value;\r\n  }\r\n\r\n}\r\n\r\n$dummy = new Dummy();\r\n$dummy->firstName = \"Martin\";\r\n$dummy->lastName = \"Circus\";\r\nvar_dump($dummy);\r\n?>\r\n","created_at":"2013-03-19 11:58:21 +0000","updated_at":"2013-03-19 11:58:21 +0000","private":0,"tags":"N;"},{"id":8,"category_id":1,"user_id":6,"title":"Activer Zend_Db_Profiler","description":"Activer Zend_Db_Profiler","content":"// dans le bootstrap.php\r\n//Activer Zend_Db_Profiler\r\nresources.db.params.profiler=true","created_at":"2013-03-19 11:58:21 +0000","updated_at":"2013-03-19 11:58:21 +0000","private":0,"tags":"N;"},{"id":9,"category_id":1,"user_id":6,"title":"Zend Set default controller","description":"Zend Set default controller","content":"; in the application.ini file\r\nresources.frontController.defaultControllerName=\"site\"","created_at":"2013-03-19 11:58:21 +0000","updated_at":"2013-03-19 11:58:21 +0000","private":0,"tags":"N;"},{"id":10,"category_id":1,"user_id":6,"title":"Zend : use Zend_Cache with Zend_Translate","description":"Zend : use Zend_Cache with Zend_Translate","content":"$cache = Zend_Cache::factory('Core',\r\n                             'File',\r\n                             $frontendOptions,\r\n                             $backendOptions);\r\nZend_Translate::setCache($cache);\r\n$translate = new Zend_Translate(\r\n    array(\r\n        'adapter' => 'gettext',\r\n        'content' => '/path/to/translate.mo',\r\n        'locale'  => 'en'\r\n    )\r\n);","created_at":"2013-03-19 11:58:21 +0000","updated_at":"2013-03-19 11:58:21 +0000","private":0,"tags":"N;"},{"id":11,"category_id":1,"user_id":6,"title":"Zend framework : Access layout object","description":"Zend framework : Access layout object","content":"//Within view scripts: use the layout() view helper, \r\n//which returns the Zend_Layout\r\n//instance registered with the front controller plugin.\r\n\r\n<?php $layout = $this->layout(); ?>\r\n\r\n//Within action controllers: use the layout() action helper, \r\n//which acts just like the view helper.\r\n\r\n// Calling helper as a method of the helper broker:\r\n$layout = $this->_helper->layout();\r\n \r\n// Or, more verbosely:\r\n$helper = $this->_helper->getHelper('Layout');\r\n$layout = $helper->getLayoutInstance();\r\n\r\n//Elsewhere: use the static method getMvcInstance(). \r\n//This will return the layout instance registered by the bootstrap resource.\r\n\r\n$layout = Zend_Layout::getMvcInstance();\r\n\r\n//Via the bootstrap: retrieve the layout resource, \r\n//which will be the Zend_Layout instance.\r\n\r\n$layout = $bootstrap->getResource('Layout');","created_at":"2013-03-19 11:58:21 +0000","updated_at":"2013-03-19 11:58:21 +0000","private":0,"tags":"N;"},{"id":12,"category_id":1,"user_id":6,"title":"Zend Translate : create a translate plugin","description":"Zend Translate : create a translate plugin","content":"<?php\r\nclass CMS_Application_Resource_Translate extends Zend_Application_Resource_ResourceAbstract{\r\n  function init(){\r\n    $options =$this->getOptions();\r\n    $adapter = $options['adapter'];\r\n    $defaultTranslation = $options['default']['file'];\r\n    $defaultLocale = $options['default']['locale'];\r\n    $translate = new Zend_Translate($adapter,$defaultTranslation,$defaultLocale);\r\n    foreach($options['translation'] as $locale => $translation):\r\n      $translate->addTranslation($translation,$locale);\r\n    endforeach;\r\n    Zend_Registry::set('Zend_Translate',$translate);\r\n    return $translate;\r\n  }\r\n}\r\n","created_at":"2013-03-19 11:58:21 +0000","updated_at":"2013-03-19 11:58:21 +0000","private":0,"tags":"N;"},{"id":13,"category_id":1,"user_id":6,"title":"ZEND : Access view values from partialLoop","description":"ZEND : Access view values from partialLoop","content":"// in the view template:\r\n \r\n$this->bla = 'blabla'; //value we will access\r\necho $this->partialLoop('imageviews/thumbnails.phtml',$this->searchResults);\r\n \r\n//in the partialLoop template:\r\n \r\n<?php echo $this->partialLoop()->view->bla // echo's blabla ?>\r\n \r\n//You can ofcourse also retrieve the view in the partialLoop as anywhere like this: \r\n$view = Zend_Layout::getMvcInstance()->getView();\r\n\r\n\r\n","created_at":"2013-03-19 11:58:21 +0000","updated_at":"2013-03-19 11:58:21 +0000","private":0,"tags":"N;"},{"id":14,"category_id":1,"user_id":6,"title":"Zend - Conditional validation of shipping address using Zend sub forms ","description":"Zend - Conditional validation of shipping address using Zend sub forms ","content":"\r\n'http://www.designing4u.de/2011/07/conditional-validation-of-shipping-address-using-zend-sub-forms/'\r\n\r\n/*Conditional validation of shipping address using Zend sub forms\r\nZend Framework documentation gives you an excellent example on how\r\n to use sub forms. Sub forms let you split the logic of your application\r\n into smaller parts, validate it on demand and after collecting all the \r\ninformation validate the whole entity. Pretty cool huh? Lately I was \r\nimplementing a shopping cart. In the last part of the check out process \r\nthe user has to provide the billing address and shipping address. \r\nUsually they are the same but sometimes they differ. Here is how\r\n I solved the conditional validation of the form fields for orders where shipping address differs.\r\n\r\nFor the brevity I removed some of the fields from the form and left \r\nonly first name and last name just to demonstrate how your form should look like. \r\nI also removed validations, filters and decorators. In your application \r\nyou should add all fields that are necessary in your checkout process \r\nand attach the corresponding validations to those fields.\r\n\r\nThe code is pretty simple. In the init method you have to initialize\r\n sub form for billing and sub form for shipping. You then add the \r\nfields to the sub forms, attach validations to the billing forms\r\n and the checkbox to the shipping sub form.\r\n*/\r\n\r\n<?php\r\n/**\r\n * Application_Form_Address class\r\n *\r\n * Class is responsible for collecting the buyers address.\r\n *\r\n * @author Wojciech Gancarczyk <gancarczyk@gmail.com>\r\n */\r\nclass Application_Form_Address extends Zend_Form\r\n{\r\n    /**\r\n     * Initializes the form and sets the elements.\r\n     *\r\n     * @return void\r\n     */\r\n    public function init()\r\n    {\r\n        $billing = new Zend_Form_SubForm();\r\n        $this->addFields($billing)->attachValidators($billing);\r\n \r\n        $shipping = new Zend_Form_SubForm();\r\n        $differs = new Zend_Form_Element_Checkbox('differs');\r\n        $differs->setLabel('Shipping differs')->setValue('0');\r\n        $shipping->addElement($differs);\r\n        $this->addFields($shipping);\r\n \r\n        $this->addSubForms(array(\r\n            'billing' => $billing,\r\n            'shipping' => $shipping\r\n        ));\r\n \r\n        $submit = new Zend_Form_Element_Submit('submit');\r\n        $this->addElement($submit);\r\n    }\r\n \r\n    /**\r\n     * Add fields to the sub form.\r\n     *\r\n     * @param Zend_Form_SubForm $form\r\n     * @return Application_Form_Address\r\n     */\r\n    public function addFields(Zend_Form_SubForm $form)\r\n    {\r\n        $firstname = new Zend_Form_Element_Text('firstname');\r\n        $firstname->setLabel('Firstname');\r\n        $form->addElement($firstname);\r\n \r\n        $lastname = new Zend_Form_Element_Text('lastname');\r\n        $lastname->setLabel('Lastname');\r\n        $form->addElement($lastname);\r\n \r\n        return $this;\r\n    }\r\n \r\n    /**\r\n     * Attach validators to the fields in the sub form.\r\n     *\r\n     * @param Zend_Form_SubForm $form\r\n     * @return void\r\n     */\r\n    public function attachValidators(Zend_Form_SubForm $form)\r\n    {\r\n        $form->getElement('firstname')->setRequired(true);\r\n        $form->getElement('lastname')->setRequired(true);\r\n    }\r\n \r\n    /**\r\n     * Overwrites the parent method and attaches\r\n     * conditional validators only if shipping address\r\n     * differs.\r\n     *\r\n     * @param array $data\r\n     * @return bool\r\n     */\r\n    public function isValid($data)\r\n    {\r\n        $this->populate($data);\r\n \r\n        $shipping = $this->getSubForm('shipping');\r\n        if ((int) $shipping->getElement('differs')->getValue() === 1) {\r\n            $this->attachValidators($shipping);\r\n        }\r\n \r\n        return parent::isValid($data);\r\n    }\r\n \r\n    /**\r\n     * Process the data.\r\n     *\r\n     * @return void\r\n     */\r\n    public function process()\r\n    {\r\n        // do something with the data\r\n    }\r\n}\r\n/*The interesting part is the isValid method, which overwrites\r\n the method in the parent class. Before the validation will \r\nbe delegated to the parent class, the data form the request\r\n is populated in the form. If the value of checkbox differs \r\nchanged to 1 (meaning the user wants to provide a different \r\nshipping address), the validations are attached to the shipping form.*/\r\n\r\npublic function addressAction()\r\n{\r\n    $form = new Application_Form_Address();\r\n    if ($this->_request->isPost()) {\r\n        if ($form->isValid($this->_request->getPost())) {\r\n            $form->process();\r\n            // do something ...\r\n        }\r\n    }\r\n    $this->view->assign(array('form' => $form));\r\n}\r\n/*\r\nAs usually in your controller you would initialize the form,\r\n check if the request is a post request, validate the form \r\nand redisplay it if necessary. Go and try it out, if the\r\n differs checkbox won't be clicked, only the billing form */\r\nwill be validated, in other case both of the form will be validated.","created_at":"2013-03-19 11:58:21 +0000","updated_at":"2013-03-19 11:58:21 +0000","private":0,"tags":"N;"},{"id":15,"category_id":11,"user_id":6,"title":"Htaccess - RewriteBase","description":"Htaccess - RewriteBase","content":"RewriteEngine On\r\nRewriteBase /urlfragment","created_at":"2013-03-19 11:58:21 +0000","updated_at":"2013-03-19 16:29:47 +0000","private":0,"tags":"N;"},{"id":16,"category_id":1,"user_id":6,"title":"Zend - Autocomplete Control with ZendX_JQuery","description":"Zend - Autocomplete Control with ZendX_JQuery","content":"SIMPLE AUTO COMPLETE\r\n--------------------\r\n// in the layout head tag\r\n<?=$this->headlink->appendStylesheet(\"...path to jquery ui stylesheet\")?>\r\n<?=$this->jQuery()->setVersion('1.4.2')->setUIVersion(\"1.8.2\")?>\r\n\r\n// in a view file\r\n<h1>auto complete\r\n<form>\r\n<?=$this->autoCompleteElement?>\r\n</form>\r\n\r\n// in a controller action\r\n$emt = new ZendX_JQuery_Form_Element_AutoComplete('ac');\r\n$emt->setLabel('Autocomplete');\r\n$emt->setJQueryParam('data',array('Montreal','Chicago','Amsterdam','Boston','Albany'));\r\n$this->view->autoCompleteElement = $emt;\r\n","created_at":"2013-03-19 11:58:21 +0000","updated_at":"2013-03-19 11:58:21 +0000","private":0,"tags":"N;"},{"id":17,"category_id":1,"user_id":6,"title":"Zend Framework -  Get the server url","description":"How to get the server url in Zend Framework.","content":"USING A VIEW HELPER\r\n\r\n// application/views/scripts/index/index.phtml\r\n\r\n<?=$this->serverUrl()?> // returns the server url","created_at":"2013-03-19 11:58:21 +0000","updated_at":"2013-03-19 11:58:21 +0000","private":0,"tags":"N;"},{"id":18,"category_id":1,"user_id":6,"title":"Zend Framework - Create a captcha image ","description":"How to create a captcha image form element","content":"<?php\r\n$captcha = new Zend_Form_Element_Captcha('captcha', array(\r\n    'autocomplete' => 'off',\r\n    'label' => 'Entrez les 4 caractÃ¨res affichÃ©s dans l\\'image :',\r\n    'maxlength' => 4,\r\n    'size' => 4,\r\n    'captcha' => array(\r\n        'captcha' => 'Image',\r\n        'dotNoiseLevel' => 50, // Valeur initiale = 100\r\n        'lineNoiseLevel' => 2, // Valeur initiale = 5\r\n        'font' => APPLICATION_PATH . '/../fonts/arial.ttf',\r\n        'fontSize' => 28,\r\n        'imgDir' => APPLICATION_PATH . '/../public/captcha',\r\n        'imgUrl' => '/captcha/',\r\n        'timeout' => 300,\r\n        'wordLen' => 4\r\n    )\r\n));\r\n?>","created_at":"2013-03-19 11:58:21 +0000","updated_at":"2013-03-19 11:58:21 +0000","private":0,"tags":"N;"},{"id":19,"category_id":2,"user_id":6,"title":"Serialize form datas","description":"How to serialize form datas","content":"(function(formId, target) {\r\n    var getForm = function() {\r\n        return document.getElementById(formId);\r\n    };\r\n    var getTarget = function() {\r\n        return document.getElementById(target);\r\n    };\r\n    var makeTextNode = function(_string) {\r\n        return document.createTextNode(_string);\r\n    };\r\n    var makeDatas = function(form) {\r\n        HTMLCollection.prototype.map = Array.prototype.map;\r\n        return form.elements.map(function(row, i) {\r\n            var o = {};\r\n            o[row.name] = row.value;\r\n            return o\r\n        });\r\n    }\r\n    getTarget().appendChild(makeTextNode(JSON.stringify(makeDatas(getForm()))));\r\n})(\"tabledata\", \"pieChart\");â€‹","created_at":"2013-03-19 11:58:21 +0000","updated_at":"2013-03-19 11:58:21 +0000","private":0,"tags":"N;"},{"id":20,"category_id":1,"user_id":6,"title":"Zend framework : Configure Mail class","description":"Zend framework : Configure Mail class","content":";---------------------------------\r\n;@NOTE @ZEND email configuration |\r\n;---------------------------------\r\nresources.mail.transport.type       = smtp\r\nresources.mail.transport.ssl        = ssl        \r\nresources.mail.transport.port       = port\r\nresources.mail.transport.host       = host\r\nresources.mail.transport.auth       = login\r\nresources.mail.transport.username   = username   \r\nresources.mail.transport.password   = password   \r\nresources.mail.transport.register   = true ; True by default\r\nresources.mail.defaultFrom.email    = support@dsnippet.com\r\nresources.mail.defaultFrom.name     = Support\r\nresources.mail.defaultReplyTo.email = support@dsnippet.com\r\nresources.mail.defaultReplyTo.name  = Support","created_at":"2013-03-19 11:58:21 +0000","updated_at":"2013-03-19 11:58:21 +0000","private":0,"tags":"N;"},{"id":21,"category_id":4,"user_id":6,"title":"DL, DT and DD","description":"How to use DL, DT and DD","content":"<dl>\r\n <dt>Terme 1 Ã  dÃ©finir</dt>\r\n  <dd>Voici la dÃ©finition \r\n  pour le terme 1</dd>\r\n <dt>Terme 2 Ã  dÃ©finir</dt>\r\n  <dd>Voici la dÃ©finition \r\n  pour le terme 2</dd>\r\n</dl> ","created_at":"2013-03-19 11:58:21 +0000","updated_at":"2013-03-19 11:58:21 +0000","private":0,"tags":"N;"},{"id":22,"category_id":6,"user_id":6,"title":"Sqlite - Create a timestamp","description":"How to create a timestamp in SQLite.","content":"select strftime('%s','now');","created_at":"2013-03-19 11:58:21 +0000","updated_at":"2013-03-19 11:58:21 +0000","private":0,"tags":"N;"},{"id":23,"category_id":2,"user_id":6,"title":"jQuery UI- Progress bar","description":"How to set up a progress bar with jQuery UI","content":"<meta charset=\"utf-8\">\r\n\t<style>\r\n\t.ui-progressbar-value { background-image: url(images/pbar-ani.gif); }\r\n\t</style>\r\n\t<script>\r\n\t$(function() {\r\n\t\t$( \"#progressbar\" ).progressbar({\r\n\t\t\tvalue: 59\r\n\t\t});\r\n\t});\r\n\t</script>\r\n<div class=\"demo\">\r\n<div id=\"progressbar\"></div>","created_at":"2013-03-19 11:58:21 +0000","updated_at":"2013-03-19 11:58:21 +0000","private":0,"tags":"N;"},{"id":24,"category_id":2,"user_id":6,"title":"Underscore - Bind function","description":"How to use underscore bind function","content":"_.bind(function, object, [*arguments]) \r\n//Bind a function to an object, meaning that whenever the function is called, the value of \r\n//this will be the object. Optionally, bind arguments to the function to pre-fill them, \r\n//also known as partial application.\r\n\r\nvar func = function(greeting){ return greeting + ': ' + this.name };\r\nfunc = _.bind(func, {name : 'moe'}, 'hi');\r\nfunc();\r\n=> 'hi: moe'","created_at":"2013-03-19 11:58:21 +0000","updated_at":"2013-03-19 11:58:21 +0000","private":0,"tags":"N;"},{"id":25,"category_id":1,"user_id":6,"title":"Zend - Configure Zend Cache","description":"Zend - Configure Zend Cache","content":"// in application.ini file\r\nresources.cachemanager.database.frontend.name = Core\r\nresources.cachemanager.database.frontend.customFrontendNaming = false\r\nresources.cachemanager.database.frontend.options.lifetime = 7200\r\nresources.cachemanager.database.frontend.options.automatic_serialization = true\r\nresources.cachemanager.database.backend.name = File\r\nresources.cachemanager.database.backend.customBackendNaming = false\r\nresources.cachemanager.database.backend.options.cache_dir = \"/path/to/cache\"\r\nresources.cachemanager.database.frontendBackendAutoload = false\r\n\r\n//get the cache manager in the application\r\n\r\n$manager = $this->getFrontController()\r\n                ->getParam('bootstrap')\r\n                ->getResource('cachemanager')\r\n                ->getCacheManager();\r\n$dbCache = $manager->getCache('database');","created_at":"2013-03-19 11:58:21 +0000","updated_at":"2013-03-19 11:58:21 +0000","private":0,"tags":"N;"},{"id":26,"category_id":3,"user_id":6,"title":"Hello world","description":"Hello world in AS3.","content":"trace(\"Hello world!\");\r\n\r\nimport flash.text.TextField;\r\nvar champ:TextField = new TextField();\r\nchamp.text = \"Hello World!\";\r\nthis.addChild(champ);","created_at":"2013-03-19 11:58:21 +0000","updated_at":"2013-03-19 11:58:21 +0000","private":0,"tags":"N;"},{"id":27,"category_id":11,"user_id":6,"title":"Hello world in Bash","description":"Hello world in Bash","content":"#!/bin/bash\r\necho Hello world","created_at":"2013-03-19 11:58:21 +0000","updated_at":"2013-03-19 11:58:21 +0000","private":0,"tags":"N;"},{"id":28,"category_id":16,"user_id":6,"title":"Hello world in C","description":"Hello world in C","content":"#include <stdio.h>\r\n \r\nint main(void)// ou int (argc, char *argv[]) \r\n{\r\n    printf(\"Hello world!\");\r\n    return 0;\r\n}","created_at":"2013-03-19 11:58:21 +0000","updated_at":"2013-03-19 11:58:21 +0000","private":0,"tags":"N;"},{"id":29,"category_id":14,"user_id":6,"title":"Class definition","description":"Class definition","content":"class Animal\r\n  constructor: (@name) ->\r\n\r\n  move: (meters) ->\r\n    alert @name + \" moved #{meters}m.\"\r\n\r\nclass Snake extends Animal\r\n  move: ->\r\n    alert \"Slithering...\"\r\n    super 5\r\n\r\nclass Horse extends Animal\r\n  move: ->\r\n    alert \"Galloping...\"\r\n    super 45\r\n\r\nsam = new Snake \"Sammy the Python\"\r\ntom = new Horse \"Tommy the Palomino\"\r\n\r\nsam.move()\r\ntom.move()\r\n","created_at":"2013-03-19 11:58:21 +0000","updated_at":"2013-03-19 11:58:21 +0000","private":0,"tags":"N;"},{"id":30,"category_id":1,"user_id":6,"title":"Zend - decoding Json string","description":"How to decode json string with Zend_Json","content":"// Obtention d'une valeur\r\n$phpNatif = Zend_Json::decode($valeurCodee);\r\n \r\n// Codage pour renvoi au client :\r\n$json = Zend_Json::encode($phpNatif);","created_at":"2013-03-19 11:58:21 +0000","updated_at":"2013-03-19 11:58:21 +0000","private":0,"tags":"N;"},{"id":31,"category_id":11,"user_id":6,"title":"Vim - how to write a vimrc file","description":"Vim - how to write a vimrc file","content":"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => General\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" Sets how many lines of history VIM has to remember\r\nset history=700\r\n\r\n\" Enable filetype plugin\r\nfiletype plugin on\r\nfiletype indent on\r\n\r\n\" Set to auto read when a file is changed from the outside\r\nset autoread\r\n\r\n\" With a map leader it's possible to do extra key combinations\r\n\" like <leader>w saves the current file\r\nlet mapleader = \",\"\r\nlet g:mapleader = \",\"\r\n\r\n\" Fast saving\r\nnmap <leader>w :w!<cr>\r\n\r\n\" Fast editing of the .vimrc\r\nmap <leader>e :e! ~/.vim_runtime/vimrc<cr>\r\n\r\n\" When vimrc is edited, reload it\r\nautocmd! bufwritepost vimrc source ~/.vim_runtime/vimrc\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => VIM user interface\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" Set 7 lines to the curors - when moving vertical..\r\nset so=7\r\n\r\nset wildmenu \"Turn on WiLd menu\r\n\r\nset ruler \"Always show current position\r\n\r\nset cmdheight=2 \"The commandbar height\r\n\r\nset hid \"Change buffer - without saving\r\n\r\n\" Set backspace config\r\nset backspace=eol,start,indent\r\nset whichwrap+=<,>,h,l\r\n\r\nset ignorecase \"Ignore case when searching\r\nset smartcase\r\n\r\nset hlsearch \"Highlight search things\r\n\r\nset incsearch \"Make search act like search in modern browsers\r\nset nolazyredraw \"Don't redraw while executing macros \r\n\r\nset magic \"Set magic on, for regular expressions\r\n\r\nset showmatch \"Show matching bracets when text indicator is over them\r\nset mat=2 \"How many tenths of a second to blink\r\n\r\n\" No sound on errors\r\nset noerrorbells\r\nset novisualbell\r\nset t_vb=\r\nset tm=500\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Colors and Fonts\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\nsyntax enable \"Enable syntax hl\r\n\r\n\" Set font according to system\r\nif MySys() == \"mac\"\r\n  set gfn=Menlo:h14\r\n  set shell=/bin/bash\r\nelseif MySys() == \"windows\"\r\n  set gfn=Bitstream\\ Vera\\ Sans\\ Mono:h10\r\nelseif MySys() == \"linux\"\r\n  set gfn=Monospace\\ 10\r\n  set shell=/bin/bash\r\nendif\r\n\r\nif has(\"gui_running\")\r\n  set guioptions-=T\r\n  set t_Co=256\r\n  set background=dark\r\n  colorscheme peaksea\r\n  set nonu\r\nelse\r\n  colorscheme zellner\r\n  set background=dark\r\n\r\n  set nonu\r\nendif\r\n\r\nset encoding=utf8\r\ntry\r\n    lang en_US\r\ncatch\r\nendtry\r\n\r\nset ffs=unix,dos,mac \"Default file types\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Files, backups and undo\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" Turn backup off, since most stuff is in SVN, git anyway...\r\nset nobackup\r\nset nowb\r\nset noswapfile\r\n\r\n\"Persistent undo\r\ntry\r\n    if MySys() == \"windows\"\r\n      set undodir=C:\\Windows\\Temp\r\n    else\r\n      set undodir=~/.vim_runtime/undodir\r\n    endif\r\n\r\n    set undofile\r\ncatch\r\nendtry\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Text, tab and indent related\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\nset expandtab\r\nset shiftwidth=4\r\nset tabstop=4\r\nset smarttab\r\n\r\nset lbr\r\nset tw=500\r\n\r\nset ai \"Auto indent\r\nset si \"Smart indet\r\nset wrap \"Wrap lines\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Visual mode related\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" Really useful!\r\n\"  In visual mode when you press * or # to search for the current selection\r\nvnoremap <silent> * :call VisualSearch('f')<CR>\r\nvnoremap <silent> # :call VisualSearch('b')<CR>\r\n\r\n\" When you press gv you vimgrep after the selected text\r\nvnoremap <silent> gv :call VisualSearch('gv')<CR>\r\nmap <leader>g :vimgrep // **/*.<left><left><left><left><left><left><left>\r\n\r\n\r\nfunction! CmdLine(str)\r\n    exe \"menu Foo.Bar :\" . a:str\r\n    emenu Foo.Bar\r\n    unmenu Foo\r\nendfunction\r\n\r\n\" From an idea by Michael Naumann\r\nfunction! VisualSearch(direction) range\r\n    let l:saved_reg = @\"\r\n    execute \"normal! vgvy\"\r\n\r\n    let l:pattern = escape(@\", '\\\\/.*$^~[]')\r\n    let l:pattern = substitute(l:pattern, \"\\n$\", \"\", \"\")\r\n\r\n    if a:direction == 'b'\r\n        execute \"normal ?\" . l:pattern . \"^M\"\r\n    elseif a:direction == 'gv'\r\n        call CmdLine(\"vimgrep \" . '/'. l:pattern . '/' . ' **/*.')\r\n    elseif a:direction == 'f'\r\n        execute \"normal /\" . l:pattern . \"^M\"\r\n    endif\r\n\r\n    let @/ = l:pattern\r\n    let @\" = l:saved_reg\r\nendfunction\r\n\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Command mode related\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" Smart mappings on the command line\r\ncno $h e ~/\r\ncno $d e ~/Desktop/\r\ncno $j e ./\r\ncno $c e <C-\\>eCurrentFileDir(\"e\")<cr>\r\n\r\n\" $q is super useful when browsing on the command line\r\ncno $q <C-\\>eDeleteTillSlash()<cr>\r\n\r\n\" Bash like keys for the command line\r\ncnoremap <C-A>      <Home>\r\ncnoremap <C-E>      <End>\r\ncnoremap <C-K>      <C-U>\r\n\r\ncnoremap <C-P> <Up>\r\ncnoremap <C-N> <Down>\r\n\r\n\" Useful on some European keyboards\r\nmap Â½ $\r\nimap Â½ $\r\nvmap Â½ $\r\ncmap Â½ $\r\n\r\n\r\nfunc! Cwd()\r\n  let cwd = getcwd()\r\n  return \"e \" . cwd \r\nendfunc\r\n\r\nfunc! DeleteTillSlash()\r\n  let g:cmd = getcmdline()\r\n  if MySys() == \"linux\" || MySys() == \"mac\"\r\n    let g:cmd_edited = substitute(g:cmd, \"\\\\(.*\\[/\\]\\\\).*\", \"\\\\1\", \"\")\r\n  else\r\n    let g:cmd_edited = substitute(g:cmd, \"\\\\(.*\\[\\\\\\\\]\\\\).*\", \"\\\\1\", \"\")\r\n  endif\r\n  if g:cmd == g:cmd_edited\r\n    if MySys() == \"linux\" || MySys() == \"mac\"\r\n      let g:cmd_edited = substitute(g:cmd, \"\\\\(.*\\[/\\]\\\\).*/\", \"\\\\1\", \"\")\r\n    else\r\n      let g:cmd_edited = substitute(g:cmd, \"\\\\(.*\\[\\\\\\\\\\]\\\\).*\\[\\\\\\\\\\]\", \"\\\\1\", \"\")\r\n    endif\r\n  endif\r\n  return g:cmd_edited\r\nendfunc\r\n\r\nfunc! CurrentFileDir(cmd)\r\n  return a:cmd . \" \" . expand(\"%:p:h\") . \"/\"\r\nendfunc\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Moving around, tabs and buffers\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" Map space to / (search) and c-space to ? (backgwards search)\r\nmap <space> /\r\nmap <c-space> ?\r\nmap <silent> <leader><cr> :noh<cr>\r\n\r\n\" Smart way to move btw. windows\r\nmap <C-j> <C-W>j\r\nmap <C-k> <C-W>k\r\nmap <C-h> <C-W>h\r\nmap <C-l> <C-W>l\r\n\r\n\" Close the current buffer\r\nmap <leader>bd :Bclose<cr>\r\n\r\n\" Close all the buffers\r\nmap <leader>ba :1,300 bd!<cr>\r\n\r\n\" Use the arrows to something usefull\r\nmap <right> :bn<cr>\r\nmap <left> :bp<cr>\r\n\r\n\" Tab configuration\r\nmap <leader>tn :tabnew<cr>\r\nmap <leader>te :tabedit\r\nmap <leader>tc :tabclose<cr>\r\nmap <leader>tm :tabmove\r\n\r\n\" When pressing <leader>cd switch to the directory of the open buffer\r\nmap <leader>cd :cd %:p:h<cr>\r\n\r\n\r\ncommand! Bclose call <SID>BufcloseCloseIt()\r\nfunction! <SID>BufcloseCloseIt()\r\n   let l:currentBufNum = bufnr(\"%\")\r\n   let l:alternateBufNum = bufnr(\"#\")\r\n\r\n   if buflisted(l:alternateBufNum)\r\n     buffer #\r\n   else\r\n     bnext\r\n   endif\r\n\r\n   if bufnr(\"%\") == l:currentBufNum\r\n     new\r\n   endif\r\n\r\n   if buflisted(l:currentBufNum)\r\n     execute(\"bdelete! \".l:currentBufNum)\r\n   endif\r\nendfunction\r\n\r\n\" Specify the behavior when switching between buffers \r\ntry\r\n  set switchbuf=usetab\r\n  set stal=2\r\ncatch\r\nendtry\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Statusline\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" Always hide the statusline\r\nset laststatus=2\r\n\r\n\" Format the statusline\r\nset statusline=\\ %{HasPaste()}%F%m%r%h\\ %w\\ \\ CWD:\\ %r%{CurDir()}%h\\ \\ \\ Line:\\ %l/%L:%c\r\n\r\n\r\nfunction! CurDir()\r\n    let curdir = substitute(getcwd(), '/Users/amir/', \"~/\", \"g\")\r\n    return curdir\r\nendfunction\r\n\r\nfunction! HasPaste()\r\n    if &paste\r\n        return 'PASTE MODE  '\r\n    else\r\n        return ''\r\n    endif\r\nendfunction\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Parenthesis/bracket expanding\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\nvnoremap $1 <esc>`>a)<esc>`<i(<esc>\r\nvnoremap $2 <esc>`>a]<esc>`<i[<esc>\r\nvnoremap $3 <esc>`>a}<esc>`<i{<esc>\r\nvnoremap $$ <esc>`>a\"<esc>`<i\"<esc>\r\nvnoremap $q <esc>`>a'<esc>`<i'<esc>\r\nvnoremap $e <esc>`>a\"<esc>`<i\"<esc>\r\n\r\n\" Map auto complete of (, \", ', [\r\ninoremap $1 ()<esc>i\r\ninoremap $2 []<esc>i\r\ninoremap $3 {}<esc>i\r\ninoremap $4 {<esc>o}<esc>O\r\ninoremap $q ''<esc>i\r\ninoremap $e \"\"<esc>i\r\ninoremap $t <><esc>i\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => General Abbrevs\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\niab xdate <c-r>=strftime(\"%d/%m/%y %H:%M:%S\")<cr>\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Editing mappings\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\"Remap VIM 0\r\nmap 0 ^\r\n\r\n\"Move a line of text using ALT+[jk] or Comamnd+[jk] on mac\r\nnmap <M-j> mz:m+<cr>`z\r\nnmap <M-k> mz:m-2<cr>`z\r\nvmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z\r\nvmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z\r\n\r\nif MySys() == \"mac\"\r\n  nmap <D-j> <M-j>\r\n  nmap <D-k> <M-k>\r\n  vmap <D-j> <M-j>\r\n  vmap <D-k> <M-k>\r\nendif\r\n\r\n\"Delete trailing white space, useful for Python ;)\r\nfunc! DeleteTrailingWS()\r\n  exe \"normal mz\"\r\n  %s/\\s\\+$//ge\r\n  exe \"normal `z\"\r\nendfunc\r\nautocmd BufWrite *.py :call DeleteTrailingWS()\r\n\r\nset guitablabel=%t\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Cope\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" Do :help cope if you are unsure what cope is. It's super useful!\r\nmap <leader>cc :botright cope<cr>\r\nmap <leader>n :cn<cr>\r\nmap <leader>p :cp<cr>\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => bufExplorer plugin\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\nlet g:bufExplorerDefaultHelp=0\r\nlet g:bufExplorerShowRelativePath=1\r\nmap <leader>o :BufExplorer<cr>\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Minibuffer plugin\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\nlet g:miniBufExplModSelTarget = 1\r\nlet g:miniBufExplorerMoreThanOne = 2\r\nlet g:miniBufExplModSelTarget = 0\r\nlet g:miniBufExplUseSingleClick = 1\r\nlet g:miniBufExplMapWindowNavVim = 1\r\nlet g:miniBufExplVSplit = 25\r\nlet g:miniBufExplSplitBelow=1\r\n\r\nlet g:bufExplorerSortBy = \"name\"\r\n\r\nautocmd BufRead,BufNew :call UMiniBufExplorer\r\n\r\nmap <leader>u :TMiniBufExplorer<cr>\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Omni complete functions\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\nautocmd FileType css set omnifunc=csscomplete#CompleteCSS\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Spell checking\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\"Pressing ,ss will toggle and untoggle spell checking\r\nmap <leader>ss :setlocal spell!<cr>\r\n\r\n\"Shortcuts using <leader>\r\nmap <leader>sn ]s\r\nmap <leader>sp [s\r\nmap <leader>sa zg\r\nmap <leader>s? z=\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Python section\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\nlet python_highlight_all = 1\r\nau FileType python syn keyword pythonDecorator True None False self\r\n\r\nau BufNewFile,BufRead *.jinja set syntax=htmljinja\r\nau BufNewFile,BufRead *.mako set ft=mako\r\n\r\nau FileType python inoremap <buffer> $r return\r\nau FileType python inoremap <buffer> $i import\r\nau FileType python inoremap <buffer> $p print\r\nau FileType python inoremap <buffer> $f #--- PH ----------------------------------------------<esc>FP2xi\r\nau FileType python map <buffer> <leader>1 /class\r\nau FileType python map <buffer> <leader>2 /def\r\nau FileType python map <buffer> <leader>C ?class\r\nau FileType python map <buffer> <leader>D ?def\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => JavaScript section\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\nau FileType javascript call JavaScriptFold()\r\nau FileType javascript setl fen\r\nau FileType javascript setl nocindent\r\n\r\nau FileType javascript imap <c-t> AJS.log();<esc>hi\r\nau FileType javascript imap <c-a> alert();<esc>hi\r\n\r\nau FileType javascript inoremap <buffer> $r return\r\nau FileType javascript inoremap <buffer> $f //--- PH ----------------------------------------------<esc>FP2xi\r\n\r\nfunction! JavaScriptFold()\r\n    setl foldmethod=syntax\r\n    setl foldlevelstart=1\r\n    syn region foldBraces start=/{/ end=/}/ transparent fold keepend extend\r\n\r\n    function! FoldText()\r\n    return substitute(getline(v:foldstart), '{.*', '{...}', '')\r\n    endfunction\r\n    setl foldtext=FoldText()\r\nendfunction\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => MRU plugin\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\nlet MRU_Max_Entries = 400\r\nmap <leader>f :MRU<CR>\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Command-T\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\nlet g:CommandTMaxHeight = 15\r\nset wildignore+=*.o,*.obj,.git,*.pyc\r\nnoremap <leader>j :CommandT<cr>\r\nnoremap <leader>y :CommandTFlush<cr>\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => Vim grep\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\nlet Grep_Skip_Dirs = 'RCS CVS SCCS .svn generated'\r\nset grepprg=/bin/grep\\ -nH\r\n\r\n\r\n\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" => MISC\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\" Remove the Windows ^M - when the encodings gets messed up\r\nnoremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm\r\n\r\n\"Quickly open a buffer for scripbble\r\nmap <leader>q :e ~/buffer<cr>\r\nau BufRead,BufNewFile ~/buffer iab <buffer> xh1 ===========================================\r\n\r\nmap <leader>pp :setlocal paste!<cr>\r\n\r\nmap <leader>bb :cd ..<cr>","created_at":"2013-03-19 11:58:21 +0000","updated_at":"2013-03-19 11:58:21 +0000","private":0,"tags":"N;"},{"id":32,"category_id":14,"user_id":6,"title":"Array Slicing and Splicing with Ranges","description":"Array Slicing and Splicing with Ranges","content":"#Array Slicing and Splicing with Ranges\r\n\r\n#Ranges can also be used to extract slices of arrays. With two dots (3..6), the range is inclusive \r\n#(3, 4, 5, 6); with three dots (3...6), the range excludes the end (3, 4, 5). Slices indices have \r\n#useful defaults. An omitted first index defaults to zero and an omitted second index defaults to \r\n#the size of the array.\r\n\r\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n\r\nstart   = numbers[0..2]\r\n\r\nmiddle  = numbers[3...6]\r\n\r\nend     = numbers[6..]\r\n\r\ncopy    = numbers[..]","created_at":"2013-03-19 11:58:21 +0000","updated_at":"2013-03-19 11:58:21 +0000","private":0,"tags":"N;"},{"id":33,"category_id":2,"user_id":6,"title":"Underscore - Object Functions","description":"Underscore - Object Functions","content":"Object Functions\r\n\r\nkeys_.keys(object) \r\n//Retrieve all the names of the object's properties.\r\n\r\n_.keys({one : 1, two : 2, three : 3}); => [\"one\", \"two\", \"three\"]\r\n\r\nvalues_.values(object) \r\n\r\n//Return all of the values of the object's properties.\r\n\r\n_.values({one : 1, two : 2, three : 3}); => [1, 2, 3]\r\n\r\nfunctions_.functions(object) Alias: methods \r\n\r\n//Returns a sorted list of the names of every method in an object â€” \r\n//that is to say, the name of every function property of the object.\r\n\r\n_.functions(_); => [\"all\", \"any\", \"bind\", \"bindAll\", \"clone\", \"compact\", \"compose\" ...\r\n\r\nextend_.extend(destination, *sources) \r\n\r\n//Copy all of the properties in the source objects over to the destination object, \r\n//and return the destination object. It's in-order, so the last source will \r\n//override properties of the same name in previous arguments.\r\n\r\n_.extend({name : 'moe'}, {age : 50}); => {name : 'moe', age : 50}\r\n\r\npick_.pick(object, *keys) \r\n\r\n//Return a copy of the object, filtered to only have values \r\n//for the whitelisted keys (or array of valid keys).\r\n\r\n_.pick({name : 'moe', age: 50, userid : 'moe1'}, 'name', 'age'); => {name : 'moe', age : 50}\r\n\r\ndefaults_.defaults(object, *defaults) \r\n\r\n//Fill in missing properties in object with default values \r\n//from the defaults objects, and return the object.\r\n// As soon as the property is filled, further defaults will have no effect.\r\n\r\nvar iceCream = {flavor : \"chocolate\"};\r\n\r\n_.defaults(iceCream, {flavor : \"vanilla\", sprinkles : \"lots\"}); => {flavor : \"chocolate\", sprinkles : \"lots\"}\r\n\r\nclone_.clone(object) \r\n\r\n// Create a shallow-copied clone of the object. \r\n// Any nested objects or arrays will be copied by reference, not duplicated.\r\n\r\n_.clone({name : 'moe'}); => {name : 'moe'};\r\n\r\ntap_.tap(object, interceptor) \r\n\r\n// Invokes interceptor with the object, and then returns object. \r\n// The primary purpose of this method is to \"tap into\" a method chain,\r\n//  in order to perform operations on intermediate results within the chain.\r\n\r\n_.chain([1,2,3,200])\r\n  .filter(function(num) { return num % 2 == 0; })\r\n  .tap(alert)\r\n  .map(function(num) { return num * num })\r\n  .value();\r\n=> // [2, 200] (alerted)\r\n=> [4, 40000]\r\n\r\nhas_.has(object, key) \r\n\r\n//Does the object contain the given key? \r\n// Identical to object.hasOwnProperty(key),\r\n// but uses a safe reference to the hasOwnProperty function,\r\n// in case it's been overridden accidentally.\r\n\r\n_.has({a: 1, b: 2, c: 3}, \"b\"); => true\r\n\r\nisEqual_.isEqual(object, other) \r\nPerforms an optimized deep comparison between the two objects, to determine if they should be considered equal.\r\n\r\nvar moe   = {name : 'moe', luckyNumbers : [13, 27, 34]};\r\nvar clone = {name : 'moe', luckyNumbers : [13, 27, 34]};\r\nmoe == clone;\r\n=> false\r\n_.isEqual(moe, clone);\r\n=> true\r\nisEmpty_.isEmpty(object) \r\nReturns true if object contains no values.\r\n\r\n_.isEmpty([1, 2, 3]);\r\n=> false\r\n_.isEmpty({});\r\n=> true\r\nisElement_.isElement(object) \r\nReturns true if object is a DOM element.\r\n\r\n_.isElement(jQuery('body')[0]);\r\n=> true\r\nisArray_.isArray(object) \r\nReturns true if object is an Array.\r\n\r\n(function(){ return _.isArray(arguments); })();\r\n=> false\r\n_.isArray([1,2,3]);\r\n=> true\r\nisObject_.isObject(value) \r\nReturns true if value is an Object.\r\n\r\n_.isObject({});\r\n=> true\r\n_.isObject(1);\r\n=> false\r\nisArguments_.isArguments(object) \r\nReturns true if object is an Arguments object.\r\n\r\n(function(){ return _.isArguments(arguments); })(1, 2, 3);\r\n=> true\r\n_.isArguments([1,2,3]);\r\n=> false\r\nisFunction_.isFunction(object) \r\nReturns true if object is a Function.\r\n\r\n_.isFunction(alert);\r\n=> true\r\nisString_.isString(object) \r\nReturns true if object is a String.\r\n\r\n_.isString(\"moe\");\r\n=> true\r\nisNumber_.isNumber(object) \r\nReturns true if object is a Number (including NaN).\r\n\r\n_.isNumber(8.4 * 5);\r\n=> true\r\nisFinite_.isFinite(object) \r\nReturns true if object is a finite Number.\r\n\r\n_.isFinite(-101);\r\n=> true\r\n\r\n_.isFinite(-Infinity);\r\n=> false\r\nisBoolean_.isBoolean(object) \r\nReturns true if object is either true or false.\r\n\r\n_.isBoolean(null);\r\n=> false\r\nisDate_.isDate(object) \r\nReturns true if object is a Date.\r\n\r\n_.isDate(new Date());\r\n=> true\r\nisRegExp_.isRegExp(object) \r\nReturns true if object is a RegExp.\r\n\r\n_.isRegExp(/moe/);\r\n=> true\r\nisNaN_.isNaN(object) \r\nReturns true if object is NaN.\r\nNote: this is not the same as the native isNaN function, which will also return true if the variable is undefined.\r\n\r\n_.isNaN(NaN);\r\n=> true\r\nisNaN(undefined);\r\n=> true\r\n_.isNaN(undefined);\r\n=> false\r\nisNull_.isNull(object) \r\nReturns true if the value of object is null.\r\n\r\n_.isNull(null);\r\n=> true\r\n_.isNull(undefined);\r\n=> false\r\nisUndefined_.isUndefined(variable) \r\nReturns true if variable is undefined.\r\n\r\n_.isUndefined(window.missingVariable);\r\n=> true","created_at":"2013-03-19 11:58:21 +0000","updated_at":"2013-03-19 11:58:21 +0000","private":0,"tags":"N;"},{"id":34,"category_id":14,"user_id":6,"title":"Destructuring Assignment","description":"Destructuring Assignment","content":"theBait   = 1000\r\ntheSwitch = 0\r\n\r\n[theBait, theSwitch] = [theSwitch, theBait]\r\n\r\n\r\nweatherReport = (location) ->\r\n  # Make an Ajax request to fetch the weather...\r\n  [location, 72, \"Mostly Sunny\"]\r\n\r\n[city, temp, forecast] = weatherReport \"Berkeley, CA\"\r\n","created_at":"2013-03-19 11:58:21 +0000","updated_at":"2013-03-19 11:58:21 +0000","private":0,"tags":"N;"},{"id":35,"category_id":14,"user_id":6,"title":"Function binding","description":"Function binding","content":"Account = (customer, cart) ->\r\n  @customer = customer\r\n  @cart = cart\r\n\r\n  $('.shopping_cart').bind 'click', (event) =>\r\n    @customer.purchase @cart","created_at":"2013-03-19 11:58:21 +0000","updated_at":"2013-03-19 11:58:21 +0000","private":0,"tags":"N;"},{"id":36,"category_id":14,"user_id":6,"title":"Splats","description":"How to user Splats","content":"gold = silver = rest = \"unknown\"\r\n\r\nawardMedals = (first, second, others...) ->\r\n  gold   = first\r\n  silver = second\r\n  rest   = others\r\n\r\ncontenders = [\r\n  \"Michael Phelps\"\r\n  \"Liu Xiang\"\r\n  \"Yao Ming\"\r\n  \"Allyson Felix\"\r\n  \"Shawn Johnson\"\r\n  \"Roman Sebrle\"\r\n  \"Guo Jingjing\"\r\n  \"Tyson Gay\"\r\n  \"Asafa Powell\"\r\n  \"Usain Bolt\"\r\n]\r\n\r\nawardMedals contenders...\r\n\r\nalert \"Gold: \" + gold\r\nalert \"Silver: \" + silver\r\nalert \"The Field: \" + rest","created_at":"2013-03-19 11:58:22 +0000","updated_at":"2013-03-19 11:58:22 +0000","private":0,"tags":"N;"},{"id":37,"category_id":11,"user_id":6,"title":"GIT -  A web-focused Git workflow","description":"GIT - A web-focused Git workflow","content":"A web-focused Git workflow\r\nAfter months of looking, struggling through Git-SVN glitches and letting things roll around in my head, Iâ€™ve finally arrived at a web-focused Git workflow thatâ€™s simple, flexible and easy to use.\r\n\r\nSome key advantages:\r\n\r\nPushing remote changes automatically updates the live site\r\nServer-based site edits wonâ€™t break history\r\nSimple, no special commit rules or requirements\r\nWorks with existing sites, no need to redeploy or move files\r\nOverview\r\nThe key idea in this system is that the web site exists on the server as a pair of repositories; a bare repository alongside a conventional repository containing the live site. Two simple Git hooks link the pair, automatically pushing and pulling changes between them.\r\n\r\n\r\n\r\nThe two repositories:\r\n\r\nHub is a bare repository. All other repositories will be cloned from this.\r\nPrime is a standard repository, the live web site is served from its working directory.\r\nUsing the pair of repositories is simple and flexible. Remote clones with ssh-access can update the live site with a simple git push to Hub. Any files edited directly on the server are instantly mirrored into Hub upon commit. The whole thing pretty much just works â€” whichever way itâ€™s used.\r\n\r\nGetting ready\r\n\r\nObviously Git is required on the server and any local machines. My shared web host doesnâ€™t offer Git, but itâ€™s easy enough to install Git yourself.\r\n\r\nIf this is the first time running Git on your webserver, remember to setup your global configuration info. I set a different Git user.name to help distinguish server-based changes in project history.\r\n\r\n$ git config --global user.name \"Joe, working on the server\"\r\nGetting started\r\nThe first step is to initialize a new Git repository in the live web site directory on the server, then to add and commit all the siteâ€™s files. This is the Prime repository and working copy. Even if history exists in other places, the contents of the live site will be the baseline onto which all other work is merged.\r\n\r\n$ cd ~/www\r\n$ git init\r\n$ git add .\r\n$ git commit -m\"initial import of pre-existing web files\"\r\nInitializing in place also means there is no downtime or need to re-deploy the site, Git just builds a repository around everything thatâ€™s already there.\r\n\r\nWith the live site now safely in Git, create a bare repository outside the web directory, this is Hub.\r\n\r\n$ cd; mkdir site_hub.git; cd site_hub.git\r\n$ git --bare init\r\nInitialized empty Git repository in /home/joe/site_hub.git\r\nThen, from inside Primeâ€™s working directory, add Hub as a remote and push Primeâ€™s master branch:\r\n\r\n$ cd ~/www\r\n$ git remote add hub ~/site_hub.git\r\n$ git remote show hub\r\n* remote hub\r\n  URL: /home/joe/site_hub.git\r\n$ git push hub master\r\nHooks\r\nTwo simple Git hooks scripts keep Hub and Prime linked together.\r\n\r\nAn oft-repeated rule of Git is to never push into a repository that has a work tree attached to it. I tried it, and things do get weird fast. The hub repository exists for this reason. Instead of pushing changes to Prime from Hub, which wouldnâ€™t affect the working copy anyway, Hub uses a hook script which tells Prime to pull changes from Hub.\r\n\r\npost-update â€“ Hub repository\r\nThis hook is called when Hub receives an update. The script changes directories to the Prime repository working copy then runs a pull from Prime. Pushing changes doesnâ€™t update a repositoryâ€™s working copy, so itâ€™s necessary to execute this from inside the working copy itself.\r\n\r\n#!/bin/sh\r\n\r\necho\r\necho \"**** Pulling changes into Prime [Hub's post-update hook]\"\r\necho\r\n\r\ncd $HOME/www || exit\r\nunset GIT_DIR\r\ngit pull hub master\r\n\r\nexec git-update-server-info\r\npost-commit â€“ Prime repository\r\nThis hook is called after every commit to send the newly commited changes back up to Hub. Ideally, itâ€™s not common to make changes live on the server, but automating this makes sure site history wonâ€™t diverge and create conflicts.\r\n\r\n#!/bin/sh\r\n\r\necho\r\necho \"**** pushing changes to Hub [Prime's post-commit hook]\"\r\necho\r\n\r\ngit push hub\r\nWith this hook in place, all changes made to Primeâ€™s master branch are immediately available from Hub. Other branches will also be cloned, but wonâ€™t affect the site. Because all remote repository access is via SSH urls, only users with shell access to the web server will be able to push and trigger a site update.\r\n\r\nConflicts\r\nThis repository-hook arrangement makes it very difficult to accidentally break the live site. Since every commit to Prime is automatically pushed to Hub, all conflicts will be immediately visible to the clones when pushing an update.\r\n\r\nHowever there are a few situations where Prime can diverge from Hub which will require additional steps to fix. If an uncommitted edit leaves Prime in a dirty state, Hubâ€™s post-update pull will fail with an â€œEntry â€˜fooâ€™ not uptodate. Cannot merge.â€ warning. Committing changes will clean up Primeâ€™s working directory, and the post-update hook will then merge the un-pulled changes.\r\n\r\nIf a conflict occurs where changes to Prime canâ€™t be merged with Hub, Iâ€™ve found the best solution is to push the current state of Prime to a new branch on Hub. The following command, issued from inside Prime, will create a remote â€œfixmeâ€ branch based on the current contents of Prime:\r\n\r\n$ git push hub master:refs/heads/fixme\r\nOnce thatâ€™s in Hub, any remote clone can pull down the new branch and resolve the merge. Trying to resolve a conflict on the server would almost certainly break the site due to Gitâ€™s conflict markers.\r\n\r\nHousekeeping\r\nPrimeâ€™s .git folder is at the root level of the web site, and is probably publicly accessible. To protect the folder and prevent unwanted clones of the repository, add the following to your top-level .htaccess file to forbid web access:\r\n\r\n# deny access to the top-level git repository:\r\nRewriteEngine On\r\nRewriteRule \\.git - [F,L]\r\nTroubleshooting\r\nIf youâ€™re seeing this error when trying to push to a server repository:\r\n\r\ngit-receive-pack: command not found\r\nfatal: The remote end hung up unexpectedly\r\nAdd export PATH=${PATH}:~/bin to your .bashrc file on the server. Thanks to Robert for finding and posting the fix.\r\n\r\nLinks\r\nThese didnâ€™t fit in anywhere else:\r\n\r\nToolman Tim has a very good introductory walkthrough of setting up a new remote git repository.\r\nThis ended up being somewhat similar to the update mechanism in Ikiwiki, wish Iâ€™d found that page earlier.\r\nGetting a static web site organized with git came up with a different solution, but calling git reset --hard from a hook on the server could cause a lot of trouble when committing server-side changes.","created_at":"2013-03-19 11:58:22 +0000","updated_at":"2013-03-19 11:58:22 +0000","private":0,"tags":"N;"},{"id":38,"category_id":11,"user_id":6,"title":"How to install Git on a shared host ","description":"How to install Git on a shared host ","content":"// source : http://joemaller.com/908/how-to-install-git-on-a-shared-host/\r\nHow to install Git on a shared host\r\n(regularly updated)\r\n\r\nInstalling Git on a shared hosting account is simple, the installation is fast and like most things Git, it just works.\r\n\r\nAs with my previous Subversion on shared hosting post, this will be a barebones install. The purpose of this installation is to be able to push changes from remote repositories into the hosted repo, where the hosted repository may also serve as the source directory of the live website. Like this.\r\n\r\nPrerequisites\r\nThe only two things you absolutely must have are shell access to the account and permission to use GCC on the server. Check both with the following command:\r\n\r\n$ ssh joe@webserver 'gcc --version'\r\ngcc (GCC) 4.1.2 20080704 (Red Hat 4.1.2-50)\r\n[...]\r\nIf GCC replies with a version number, you should be able to install Git. SSH into your server and letâ€™s get started!\r\n\r\nIf you see something like /usr/bin/gcc: Permission denied you donâ€™t have access to the GCC compiler and wonâ€™t be able to build the Git binaries from source. Find another hosting company.\r\n\r\nUpdate your $PATH\r\nNone of this will work if you donâ€™t update the $PATH environment variable. In most cases, this is set in .bashrc. Using .bashrc instead of .bash_profile updates $PATH for interactive and non-interactive sessionsâ€“which is necessary for remote Git commands. Edit .bashrc and add the following line:\r\n\r\nexport PATH=$HOME/opt/bin:$PATH\r\nBe sure â€˜~/opt/binâ€™ is at the beginning since $PATH is searched from left to right; to execute local binaries first, their location has to appear first. Depending on your serverâ€™s configuration there could be a lot of other stuff in there, including duplicates.\r\n\r\nDouble-check this by sourcing the file and echoing $PATH:\r\n\r\n$ source ~/.bashrc\r\n$ echo $PATH\r\n/home/joe/opt/bin:/usr/local/bin:/bin:/usr/bin\r\nVerify that the remote path was updated by sending a remote command like this (from another connection):\r\n\r\n$ ssh joe@webserver 'echo $PATH'\r\n/home/joe/opt/bin:/usr/local/bin:/bin:/usr/bin\r\nNote: Installing into the ~/opt directory keeps the home folder cleaner and is where add-on applications are customarily installed on Unix systems.\r\n\r\nInstalling Git\r\nSSH into your webserver. I created a source directory to hold the files and make cleanup easier:\r\n\r\n$ cd\r\n$ mkdir src\r\n$ cd src\r\nGrab the most current source tarballs from the Git site. At the time this post was last updated, the most recent version was v1.7.6:\r\n\r\n$ curl -LO http://kernel.org/pub/software/scm/git/git-1.7.6.tar.bz2\r\nUntar the archive and cd into the new directory:\r\n\r\n$ tar -xjvf git-1.7.6.tar.bz2\r\n$ cd git-1.7.6\r\nThis next step is the only one that really seems to matter with regards to shared hosting. The Configure script needs to be told where to install, and because weâ€™re on a shared host, Gitâ€™s files should be put somewhere in our home directory:\r\n\r\n$ ./configure --prefix=$HOME/opt\r\n[words...]\r\nLastly, make and install:\r\n\r\n$ make && make install\r\n[lots of words...]\r\nThat should be it, check your installed version like this:\r\n\r\n$ git --version\r\ngit version 1.7.6\r\nIt's now safe to delete the src folder which contained the download and source files.\r\n\r\nNote that these instructions do not install Git's documentation man pages. Also, these instructions appear to work exactly the same on Mac OS X, though the installer package is way easier and includes documentation.\r\n\r\nMy preferred shared hosting providers are A2 Hosting and WebFaction.","created_at":"2013-03-19 11:58:22 +0000","updated_at":"2013-03-19 11:58:22 +0000","private":0,"tags":"N;"},{"id":39,"category_id":14,"user_id":6,"title":"Loops and Comprehension","description":"Loops and Comprehension","content":"# Eat lunch.\r\neat food for food in ['toast', 'cheese', 'wine']\r\n\r\n# Fine five course dining.\r\ncourses = ['greens', 'caviar', 'truffles', 'roast', 'cake']\r\nmenu i + 1, dish for dish, i in courses\r\n\r\n# Health conscious meal.\r\nfoods = ['broccoli', 'spinach', 'chocolate']\r\neat food for food in foods when food isnt 'chocolate'","created_at":"2013-03-19 11:58:22 +0000","updated_at":"2013-03-19 11:58:22 +0000","private":0,"tags":"N;"},{"id":40,"category_id":14,"user_id":6,"title":"Cake, and Cakefiles","description":"Cake, and Cakefiles","content":"Cake, and Cakefiles\r\n\r\n/* \r\nCoffeeScript includes a (very) simple build system similar to Make and Rake. Naturally, it's called Cake, and is used for the tasks that build and test the CoffeeScript language itself. Tasks are defined in a file named Cakefile, and can be invoked by running cake [task] from within the directory. To print a list of all the tasks and options, just type cake.\r\n\r\nTask definitions are written in CoffeeScript, so you can put arbitrary code in your Cakefile. Define a task with a name, a long description, and the function to invoke when the task is run. If your task takes a command-line option, you can define the option with short and long flags, and it will be made available in the options object. Here's a task that uses the Node.js API to rebuild CoffeeScript's parser:\r\n*/\r\n\r\nfs = require 'fs'\r\n\r\noption '-o', '--output [DIR]', 'directory for compiled code'\r\n\r\ntask 'build:parser', 'rebuild the Jison parser', (options) ->\r\n  require 'jison'\r\n  code = require('./lib/grammar').parser.generate()\r\n  dir  = options.output or 'lib'\r\n  fs.writeFile \"#{dir}/parser.js\", code\r\n\r\n/*\r\n\r\nIf you need to invoke one task before another â€” for example, running  build before test, you can use the invoke function:  invoke 'build'. Cake tasks are a minimal way to expose your CoffeeScript functions to the command line, so don't expect any fanciness built-in. If you need dependencies, or async callbacks, it's best to put them in your code itself â€” not the cake task.\r\n*/","created_at":"2013-03-19 11:58:22 +0000","updated_at":"2013-03-19 11:58:22 +0000","private":0,"tags":"N;"},{"id":41,"category_id":1,"user_id":6,"title":"Array functions","description":"Array functions ","content":"//Fonctions sur les tableaux\r\n\r\n// in french\r\n\r\nVoir aussi is_array(), explode(), implode(), split(), preg_split() et unset().\r\n\r\n\r\narray_change_key_case # Change la casse des clÃ©s d'un tableau\r\n\r\narray_chunk # SÃ©pare un tableau en tableaux de taille infÃ©rieure\r\n\r\narray_combine # CrÃ©e un tableau Ã  partir de deux autres tableaux\r\narray_count_values # Compte le nombre de valeurs d'un tableau\r\narray_diff_assoc # Calcule la diffÃ©rence de deux tableaux, en prenant aussi en compte les clÃ©s\r\narray_diff_key # Calcule la diffÃ©rence de deux tableaux en utilisant les clÃ©s pour comparaison\r\narray_diff_uassoc # Calcule la diffÃ©rence entre deux tableaux associatifs, Ã  l'aide d'une fonction de rappel\r\narray_diff_ukey # Calcule la diffÃ©rence entre deux tableaux en utilisant une fonction de rappel sur les clÃ©s pour comparaison\r\narray_diff # Calcule la diffÃ©rence entre deux tableaux\r\narray_fill_keys # Remplit un tableau avec des valeurs, en spÃ©cifiant les clÃ©s\r\narray_fill # Remplit un tableau avec une mÃªme valeur\r\narray_filter # Filtre les Ã©lÃ©ments d'un tableau grÃ¢ce Ã  une fonction utilisateur\r\narray_flip # Remplace les clÃ©s par les valeurs, et les valeurs par les clÃ©s\r\narray_intersect_assoc # Calcule l'intersection de deux tableaux avec des tests sur les index\r\narray_intersect_key # Calcule l'intersection de deux tableaux en utilisant les clÃ©s pour comparaison\r\narray_intersect_uassoc # Calcule l'intersection de deux tableaux avec des tests sur les index, compare les index en utilisant une fonction de rappel\r\narray_intersect_ukey # Calcule l'intersection de deux tableaux en utilisant une fonction de rappel sur les clÃ©s pour comparaison\r\narray_intersect # Calcule l'intersection de tableaux\r\narray_key_exists # VÃ©rifie si une clÃ© existe dans un tableau\r\narray_keys # Retourne toutes les clÃ©s ou un ensemble des clÃ©s d'un tableau\r\narray_map # Applique une fonction sur les Ã©lÃ©ments d'un tableau\r\narray_merge_recursive # Combine plusieurs tableaux ensemble, rÃ©cursivement\r\narray_merge # Fusionne plusieurs tableaux en un seul\r\narray_multisort # Trie les tableaux multidimensionnels\r\narray_pad # ComplÃ¨te un tableau avec une valeur jusqu'Ã  la longueur spÃ©cifiÃ©e\r\narray_pop # DÃ©pile un Ã©lÃ©ment de la fin d'un tableau\r\narray_product # Calcule le produit des valeurs du tableau\r\narray_push # Empile un ou plusieurs Ã©lÃ©ments Ã  la fin d'un tableau\r\narray_rand # Prend une ou plusieurs valeurs, au hasard dans un tableau\r\narray_reduce # RÃ©duit itÃ©rativement un tableau\r\narray_replace_recursive # Replaces elements from passed arrays into the first array recursively\r\narray_replace # Remplace les Ã©lÃ©ments d'un tableau par ceux d'autres tableaux\r\narray_reverse # Inverse l'ordre des Ã©lÃ©ments d'un tableau\r\narray_search # Recherche dans un tableau la clÃ© associÃ©e Ã  une valeur\r\narray_shift # DÃ©pile un Ã©lÃ©ment au dÃ©but d'un tableau\r\narray_slice # Extrait une portion de tableau\r\narray_splice # Efface et remplace une portion de tableau\r\narray_sum # Calcule la somme des valeurs du tableau\r\narray_udiff_assoc # Calcule la diffÃ©rence entre des tableaux avec vÃ©rification des index, compare les donnÃ©es avec une fonction de rappel\r\narray_udiff_uassoc # Calcule la diffÃ©rence de deux tableaux associatifs, compare les donnÃ©es et les index avec une fonction de rappel\r\narray_udiff # Calcule la diffÃ©rence entre deux tableaux en utilisant une fonction rappel\r\narray_uintersect_assoc # Calcule l'intersection de deux tableaux avec des tests sur l'index, compare les donnÃ©es en utilisant une fonction de rappel\r\narray_uintersect_uassoc # Calcule l'intersection de deux tableaux avec des tests sur l'index, compare les donnÃ©es et les indexes des deux tableaux en utilisant une fonction de rappel\r\narray_uintersect # Calcule l'intersection de deux tableaux, compare les donnÃ©es en utilisant une fonction de rappel\r\narray_unique # DÃ©doublonne un tableau\r\narray_unshift # Empile un ou plusieurs Ã©lÃ©ments au dÃ©but d'un tableau\r\narray_values # Retourne toutes les valeurs d'un tableau\r\narray_walk_recursive # Applique une fonction de rappel rÃ©cursivement Ã  chaque membre d'un tableau\r\narray_walk # ExÃ©cute une fonction sur chacun des Ã©lÃ©ments d'un tableau\r\narray # CrÃ©e un tableau\r\narsort # Trie un tableau en ordre inverse\r\nasort # Trie un tableau et conserve l'association des index\r\ncompact # CrÃ©e un tableau Ã  partir de variables et de leur valeur\r\ncount # Compte tous les Ã©lÃ©ments d'un tableau ou quelque chose d'un objet\r\ncurrent # Retourne l'Ã©lÃ©ment courant du tableau\r\neach # Retourne chaque paire clÃ©/valeur d'un tableau\r\nend # Positionne le pointeur de tableau en fin de tableau\r\nextract # Importe les variables dans la table des symboles\r\nin_array # Indique si une valeur appartient Ã  un tableau\r\nkey # Retourne une clÃ© d'un tableau associatif\r\nkrsort # Trie un tableau en sens inverse et suivant les clÃ©s\r\nksort # Trie un tableau suivant les clÃ©s\r\nlist # Assigne des variables comme si elles Ã©taient un tableau\r\nnatcasesort # Trie un tableau avec l'algorithme Ã  \"ordre naturel\" insensible Ã  la casse\r\nnatsort # Trie un tableau avec l'algorithme Ã  \"ordre naturel\"\r\nnext # Avance le pointeur interne d'un tableau\r\npos # Alias de current\r\nprev # Recule le pointeur courant de tableau\r\nrange # CrÃ©e un tableau contenant un intervalle d'Ã©lÃ©ments\r\nreset # Remet le pointeur interne de tableau au dÃ©but\r\nrsort # Trie un tableau en ordre inverse\r\nshuffle # MÃ©lange les Ã©lÃ©ments d'un tableau\r\nsizeof # Alias de count\r\nsort # Trie un tableau\r\nuasort # Trie un tableau en utilisant une fonction de rappel\r\nuksort # Trie un tableau par ses clÃ©s en utilisant une fonction de rappel\r\nusort # Trie un tableau en utilisant une fonction de comparaison\r\n","created_at":"2013-03-19 11:58:22 +0000","updated_at":"2013-03-19 11:58:22 +0000","private":0,"tags":"N;"},{"id":42,"category_id":5,"user_id":6,"title":"CSS Wrap - white-space","description":"CSS Wrap - white-space","content":"Default is normal \r\n\r\n    white-space: none;\r\n    white-space: nowrap;\r\n    white-space: pre;\r\n    white-space: pre-wrap;      /* CSS 2.1 */\r\n    white-space: pre-line;      /* CSS 2.1 */\r\n    white-space: inherit;","created_at":"2013-03-19 11:58:22 +0000","updated_at":"2013-03-19 11:58:22 +0000","private":0,"tags":"N;"},{"id":43,"category_id":10,"user_id":6,"title":"Mediator pattern","description":"Mediator pattern","content":"/*\r\nThe mediator pattern defines an object that encapsulates how a set of objects interact. This pattern is considered to be a behavioral pattern due to the way it can alter the program's running behavior.\r\nUsually a program is made up of a (sometimes large) number of classes. So the logic and computation is distributed among these classes. However, as more classes are developed in a program, especially during maintenance and/or refactoring, the problem of communication between these classes may become more complex. This makes the program harder to read and maintain. Furthermore, it can become difficult to change the program, since any change may affect code in several other classes.\r\nWith the mediator pattern, communication between objects is encapsulated with a mediator object. Objects no longer communicate directly with each other, but instead communicate through the mediator. This reduces the dependencies between communicating objects, thereby lowering the coupling.\r\n\r\n\r\nThe essence of the Mediator Pattern is to \"Define an object that encapsulates how a set of objects interact. Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it lets you vary their interaction independently. \"\r\n\r\n*/\r\n\r\nimport java.awt.Font;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\n \r\nimport javax.swing.JButton;\r\nimport javax.swing.JFrame;\r\nimport javax.swing.JLabel;\r\nimport javax.swing.JPanel;\r\n \r\n//Colleague interface\r\ninterface Command {\r\n    void execute();\r\n}\r\n \r\n//Abstract Mediator\r\ninterface IMediator {\r\n    void book();\r\n    void view();\r\n    void search();\r\n    void registerView(BtnView v);\r\n    void registerSearch(BtnSearch s);\r\n    void registerBook(BtnBook b);\r\n    void registerDisplay(LblDisplay d);\r\n}\r\n \r\n//Concrete mediator\r\nclass Mediator implements IMediator {\r\n \r\n    BtnView btnView;\r\n    BtnSearch btnSearch;\r\n    BtnBook btnBook;\r\n    LblDisplay show;\r\n \r\n    //....\r\n    void registerView(BtnView v) {\r\n        btnView = v;\r\n    }\r\n \r\n    void registerSearch(BtnSearch s) {\r\n        btnSearch = s;\r\n    }\r\n \r\n    void registerBook(BtnBook b) {\r\n        btnBook = b;\r\n    }\r\n \r\n    void registerDisplay(LblDisplay d) {\r\n        show = d;\r\n    }\r\n \r\n    void book() {\r\n        btnBook.setEnabled(false);\r\n        btnView.setEnabled(true);\r\n        btnSearch.setEnabled(true);\r\n        show.setText(\"booking...\");\r\n    }\r\n \r\n    void view() {\r\n        btnView.setEnabled(false);\r\n        btnSearch.setEnabled(true);\r\n        btnBook.setEnabled(true);\r\n        show.setText(\"viewing...\");\r\n    }\r\n \r\n    void search() {\r\n        btnSearch.setEnabled(false);\r\n        btnView.setEnabled(true);\r\n        btnBook.setEnabled(true);\r\n        show.setText(\"searching...\");\r\n    }\r\n \r\n}\r\n \r\n//A concrete colleague\r\nclass BtnView extends JButton implements Command {\r\n \r\n    IMediator med;\r\n \r\n    BtnView(ActionListener al, IMediator m) {\r\n        super(\"View\");\r\n        addActionListener(al);\r\n        med = m;\r\n        med.registerView(this);\r\n    }\r\n \r\n    public void execute() {\r\n        med.view();\r\n    }\r\n \r\n}\r\n \r\n//A concrete colleague\r\nclass BtnSearch extends JButton implements Command {\r\n \r\n    IMediator med;\r\n \r\n    BtnSearch(ActionListener al, IMediator m) {\r\n        super(\"Search\");\r\n        addActionListener(al);\r\n        med = m;\r\n        med.registerSearch(this);\r\n    }\r\n \r\n    public void execute() {\r\n        med.search();\r\n    }\r\n \r\n}\r\n \r\n//A concrete colleague\r\nclass BtnBook extends JButton implements Command {\r\n \r\n    IMediator med;\r\n \r\n    BtnBook(ActionListener al, IMediator m) {\r\n        super(\"Book\");\r\n        addActionListener(al);\r\n        med = m;\r\n        med.registerBook(this);\r\n    }\r\n \r\n    public void execute() {\r\n        med.book();\r\n    }\r\n \r\n}\r\n \r\nclass LblDisplay extends JLabel {\r\n \r\n    IMediator med;\r\n \r\n    LblDisplay(IMediator m) {\r\n        super(\"Just start...\");\r\n        med = m;\r\n        med.registerDisplay(this);\r\n        setFont(new Font(\"Arial\", Font.BOLD, 24));\r\n    }\r\n \r\n}\r\n \r\nclass MediatorDemo extends JFrame implements ActionListener {\r\n \r\n    IMediator med = new Mediator();\r\n \r\n    MediatorDemo() {\r\n        JPanel p = new JPanel();\r\n        p.add(new BtnView(this, med));\r\n        p.add(new BtnBook(this, med));\r\n        p.add(new BtnSearch(this, med));\r\n        getContentPane().add(new LblDisplay(med), \"North\");\r\n        getContentPane().add(p, \"South\");\r\n        setSize(400, 200);\r\n        setVisible(true);\r\n    }\r\n \r\n    public void actionPerformed(ActionEvent ae) {\r\n        Command comd = (Command) ae.getSource();\r\n        comd.execute();\r\n    }\r\n \r\n    public static void main(String[] args) {\r\n        new MediatorDemo();\r\n    }\r\n \r\n}\r\n\r\n/*\r\nParticipants\r\n\r\nMediator - defines the interface for communication between Colleague objects\r\nConcreteMediator - implements the Mediator interface and coordinates communication between Colleague objects. It is aware of all the Colleagues and their purpose with regards to inter communication.\r\nConcreteColleague - communicates with other Colleagues through its Mediator\r\n*/","created_at":"2013-03-19 11:58:22 +0000","updated_at":"2013-03-19 11:58:22 +0000","private":0,"tags":"N;"},{"id":44,"category_id":10,"user_id":6,"title":"Proxy pattern","description":"Proxy pattern","content":"/*\r\nIn computer programming, the proxy pattern is a software design pattern.\r\nA proxy, in its most general form, is a class functioning as an interface to something else. The proxy could interface to anything: a network connection, a large object in memory, a file, or some other resource that is expensive or impossible to duplicate.\r\nA well-known example of the proxy pattern is a reference counting pointer object.\r\nIn situations where multiple copies of a complex object must exist, the proxy pattern can be adapted to incorporate the flyweight pattern in order to reduce the application's memory footprint. Typically, one instance of the complex object and multiple proxy objects are created, all of which contain a reference to the single original complex object. Any operations performed on the proxies are forwarded to the original object. Once all instances of the proxy are out of scope, the complex object's memory may be deallocated.\r\n*/\r\n\r\n/*\r\nThe following Java example illustrates the \"virtual proxy\" pattern.[clarification needed] The ProxyImage class is used to access a remote method.\r\n*/\r\n\r\ninterface Image {\r\n    void displayImage();\r\n}\r\n \r\n// on System A \r\nclass RealImage implements Image {\r\n    private String filename;\r\n \r\n    public RealImage(String filename) { \r\n        this.filename = filename;\r\n        loadImageFromDisk();\r\n    }\r\n \r\n    private void loadImageFromDisk() {\r\n        System.out.println(\"Loading   \" + filename);\r\n    }\r\n \r\n    public void displayImage() { \r\n        System.out.println(\"Displaying \" + filename); \r\n    }\r\n \r\n}\r\n \r\n//on System B \r\nclass ProxyImage implements Image {\r\n    private String filename;\r\n    private RealImage image;\r\n \r\n    public ProxyImage(String filename) { \r\n        this.filename = filename; \r\n    }\r\n \r\n    public void displayImage() {\r\n        if (image == null) {\r\n           image = new RealImage(filename);\r\n        } \r\n        image.displayImage();\r\n    }\r\n}\r\n \r\nclass ProxyExample  {\r\n    public static void main(String[] args) {\r\n        Image image1 = new ProxyImage(\"HiRes_10MB_Photo1\");\r\n        Image image2 = new ProxyImage(\"HiRes_10MB_Photo2\");     \r\n \r\n        image1.displayImage(); // loading necessary\r\n        image1.displayImage(); // loading unnecessary\r\n        image2.displayImage(); // loading necessary\r\n        image2.displayImage(); // loading unnecessary\r\n        image1.displayImage(); // loading unnecessary\r\n    }\r\n}\r\n/*\r\nThe program's output is:\r\nLoading   HiRes_10MB_Photo1\r\nDisplaying HiRes_10MB_Photo1\r\nDisplaying HiRes_10MB_Photo1\r\nLoading   HiRes_10MB_Photo2\r\nDisplaying HiRes_10MB_Photo2\r\nDisplaying HiRes_10MB_Photo2\r\n*/\r\nDisplaying HiRes_10MB_Photo1","created_at":"2013-03-19 11:58:22 +0000","updated_at":"2013-03-19 11:58:22 +0000","private":0,"tags":"N;"},{"id":45,"category_id":2,"user_id":6,"title":"AMD with RequireJs ","description":"AMD with RequireJs ","content":"// source : https://gist.github.com/907115\r\n//*******************************************\r\n// Level 1, basic API, minimum support\r\n//*******************************************\r\n/*\r\nModules IDs are strings that follow CommonJS\r\nmodule names.\r\n*/\r\n\r\n//To load code at the top level JS file,\r\n//or inside a module to dynamically fetch\r\n//dependencies, use *require*.\r\n//\r\n//one and two's module exports are passed as\r\n//function args to the callback.\r\nrequire(['one', 'two'], function (one, two) {\r\n\r\n});\r\n\r\n//Define a module\r\ndefine(['one', 'two'], function (one, two) {\r\n\r\n    //Return a value to define the module export\r\n    return function () {};\r\n});\r\n\r\n//Allow named modules by allowing a string as the\r\n//the first argument (support can be limited\r\n//in Node by only allowing the ID\r\n//to match the expected name by the Node loader)\r\ndefine('three', ['one', 'two'], function (one, two) {\r\n\r\n    //require('string') can be used inside function\r\n    //to get the module export of a module that has\r\n    //already been fetched and evaluated.\r\n    var temp = require('one');\r\n\r\n    //This next line would fail\r\n    var bad = require('four');\r\n\r\n    //Return a value to define the module export\r\n    return function () {};\r\n});\r\n\r\n//'require', 'exports' and 'module' are special dependency\r\n//names that map roughly to the CommonJS values, except this\r\n//require allows the dependency array/callback style mentioned above\r\ndefine(['require', 'exports', 'module'], function (require, exports, module) {\r\n\r\n    //exports is particularly (only?) useful for circular\r\n    //dependency cases. If exports is asked for, but there is\r\n    //a return value for this function, favor the return value\r\n    //unless another module has been given this module's exported\r\n    //value already.\r\n    exports.name = module.id;\r\n\r\n    //module is important to get the module ID without\r\n    //knowing the current module ID.\r\n});\r\n\r\n//A simple object module with no dependencies\r\n//(very useful for configuration objects):\r\ndefine({\r\n    color: 'blue',\r\n    size: 'large'\r\n});\r\n\r\n//**********************************************************************\r\n// Level 2, sugar, particularly for converting existing CommonJS modules\r\n//**********************************************************************\r\n\r\n//For many dependencies, it may be desirable to list dependencies\r\n//vertically. This form also helps translate old CommonJS modules\r\n//to this wrapped format. It uses Function.prototype.toString() to find\r\n//require('moduleName') references and loads them before executing\r\n//the definition function.\r\ndefine(function (require) {\r\n    //The function arg *must* be called require, and\r\n    //dependencies *must* use that require name in order\r\n    //for the parsing to work.\r\n    var one = require('one'),\r\n        two = require('two');\r\n\r\n    //Return can still define a module.\r\n    return {\r\n        color: 'blue'\r\n    };\r\n});\r\n\r\n//The above define call can be thought of being converted to\r\n//this form after require calls are parsed out:\r\ndefine(['require', 'one', 'two'], function (require) {});\r\n\r\n//For the full access to the CommonJS legacy variables, this form is also supported.\r\ndefine(function (require, exports, module) {\r\n    var one = require('one'),\r\n        two = require('two');\r\n\r\n    //Return can still define a module.\r\n    exports.color = 'blue';\r\n});\r\n\r\n//The above define call can be thought of being converted to\r\n//this form after require calls are parsed out:\r\ndefine(['require', 'exports', 'module', 'one', 'two'], function (require, exports, module) {});\r\n\r\n/*\r\nNOT ALL CommonJS modules can be converted to this syntax. An important\r\nbehavioral difference with this API: all dependencies are loaded *and*\r\nexecuted before the current module definition function is called. So\r\nin particular, CommonJS code that does these kinds of things will not\r\nwork the same, and may even generate an error. \r\n*/\r\n//BAD\r\nvar a;\r\nif (someCondition) {\r\n    a = require('a1');\r\n} else {\r\n    a = require('b1');\r\n}\r\n\r\n//BAD: using a try catch to\r\n//try to load a module that may or\r\n//may not be available then doing something\r\n//with it.\r\ntry {\r\n   var a = require('a');\r\n   //more stuff here\r\n} catch (e) {\r\n    //a may not exist\r\n}\r\n\r\n//Any sort of logic used to choose a module to require needs \r\n//to be handled by the callback-style require:\r\nrequire([computedModuleName], function (mod) {});\r\n\r\n//Or by using loader plugins, level 3:\r\n\r\n//***********************************************\r\n//Level 3, Loader plugins\r\n//***********************************************\r\n/*\r\nLoader plugins allow conditional loading/branching\r\nof loading, and also more complex loading.\r\nPlugins are just regular modules that implement a\r\nload() API. A plugin is indicated by separating\r\nthe plugin's module name from the resource name\r\nby a ! sign.\r\n*/\r\n\r\n//This example uses the 'text' plugin to load a resource\r\n//called some/template.html. So, text.js is loaded, then its\r\n//load() method is called to load some/template.html. The\r\n//load() method is passed a callback function to indicate when\r\n//the resource is loaded.\r\ndefine(['text!some/template.html'], function (templateString) {\r\n});\r\n\r\n/*\r\nUseful plugins:\r\n* env: changes a resource name to include the environment (node or browser)\r\n  in the resource name. I use this in RequireJS to allow running \r\n  the optimizer either in Node or Rhino:\r\n  https://github.com/jrburke/requirejs/blob/optimizer/build/jslib/env.js\r\n  It can be seen as a replacement of the overlays feature in packages.\r\n* text: to load a text file, useful for templates.\r\n* i18n: can load a few modules to present one object\r\n  to the application which is a combination of country, language.\r\n\r\nThis plugin approach can be used instead of the require.extensions in Node.\r\nSo things like a coffeescript or binary extensions could\r\nbe supported via coffee! and node! plugins.\r\n\r\nPlugins also can implement some APIs to participate in a build optimizer, \r\nso they can inject their resources into a built file. This is very useful \r\nfor browsers, but could also benefit node, by allowing single file JS \r\nutilities instead of delivering a whole package. Complete plugin \r\nAPI is here:\r\nhttp://requirejs.org/docs/plugins.html\r\n*/\r\n\r\n//***********************************************\r\n//Level 4, configuration and pathing and packages\r\n//***********************************************\r\n/*\r\nBrowsers should only use one path to look up a module. It is error \r\nprone and very bad for performance to look in more than one place. \r\nSo it is important to configure where the baseUrl for all modules \r\nare found, and to allow some path mappings for modules that may not\r\nbe inside that baseUrl.\r\n\r\nI use an object passed to require() in the top level script, but \r\nI am open to specifying a require.config() instead of overloading \r\nrequire() so much:\r\n*/\r\n\r\nrequire({\r\n    baseUrl: 'scripts',\r\n    //Optional path adjustments for\r\n    //modules that are not in the baseUrl directory.\r\n    paths: {\r\n        'some/module': '../external/some/module'\r\n    }\r\n});\r\n\r\n/*\r\n1) CommonJS packages with a 'lib' and 'main' config give too many\r\noptions for configuration, and in a browser configuration those \r\nconfig values need to be passed down to the client. This is \r\nawkward and ugly. I do support it in RequireJS via package config:\r\nhttp://requirejs.org/docs/api.html#packages\r\n\r\nHowever, I much rather prefer a stronger convention and \r\nto remove the 'main' and 'lib' features of CommonJS packages. \r\nIn this way, a package manager does not have to parse the \r\npackage.json and insert configuration in the application. \r\nIt is much cleaner and easier to follow.\r\n\r\nSo I prefer to move to an approach where getting a module from a\r\npackage uses its explicit module name. So instead of doing\r\nrequire('packageName'), use\r\nrequire('packageName/index') or require('packageName/main')\r\ninstead. This means there is no configuration besides a baseUrl\r\nis needed, and it is clearer all around what is going on.\r\n\r\n2) I have found with other systems like Java and Python that having a \r\nclasspath or a set of commonly used packages that are used across all \r\napplications to be a source of pain than an actual help. Version \r\nconflicts being the main issue, and tracking down the magic directories \r\nused by an execution environment being another.\r\n\r\nBy requiring each app to have its own packages relative to its own \r\nbaseUrl, it makes the application much more understandable and robust. \r\nSince there is only one lookup path per module it is even clearer. \r\n\r\nSo that is the other change I advocate: no more require.paths, \r\nno magic place to install modules. Having some basic modules\r\ndelivered as part of Node still may make sense though.\r\n\r\nThis also matches how web browser applications work today -- all\r\nthe scripts need to be visible relative to the HTML page on URLs\r\nthat are easy to discover.\r\n*/","created_at":"2013-03-19 11:58:22 +0000","updated_at":"2013-03-19 11:58:22 +0000","private":0,"tags":"N;"},{"id":46,"category_id":2,"user_id":6,"title":"CommonJS wrapper for RequireJS","description":"CommonJS wrapper for RequireJS","content":"/*\r\nA \"simplified CommonJS wrapper\" form is also supported by many of the AMD loaders, if people want something close to the CommonJS format, and is more lightweight than your third example:\r\n*/\r\n\r\ndefine(function (require) {\r\n    var myLib = require('path/to/myLib');\r\n    return moduleValue;\r\n});\r\nIf you want to use CommonJS exports and module:\r\n\r\ndefine(function (require, exports, module) {\r\n    var myLib = require('path/to/myLib');\r\n    exports.foo = 'foo';\r\n});\r\n/*\r\nIn these forms, the AMD loader will toString the function and scan for the require calls, load and execute those dependencies then call this function. More info here: http://requirejs.org/docs/commonjs.html\r\n*/","created_at":"2013-03-19 11:58:22 +0000","updated_at":"2013-03-19 11:58:22 +0000","private":0,"tags":"N;"},{"id":47,"category_id":2,"user_id":6,"title":"CurlJS - exemple","description":"CurlJs - simple exemple","content":"<script>\r\n\r\n    // configure curl\r\n    curl = {\r\n        paths: {\r\n            cssx: 'cssx/src/cssx/',\r\n            stuff: 'my/stuff/'\r\n        }\r\n    };\r\n\r\n</script>\r\n<script src=\"../js/curl.js\" type=\"text/javascript\"></script>\r\n<script type=\"text/javascript\">\r\n\r\n    curl(\r\n        // fetch all of these resources (\"dependencies\")\r\n        [\r\n            'stuff/three', // an AMD module\r\n            'cssx/css!stuff/base', // a css file\r\n            'i18n!stuff/nls/strings', // a translation file\r\n            'text!stuff/template.html', // an html template\r\n            'domReady!'\r\n        ]\r\n    )\r\n    // when they are loaded\r\n    .then(\r\n        // execute this callback, passing all dependencies as params\r\n        function (three, link, strings, template) {\r\n            var body = document.body;\r\n            if (body) {\r\n                body.appendChild(document.createTextNode('three == ' + three.toString() + ' '));\r\n                body.appendChild(document.createElement('br'));\r\n                body.appendChild(document.createTextNode(strings.hello));\r\n                body.appendChild(document.createElement('div')).innerHTML = template;\r\n            }\r\n        },\r\n        // execute this callback if there was a problem\r\n        function (ex) {\r\n            var msg = 'OH SNAP: ' + ex.message;\r\n            alert(msg);\r\n        }\r\n    );\r\n\r\n</script>","created_at":"2013-03-19 11:58:22 +0000","updated_at":"2013-03-19 11:58:22 +0000","private":0,"tags":"N;"},{"id":48,"category_id":2,"user_id":6,"title":"JavaScript Design Patterns: Mediator","description":"JavaScript Design Patterns: Mediator","content":"// source : http://arguments.callee.info/2009/05/18/javascript-design-patterns--mediator/\r\n\r\n Mediator = function() {\r\n        \r\n        var debug = function() {\r\n            // console.log or air.trace as desired\r\n        };\r\n        \r\n        var components = {};\r\n        \r\n        var broadcast = function(event, args, source) {\r\n            var e = event || false;\r\n            var a = args || [];\r\n            if (!e) {\r\n                return;\r\n            }\r\n            //debug([\"Mediator received\", e, a].join(' '));\r\n            for (var c in components) {\r\n                if (typeof components[c][\"on\" + e] == \"function\") {\r\n                    try {\r\n                        //debug(\"Mediator calling \" + e + \" on \" + c);\r\n                        var s = source || components[c];\r\n                        components[c][\"on\" + e].apply(s, a);\r\n                    } catch (err) {\r\n                        debug([\"Mediator error.\", e, a, s, err].join(' '));\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        \r\n        var addComponent = function(name, component, replaceDuplicate) {\r\n            if (name in components) {\r\n                if (replaceDuplicate) {\r\n                    removeComponent(name);\r\n                } else {\r\n                    throw new Error('Mediator name conflict: ' + name);\r\n                }\r\n            }\r\n            components[name] = component;\r\n        };\r\n        \r\n        var removeComponent = function(name) {\r\n            if (name in components) {\r\n                delete components[name];\r\n            }\r\n        };\r\n        \r\n        var getComponent = function(name) {\r\n            return components[name] || false;\r\n        };\r\n        \r\n        var contains = function(name) {\r\n            return (name in components);\r\n        };\r\n        \r\n        return {\r\n            name      : \"Mediator\",\r\n            broadcast : broadcast,\r\n            add       : addComponent,\r\n            rem       : removeComponent,\r\n            get       : getComponent,\r\n            has       : contains\r\n        };\r\n    }();\r\n\r\n\r\n/// use :\r\n\r\n   Mediator.add('TestObject', function() {\r\n        \r\n        var someNumber = 0; // sample variable\r\n        var someString = 'another sample variable';\r\n        \r\n        return {\r\n            onInitialize: function() {\r\n                // this.name is automatically assigned by the Mediator\r\n                alert(this.name + \" initialized.\");\r\n            },\r\n            onFakeEvent: function() {\r\n                someNumber++;\r\n                alert(\"Handled \" + someNumber + \" times!\");\r\n            },\r\n            onSetString: function(str) {\r\n                someString = str;\r\n                alert('Assigned ' + someString);\r\n            }\r\n        }\r\n    }());\r\n    Mediator.broadcast(\"Initialize\");                 // alerts \"TestObject initialized\"\r\n    Mediator.broadcast('FakeEvent');                  // alerts \"Handled 1 times!\" (I know, bad grammar)\r\n    Mediator.broadcast('SetString', ['test string']); // alerts \"Assigned test string\"\r\n    Mediator.broadcast('FakeEvent');                  // alerts \"Handled 2 times!\"\r\n    Mediator.broadcast('SessionStart');               // this call is safely ignored\r\n    Mediator.broadcast('Translate', ['this is also safely ignored']);","created_at":"2013-03-19 11:58:22 +0000","updated_at":"2013-03-19 11:58:22 +0000","private":0,"tags":"N;"},{"id":49,"category_id":11,"user_id":6,"title":"_VIMRC file example","description":"_VIMRC file example","content":"\"\"\"\"\"\"\"\"\"\"\"\r\n\"BEGIN MES SETTINGS\r\n\"\"\"\"\"\"\"\"\"\"\"\r\nset ff=unix\r\nset number\r\nsyntax on\r\nset mouse=a\r\n\"colo darkblue\r\ncolo desert\r\nset noswapfile\r\n\"set guifont=Lucida_Console:h9\r\nset guifont=Consolas:h10\r\n\r\nset backspace=indent,eol,start\r\nfiletype plugin on\r\nfiletype on\r\nset nowrap\r\n\"utilise tab pour l'auto completion\r\n\"inoremap <tab> <c-x><c-o>\r\n\"USE CTRL SPACE FOR INDENT / UTILISER CTRL SPACE pour indentation\r\ninoremap <c-space> <c-x><c-o>\r\n\"filetype indentation\r\n\r\nset smartindent\r\nset autoindent\r\nset expandtab\r\nset softtabstop=2\r\nset shiftwidth=2\r\nfiletype indent on\r\n\"raccourci zen coding\r\nlet g:user_zen_expandabbr_key = '<c-e>'\r\n\"\"\"d'autres options pour l'auto completion\r\nset wildmode=list,full\r\nset wildmenu\r\n\"\"\"auto close quotes\r\ninoremap \" \"\"<left>\r\ninoremap \"<space> \"\r\ninoremap \"\" \"\"\r\ninoremap '<space> '\r\ninoremap ' ''<left>\r\ninoremap '' ''\r\n\"\"\"AUTO CLOSE BRACKETS\r\ninoremap {      {}<Left>\r\ninoremap {<CR>  {<CR>}<Esc>O\r\ninoremap {{     {\r\ninoremap {<space> {\r\ninoremap {}     {}\r\n\"AUTO CLOSE PARANTHESIS\r\ninoremap (      ()<Left>\r\ninoremap (<space> (\r\ninoremap (<CR>  (<CR>)<Esc>O\r\ninoremap ((     (\r\ninoremap ()     ()\r\n\"\"\"AUTO CLOSE ARRAY PARANTHESIS\r\ninoremap [      []<Left>\r\ninoremap [<CR>  [<CR>]<Esc>O\r\ninoremap [[     [\r\ninoremap [<space> [\r\ninoremap []     []\r\n\"save shortcut\"\r\ninoremap <c-s> <esc>:w<cr>i\r\nmap <c-s> <esc>:w<cr>i\r\nmap <f5> <esc>:NERDTreeToggle<cr>\r\ninoremap <f5> <esc>:NERDTreeToggle<cr>\r\n\r\n\"INDENT GUIDES\r\nIndentGuidesEnable\r\n\r\n\"TlistToggle\r\ninoremap <f8> <esc>:TlistToggle<cr>\r\nmap <f8> <esc>:TlistToggle<cr>\r\n\r\nif executable('coffeetags')\r\n  let g:tagbar_type_coffee = {\r\n        \\ 'ctagsbin' : 'coffeetags',\r\n        \\ 'ctagsargs' : '-f coffeetags',\r\n        \\ 'kinds' : [\r\n        \\ 'f:functions',\r\n        \\ 'o:object',\r\n        \\ ],\r\n        \\ 'sro' : \".\",\r\n        \\ 'kind2scope' : {\r\n        \\ 'f' : 'object',\r\n        \\ 'o' : 'object',\r\n        \\ }\r\n        \\ }\r\nendif\r\n\r\nset fdm=indent\r\nset foldcolumn=4","created_at":"2013-03-19 11:58:22 +0000","updated_at":"2013-03-19 11:58:22 +0000","private":0,"tags":"N;"},{"id":50,"category_id":11,"user_id":6,"title":"GIT - Rename a branch","description":"GIT - Rename a branch","content":"git branch -m old_branch new_branch","created_at":"2013-03-19 11:58:22 +0000","updated_at":"2013-03-19 11:58:22 +0000","private":0,"tags":"N;"},{"id":51,"category_id":2,"user_id":6,"title":"Parse an XML Document","description":"Parse an XML Document","content":"/*\r\nsource : http://www.w3schools.com/xml/xml_parser.asp\r\nParse an XML Document\r\nThe following code fragment parses an XML document into an XML DOM object:\r\n*/\r\n\r\nif (window.XMLHttpRequest)\r\n  {// code for IE7+, Firefox, Chrome, Opera, Safari\r\n  xmlhttp=new XMLHttpRequest();\r\n  }\r\nelse\r\n  {// code for IE6, IE5\r\n  xmlhttp=new ActiveXObject(\"Microsoft.XMLHTTP\");\r\n  }\r\nxmlhttp.open(\"GET\",\"books.xml\",false);\r\nxmlhttp.send();\r\nxmlDoc=xmlhttp.responseXML;\r\n/*\r\nParse an XML String\r\n\r\nThe following code fragment parses an XML string into an XML DOM object:\r\n*/\r\ntxt=\"<bookstore><book>\";\r\ntxt=txt+\"<title>Everyday Italian</title>\";\r\ntxt=txt+\"<author>Giada De Laurentiis</author>\";\r\ntxt=txt+\"<year>2005</year>\";\r\ntxt=txt+\"</book></bookstore>\";\r\n\r\nif (window.DOMParser)\r\n  {\r\n  parser=new DOMParser();\r\n  xmlDoc=parser.parseFromString(txt,\"text/xml\");\r\n  }\r\nelse // Internet Explorer\r\n  {\r\n  xmlDoc=new ActiveXObject(\"Microsoft.XMLDOM\");\r\n  xmlDoc.async=false;\r\n  xmlDoc.loadXML(txt); \r\n  }","created_at":"2013-03-19 11:58:22 +0000","updated_at":"2013-03-19 11:58:22 +0000","private":0,"tags":"N;"},{"id":52,"category_id":11,"user_id":6,"title":"Git - Change commit encoding to UTF8","description":"Git - Change commit encoding to UTF8","content":"git config --global i18n.commitEncoding 'utf8'","created_at":"2013-03-19 11:58:22 +0000","updated_at":"2013-03-19 11:58:22 +0000","private":0,"tags":"N;"},{"id":53,"category_id":2,"user_id":6,"title":"Custom DOM events","description":"Custom DOM events","content":"//Listen for the event\r\nwindow.addEventListener(\"MyEventType\", function(evt) {\r\n    alert(evt.detail);\r\n}, false);\r\n\r\n//Dispatch an event\r\nvar evt = document.createEvent(\"CustomEvent\");\r\nevt.initCustomEvent(\"MyEventType\", true, true, \"Any Object Here\");\r\nwindow.dispatchEvent(evt);\r\nlink|edit|flag","created_at":"2013-03-19 11:58:22 +0000","updated_at":"2013-03-19 11:58:22 +0000","private":0,"tags":"N;"},{"id":54,"category_id":1,"user_id":6,"title":"a new snippet","description":"description of a new snippet","content":"content of the new snippet","created_at":"2013-03-19 11:58:22 +0000","updated_at":"2013-03-19 11:58:22 +0000","private":0,"tags":"N;"},{"id":55,"category_id":14,"user_id":6,"title":"Coffeescript tips and tricks","description":"Coffeescript tips and tricks","content":"# source : https://gist.github.com/993584\r\n\r\n# These are my notes from the PragProg book on CoffeeScript of things that either \r\n# aren't in the main CS language reference or I didn't pick them up there. I wrote \r\n# them down before I forgot, and put it here for others but mainly as a reference for \r\n# myself.\r\n\r\n# assign arguments in constructor to properties of the same name:\r\nclass Thingie\r\n    constructor: (@name, @url) ->\r\n\r\n# is the same as:\r\nclass Thingie\r\n    constructor: (name, url) ->\r\n        @name = name\r\n        @url = url\r\n\r\n#execute a function with no arguments:\r\nlcword = do str.toLowerCase\r\n# is the same as:\r\nlcword = str.toLowerCase()\r\n\r\n# invoke a method on each object in an array\r\n(marker.remove()) for marker in @markers\r\n\r\nfor key, value of object\r\n     # do things with key and value\r\n\r\nfor own key, value of object\r\n     # do things with object's own properties only\r\n\r\nfor key, value of object when key in ['foo', 'bar', 'baz']\r\n     # iterate through properties that meet the when condition\r\n\r\n# give me an array's values based on a condition: \r\nfoobar = (value for key, value of object when key in ['foo', 'bar'])\r\n\r\nfor x in [1..100] by 10\r\n     # iterate from 1 to 100 in steps of 10\r\n\r\n# Call the \"process\" function on each property of results array that has \"food\" in the title\r\nprocess result for result in results when _.include(result.title, 'food')\r\n\r\n# Executing an anonymous function while a condition is met:\r\na = 0\r\n(do -> console.log(a++)) while a<10\r\n(do -> console.log(a--)) until a is 1\r\n\r\n# Put the comprehension in parentheses to return it as an array, including only those values that meet the by/when condition:\r\nevens = (x for x in [2..10] by 2)\r\n=> evens = [2,4,6,8,10]\r\n\r\n# Given an alphabet:\r\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\r\n\r\n# Iterate over part of the alphabet:\r\nconsole.log letter for letter in alphabet[4..8]\r\n=> Logs 'e' through 'i' to the console\r\n\r\n# Iterate through the first part of the alphabet, up to e:\r\nconsole.log letter for letter in alphabet[..4]\r\n\r\n# Stop just before e (notice the 3 dots in the range:\r\nconsole.log letter for letter in alphabet[...4]\r\n\r\n# Start at e and go to the end alphabet:\r\nconsole.log letter for letter in alphabet[4..]\r\n\r\n# Useful for pagination:\r\npaginate = (start, end) -> @results[start..end]\r\n\r\n# Just JS but useful to remember:\r\nbreak # stop iterating\r\ncontinue # jump to the next iteration\r\n\r\n# Iterate using \"for\" but have each iteration run in closure:\r\nfor x in arr\r\n     do (x) ->\r\n          # do something in own scope","created_at":"2013-03-19 11:58:22 +0000","updated_at":"2013-03-19 11:58:22 +0000","private":0,"tags":"N;"},{"id":56,"category_id":2,"user_id":6,"title":"Couchapp - 101","description":"how to create a basic couch app","content":"// install couch db\r\n// install couch app tool\r\nin the console :\r\ncouchapp generate hello-couch","created_at":"2013-03-19 11:58:22 +0000","updated_at":"2013-03-19 11:58:22 +0000","private":0,"tags":"N;"},{"id":57,"category_id":11,"user_id":6,"title":"REST requests with Curl","description":"REST requests with Curl","content":"source : http://blogs.plexibus.com/2009/01/15/rest-esting-with-curl/\r\n\r\nREST-esting with cURL\r\nI have been working on RESTful web applications over the past few months and have been using cURL to quickly test functionality.\r\n\r\nThe following are basic curl commands to test REST resources\r\n\r\nPOSTing data to a REST resource:\r\n\r\ncurl -i -H \"Accept: application/json\" -X POST -d \"firstName=james\" http://192.168.0.165/persons/person\r\nwhere,\r\ni â€“ show response headers\r\nH â€“ pass request headers to the resource\r\nX â€“ pass a HTTP method name\r\nd â€“ pass in parameters enclosed in quotes; multiple parameters are separated by â€˜&â€™\r\nThe above command posts the first name â€œjamesâ€ to the persons resource. Assuming the server creates a new person resource with first name of James, I also tell the server to return a json representation of the newly created resource.\r\n\r\nPUT a resource:\r\n\r\ncurl -i -H \"Accept: application/json\" -X PUT -d \"phone=1-800-999-9999\" http://192.168.0.165/persons/person/1\r\nThis puts a phone number to the person resource created in the previous example.\r\n\r\nGET a resource:\r\n\r\ncurl -i -H \"Accept: application/json\" http://192.168.0.165/persons/person/1\r\nFor GET requests, the -X GET option is optional.\r\n\r\ncurl -i -H \"Accept: application/json\" http://192.168.0.165/persons?zipcode=93031\r\nYou can pass in query parameters by appending it to the url.\r\n\r\ncurl -i -H \"Accept: application/json\" \"http://192.168.0.165/persons?firstName=james&lastName=wallis\"\r\nThe resource uri needs to be quoted if you pass in multiple query parameters separated by â€˜&â€™. If you have spaces in the query values, you should encode them i.e. either use the â€˜+â€™ symbol or %20 instead of the space.\r\n\r\nDELETE a resource:\r\n\r\ncurl -i -H \"Accept: application/json\" -X DELETE http://192.168.0.165/persons/person/1\r\nTo delete a resource, supply DELETE as a -X option.\r\n\r\nUsing POST to PUT a resource:\r\n\r\ncurl -i -H \"Accept: application/json\" -H \"X-HTTP-Method-Override: PUT\" -X POST -d \"phone=1-800-999-9999\" http://192.168.0.165/persons/person/1\r\nSome clients do not support PUT or itâ€™s difficult to send in a PUT request. For these cases, you could POST the request with a request header of X-HTTP-Method-Override set to PUT. What this tells the server is that the intended request is a PUT.\r\nMost web servers (or you could code it) support the X-HTTP-Method-Override and convert the request method to the intended HTTP method (value of the X-HTTP-Method-Override)\r\nThis example puts a phone number (by POSTing) to the person resource identified by 1.\r\n\r\nUsing POST to DELETE a resource:\r\n\r\ncurl -i -H \"Accept: application/json\" -H \"X-HTTP-Method-Override: DELETE\" -X POST http://192.168.0.3:8090/persons/person/1\r\nSimilar to the previous command, this example deletes the person resource identified by the above uri using the POST HTTP method but telling the server to override it with DELETE.\r\n\r\nAnother good tool to test REST resources is the Poster Firefox Add-on. Itâ€™s a great GUI tool if you do not want to get down and dirty with cURL or if you are testing from Windows (of course you could install Cygwin and then install and use cURL).\r\nBut Iâ€™m still more productive with cURL as opposed to Poster.\r\n\r\nTo use cURL to PUT/GET files, see here.","created_at":"2013-03-19 11:58:22 +0000","updated_at":"2013-03-19 11:58:22 +0000","private":0,"tags":"N;"},{"id":58,"category_id":1,"user_id":6,"title":"a new snippet","description":"description of a new snippet","content":"content of the new snippet","created_at":"2013-03-19 11:58:22 +0000","updated_at":"2013-03-19 11:58:22 +0000","private":0,"tags":"N;"},{"id":59,"category_id":4,"user_id":6,"title":"Shortcut  icon - favicon","description":"Shortcut  icon - favicon","content":"<!-- in the HEAD of a html document -->\r\n<link rel=\"shortcut icon\" type=\"image/png\" href=\"images/mp.png\" />\r\n","created_at":"2013-03-19 11:58:22 +0000","updated_at":"2013-03-19 11:58:22 +0000","private":0,"tags":"N;"},{"id":60,"category_id":11,"user_id":6,"title":"CouchDB 101","description":"CouchDB 101","content":"#lister les bases de donnÃ©es\r\n\r\ncurl -X GET http://127.0.0.1:5984/_all_dbs\r\n\r\n# creer une base de donnÃ©e\r\n\r\ncurl -X PUT http://127.0.0.1:5984/database_name\r\n\r\n# effacer une base de donnÃ©e\r\n\r\ncurl -X DELETE http://127.0.0.1:5984/database_name","created_at":"2013-03-19 11:58:22 +0000","updated_at":"2013-03-19 11:58:22 +0000","private":0,"tags":"N;"},{"id":61,"category_id":11,"user_id":6,"title":"REST-esting with cURL: File Handling","description":"REST-esting with cURL: File Handling","content":"#REST-esting with cURL: File Handling\r\n#The preview of CloudIQ Storage brings Amazon S3-like functionality to Managed Service Providers, organizations, and businesses. It opens up new possibilities with distributed, reliable storage of data and and importantly, computational storage.\r\n#\r\n#CloudIQ Storage exposes a RESTful interface that clients can use to store and retrieve files. Using cURL you can be on your way to PUTing and GETing files to CloudIQ Storage or any RESTful server that accepts files. This post is a follow-up to the REST-esting with cURL.\r\n#\r\n#The following are basic curl commands to test PUT/GET of files\r\n#\r\n#PUT a file\r\n#\r\n#view plaincopy to clipboardprint?\r\ncurl -i -u fabric-admin:fabric-admin -X PUT -T \"test\" http://192.168.0.165:16088/files/test  \r\n#where,\r\n#i â€“ show response headers\r\n#u â€“ server authentication information, in the form of user:password\r\n#X â€“ pass a HTTP method name\r\n#T â€“ name of file to upload\r\n#The above command PUTs test file.\r\n#\r\n#Optionally, you can leave out the file part in the URL, ending the URL with a trailing slash. cURL will append the local file name in this case. Note that you must use a trailing slash (/) on the last directory to tell cURL to use the file name as specified in the -T argument or cURL will use your last directory name as the remote file name to use.\r\n#\r\n#view plaincopy to clipboardprint?\r\ncurl -i -u fabric-admin:fabric-admin -X PUT -T \"test\" http://192.168.0.165:16088/files/  \r\n#The above command transfers test file to http://192.168.0.165:16088/files/.\r\n#\r\n#PUT multiple files in single command\r\n#\r\n#You can PUT multiple files via a single command by enclosing them within braces as shown below:\r\n#\r\n#view plaincopy to clipboardprint?\r\ncurl -i -u fabric-admin:fabric-admin -X PUT -T \"{test4,test5}\" http://192.168.0.165:16088/files/  \r\n#The above command transfers files test4 and test5 to http://192.168.0.165:16088/files/.\r\n#\r\n#If you have many files with the almost the same name but differentiated from each other by a number (say, test4, test5, test6, test7), you could use an alternative to the above command to transfer all these files in one cURL command:\r\n#\r\n#view plaincopy to clipboardprint?\r\ncurl -i -u fabric-admin:fabric-admin -X PUT -T \"test[4-6]\" http://192.168.0.165:16088/files/  \r\n#GET a file\r\n#\r\n#view plaincopy to clipboardprint?\r\ncurl -u fabric-admin:fabric-admin -O http://192.168.0.165:16088/files/test4  \r\n#where,\r\n#O â€“ use the remote file name for the local file\r\n#The above command GETs the contents of file test4 from remote location http://192.168.0.165:16088/files/test4 and writes the output to local file named like the remote file (in this case, test4).\r\n#\r\n#If you want to store the contents in a local file with a name different from the remote file name, you could use the -o option:\r\n#\r\n#view plaincopy to clipboardprint?\r\ncurl -u fabric-admin:fabric-admin -o test10 http://192.168.0.165:16088/files/test4  \r\n#The above command GETs the contents of file test4 from remote location http://192.168.0.165:16088/files/test4 and writes the output to local file test10.\r\n#\r\n#Get HEADers\r\n#There are times when you just need the headers for a file. You could retrieve the headers for a file by running the following command:\r\n#\r\n#view plaincopy to clipboardprint?\r\ncurl -I -u fabric-admin:fabric-admin http://192.168.0.165:16088/files/test4  \r\n#where,\r\n#I â€“ fetches the HTTP headers only\r\n#The above command will display the HTTP headers returned by http://192.168.0.165:16088/files/test4\r\n#\r\n#If you want to capture the file contents and the HTTP headers at the same time, you can use the -D option:\r\n#\r\n#view plaincopy to clipboardprint?\r\ncurl -u fabric-admin:fabric-admin -D \"test4-headers\" -O http://192.168.0.165:16088/files/test4  \r\n#The above command GETs the contents of file test4 from remote location http://192.168.0.165:16088/files/test4 and at the same time outputs the HTTP headers to file test4-headers\r\n#\r\n#For more examples using cURL for testing web services, see here.","created_at":"2013-03-19 11:58:22 +0000","updated_at":"2013-03-19 11:58:22 +0000","private":0,"tags":"N;"},{"id":62,"category_id":1,"user_id":6,"title":"Autoload Classes using namespaces ","description":"Autoload Classes using namespaces ","content":"#I think there shouldn't be tests in an autoload callback function, this callback will trigger \r\n#because the class you're trying to load is not defined... in any case if your class is not \r\n#defined, the code must fail. Therefore an autoload function should be like : \r\n\r\n<?php \r\nspl_autoload_register(function($className) \r\n{ \r\n    require(str_replace('\\\\', '/', ltrim($className, '\\\\')) . '.php'); \r\n}); \r\n?> \r\n\r\n#As the \"require\" function uses the include_path, the folders for the autoinclusion should be added using set_include_path, let's say your index.php is located in a \"public\" directory and your MVC classes are in \"core\", the index.php should be : \r\n\r\n<?php \r\ndefine('ROOT_DIR', realpath(__DIR__ . '/..')); \r\n\r\nset_include_path(ROOT_DIR . PATH_SEPARATOR . get_include_path()); \r\n?> \r\n\r\n#And of course you want to catch the loading errors, so you can use class_exists : \r\n\r\n<?php \r\n$className = '\\core\\Controller\\Hello\\World'; \r\n\r\nif (!class_exists($className)) \r\n{ \r\n    throw new ErrorException('Class Not Found !'); \r\n} \r\nelse \r\n{ \r\n    $object = new $className(); \r\n} \r\n?> \r\n\r\n#This code sample will autoload the \"World.php\" file located in your \"core/Controller/Hello\" directory, assuming that your class declaration is like : \r\n\r\n<?php \r\nnamespace coreControllerHello; \r\n\r\nclass World \r\n{ \r\n    function __construct() \r\n    { \r\n        echo \"Helloworld\"; \r\n    } \r\n} \r\n?>","created_at":"2013-03-19 11:58:22 +0000","updated_at":"2013-03-19 11:58:22 +0000","private":0,"tags":"N;"},{"id":63,"category_id":1,"user_id":6,"title":"PDO 101","description":"PDO 101","content":"# What is PDO.\r\n# \r\n# PDO is a PHP extension to formalise PHP's database connections by creating a uniform interface. This allows developers to create code which is portable across many databases and platforms. PDO is _not_ just another abstraction layer like PearDB although PearDB may use PDO as a backend. Those of you familiar with Perls DBI may find the syntax disturbingly familiar.\r\n# Note: Your must read the section on Error Handling to benifit from this tutorial\r\n# \r\n# During this tutorial we will be using a database called animals, which, as you might have guessed, is a database of animals, genius! The animals table is described here.\r\n# CREATE TABLE animals ( animal_id MEDIUMINT(8) NOT NULL AUTO_INCREMENT PRIMARY KEY,\r\n# animal_type VARCHAR(25) NOT NULL,\r\n# animal_name VARCHAR(25) NOT NULL \r\n# ) ENGINE = MYISAM ;\r\n# \r\n# INSERT INTO `animals` (`animal_id`, `animal_type`, `animal_name`) VALUES\r\n# (1, 'kookaburra', 'bruce'),\r\n# (2, 'emu', 'bruce'),\r\n# (3, 'goanna', 'bruce'),\r\n# (4, 'dingo', 'bruce'),\r\n# (5, 'kangaroo', 'bruce'),\r\n# (6, 'wallaby', 'bruce'),\r\n# (7, 'wombat', 'bruce'),\r\n# (8, 'koala', 'bruce');\r\n# What databases does PDO support?\r\n# \r\n# PDO supports many of the popular databases as seen on the list below.\r\n# DBLIB: FreeTDS / Microsoft SQL Server / Sybase\r\n# Firebird (http://firebird.sourceforge.net/): Firebird/Interbase 6\r\n# IBM (IBM DB2)\r\n# INFORMIX - IBM Informix Dynamic Server\r\n# MYSQL (http://www.mysql.com/): MySQL 3.x/4.0\r\n# OCI (http://www.oracle.com): Oracle Call Interface\r\n# ODBC: ODBC v3 (IBM DB2 and unixODBC)\r\n# PGSQL (http://www.postgresql.org/): PostgreSQL\r\n# SQLITE (http://sqlite.org/): SQLite 3.x\r\n# To see if the PDO driver is available for your database, check phpinfo() and you should have a section named PDO and another pdo_mysql or pdo_sqlite depending on your choice of database. You may also check the available drivers with the static method PDO::getAvailableDrivers().\r\n# \r\n<?php\r\nforeach(PDO::getAvailableDrivers() as $driver)\r\n    {\r\n    echo $driver.'<br />';\r\n    }\r\n?>\r\n# To enable PDO simply configure --enable-pdo and --with-pdo_sqlite --with_pdo_mysql or whatever database needs supporting by PDO.\r\n# Windows users will need to un-comment the appropriate line in php.ini and restart the web server.\r\n# Where do I begin?\r\n# \r\n# If you are reading this you are more than likely to have connected to a database using PHP before using a database specific function such as mysql_connect() or pg_connect or, for the truely evolved coder, SQLite. To use PDO with your database you need to have the correct PDO driver installed for it. For the SQLite PDO driver you need to configure PHP --with-pdo-sqlite. If you are using a RPM based system there are pdo-sqlite.rpm's available. Before we go any further, lets connect to a database and see what all the fuss is about.\r\n# Connect to a database\r\n# \r\n# Every interaction with a database begins with a connection. Regardless of the database you use, you must connect first and establish a database handler. After connecting you your database of choice, much of the PDO methods are similar. This is why PDO is such a powerful and useful tool for PHP. Here we show how to connect to various databases and establish a database handler object that we can use for further interaction with the database.\r\n# Connect with PgSQL\r\n\r\n# As mentioned above, you may have previously tried to connect to a PgSQL database using pg_connect. Here we connect with PDO.\r\n<?php\r\ntry {\r\n    $db = new PDO(\"pgsql:dbname=pdo;host=localhost\", \"username\", \"password\" );\r\n    echo \"PDO connection object created\";\r\n    }\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# So that was a bit of a no-brainer to start with, we see the use of \"new\" to create the PDO object followed by the database type username and password. This should be familiar to most people who have connected to a database before using traditional methods.. As we have used try{} and catch(){} we see upon failure that an exception is thrown with the error message \"could not find driver\". This tells us the PDO_PGSQL driver is not present and needs to be loaded. As noted, an exception is thrown. PDO can handle errors in several ways, more on this later.\r\n# How did it connect to the database?\r\n# The database connection is handled internally by PDO's __construct() and this represents our database connection.\r\n# Lets see what happens if we try to connect to database as we did above without catching the exception and see what happens..\r\n<?php\r\n $db = new PDO(\"pgsql:dbname=no_database;host=localhost\", \"username\", \"password\" );\r\n?>\r\n# From the above snippet you will get a result something like this below\r\n# Fatal error: Uncaught exception 'PDOException' with message 'could not find driver' in /www/pdo.php:2 Stack trace: #0 /www/pdo.php(2): PDO->__construct('pgsql:dbname=pd...', 'username', 'password') #1 {main} thrown in /www/pdo.php on line 2\r\n# This is the default behaviour when an exception is not caught, a backtrace is generated and the script is terminated. As you can see, all the information is dumped including the file path and the database username and password. It is the responsibility of the coder to catch exceptions or to deal with the errors using set_exception_handler() function to prevent this happening. More about handling errors and exceptions later.\r\n# Connect to SQLite\r\n# When PDO is used with SQLite, database creation becomes even easier. Simply specify the path to the database file and it will be loaded. If the database file does not exist, PDO will attempt to create it. Lets see how we go with the same code but change the database to SQLite.\r\n<?php\r\ntry {\r\n    /*** connect to SQLite database ***/\r\n    $dbh = new PDO(\"sqlite:/path/to/database.sdb\");\r\n    }\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# Because the database path does not exist and cannot be created, an exception is thrown, the exception is caught in the catch block and the error message is displayed with $e->Message(). Now that we know how to create a database, we can create tables and INSERT some data.\r\n# Another feature of SQLite is the ability to create tables in memory. This can be amazingly helpful if you wish to create tempory databases or tables or even for development code.\r\n<?php\r\ntry {\r\n    /*** connect to SQLite database ***/\r\n    $db = new PDO(\"sqlite::memory\");\r\n\r\n    /*** a little message to say we did it ***/\r\n    echo 'database created in memory';\r\n    }\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# We see above that a database is created in memory and a message is displayed to let us know. If the creation of the database failed, a PDO exception would be thrown and the script terminated at that point, passing control to the catch block.\r\n# Connect to MySQL\r\n# \r\n# MySQL is the choice of many web developers and will be used as the database of choice for much of this tutorial. Here we see how to connect to a MySQL database.\r\n\r\n<?php\r\n\r\n/*** mysql hostname ***/\r\n$hostname = 'localhost';\r\n\r\n/*** mysql username ***/\r\n$username = 'username';\r\n\r\n/*** mysql password ***/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=mysql\", $username, $password);\r\n    /*** echo a message saying we have connected ***/\r\n    echo 'Connected to database';\r\n    }\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# Connect to Firebird\r\n# Often used by developers using windows, Firebird is a good database and connection is just as simple as the examples above.\r\n<?php\r\ntry {\r\n    $dbh = new PDO(\"firebird:dbname=localhost:C:\\Programs\\Firebird\\DATABASE.FDB\", \"SYSDBA\", \"masterkey\");\r\n    }   \r\ncatch (PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# Connect to Informix\r\n#Informix is popular with many windows users also, this example shows how to connect to an informix database cataloged as InformixDB in odbc.ini:\r\n<?php\r\ntry {\r\n    $dbh = new PDO(\"informix:DSN=InformixDB\", \"username\", \"password\");\r\n    }\r\ncatch (PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# Connect to Oracle\r\n\r\n# The Oracle database is used by many 'enterprise' companies but these days there are sleeker options. Lets see a simple connection to Oracle\r\n<?php\r\ntry {\r\n    $dbh = new PDO(\"OCI:\", \"username\", \"password\")\r\n    }\r\ncatch (PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# This works fine for a simple Oracle connection. The oracle driver may take two optional parameters, The database name, and the character set. To connect with a database name of \"accounts\" and a charset of UTF-8 the following code should be used.\r\n<?php\r\ntry {\r\n    $dbh = new PDO(\"OCI:dbname=accounts;charset=UTF-8\", \"username\", \"password\");\r\n    }\r\ncatch (PDOException $e)\r\n    {     echo $e->getMessage();     } ?>\r\n# Connect to ODBC\r\n\r\n# There are many connections ODBC can create, here we show how to connect to a MS Access database named accounts. The specified path is c:\\\\accounts.mdb.\r\n<?php\r\ntry {\r\n    $dbh = new PDO(\"odbc:Driver={Microsoft Access Driver (*.mdb)};Dbq=C:\\accounts.mdb;Uid=Admin\");\r\n    }\r\ncatch (PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    } \r\n?>\r\n# Connect to DBLIB\r\n\r\n# Once again a Windows specific database, DBLIB can be used as follows\r\n<?php\r\ntry {\r\n    $hostname = \"localhost\";\r\n    $port     = 10060;\r\n    $dbname   = \"my_database\";\r\n    $username = \"username\";\r\n    $password = \"password\";\r\n\r\n    $dbh = new PDO (\"dblib:host=$hostname:$port;dbname=$dbname\",\"$username\",\"$password\");\r\n    }\r\ncatch (PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# Connect to IBM\r\n\r\n# This example shows connecting to an IBM DB2 database named accounts\r\n<?php\r\ntry {\r\n    $db = new PDO(\"ibm:DRIVER={IBM DB2 ODBC DRIVER};DATABASE=accounts; HOSTNAME=1.2.3,4;PORT=56789;PROTOCOL=TCPIP;\", \"username\", \"password\");\r\n    }\r\ncatch (PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# Close a Database Connection\r\n\r\n# Up to this point we have seen how to connect to a database using PDO. But of course, we also need to disconnect when we have finished. To close the connection the object needs to be destroyed so that no reference to it remains. This is normally done at the end of a script where PHP will automatically close the connection. However, the connection may be close implicitly by assigning the value of null to the object as seen below.\r\n<?php\r\n/*** mysql hostname ***/\r\n$hostname = 'localhost';\r\n\r\n/*** mysql username ***/\r\n$username = 'username';\r\n\r\n/*** mysql password ***/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=mysql\", $username, $password);\r\n    /*** echo a message saying we have connected ***/\r\n    echo 'Connected to database';\r\n\r\n    /*** close the database connection ***/\r\n    $dbh = null;\r\n    }\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# If the database connection fails, the code to assign a null value is never called as the exception throws control to the catch block.\r\n# PDO Query\r\n\r\n# Now that we can open and close a connection to the database with PDO, we can make use of it for what databases are made for, storing and retrieving information. The simplest form of query is the PDO query method. As the name suggests, this is used to perform database queries. Before we begin to query a database, lets create a small database with a table for animals. This will be a MySQL database for use throughout much of this tutorial. Remember, because PDO provides a common set of tools for databases, once we have the correct connection, the rest of the code is the same, regardless of the database you choose. When using PDO to query a database, the function used to do so depends on the statement you wish to send to the database. Below we will see three queries on how to INSERT, SELECT and UPDATE.\r\n# INSERT\r\n\r\nTo gather information from a database, we first need to put some info into it. We use the same code from above to connect and disconnect from the database and the INSERT query is accomplished using the PDO::exec method.\r\n<?php\r\n/*** mysql hostname ***/\r\n$hostname = 'localhost';\r\n\r\n/*** mysql username ***/\r\n$username = 'username';\r\n\r\n/*** mysql password ***/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    /*** echo a message saying we have connected ***/\r\n    echo 'Connected to database<br />';\r\n\r\n    /*** INSERT data ***/\r\n    $count = $dbh->exec(\"INSERT INTO animals(animal_type, animal_name) VALUES ('kiwi', 'troy')\");\r\n\r\n    /*** echo the number of affected rows ***/\r\n    echo $count;\r\n\r\n    /*** close the database connection ***/\r\n    $dbh = null;\r\n    }\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nThe output of the script above will look like this:\r\nConnected to database\r\n1\r\nThis shows us that we connected successfully to the database and then we have displayed the number of affected rows. PDO::exec returns the number of affected rows if successful, or zero (0) if no rows are affected. This may cause issues if you are checking for a boolean value and why it is recommended using === when to check for type also, as zero (0) may evaluate to boolean FALSE.\r\nThe PDO::exec method should be used for SQL statements that do not return a result set. We could use this same method to INSERT many more animals to our database, but a more effecient method would be to use a transaction. This is covered in the section on Transactions.\r\nSELECT\r\n\r\nUnlike PDO::exec the PDO::query method returns a result set, that is, a group of information from the database in the form of a PDOStatement object. Our database should look a little like the example in the What is PDO section. Using this we can SELECT information.\r\n<?php\r\n/*** mysql hostname ***/\r\n$hostname = 'localhost';\r\n\r\n/*** mysql username ***/\r\n$username = 'username';\r\n\r\n/*** mysql password ***/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    /*** echo a message saying we have connected ***/\r\n    echo 'Connected to database<br />';\r\n\r\n    /*** The SQL SELECT statement ***/\r\n    $sql = \"SELECT * FROM animals\";\r\n    foreach ($dbh->query($sql) as $row)\r\n        {\r\n        print $row['animal_type'] .' - '. $row['animal_name'] . '<br />';\r\n        }\r\n\r\n    /*** close the database connection ***/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nFrom the script above, we can expect the results to look like this:\r\nConnected to database\r\nemu - bruce\r\nfunnel web - bruce\r\nlizard - bruce\r\ndingo - bruce\r\nkangaroo - bruce\r\nwallaby - bruce\r\nwombat - bruce\r\nkoala - bruce\r\nkiwi - troy\r\nYou will have noticed that we can iterate over the result set directly with foreach. This is because internally the PDO statement implements the SPL traversble iterator, thus giving all the benifits of using SPL. For more on SPL refer to the Introduction to SPL page. The greatest benifit of this is that SPL iterators know only one element at a time and thus large result sets become manageable without hogging memory.\r\nUPDATE\r\n\r\nTo update a field in a database with PDO we once again use the PDO::exec method in the same manner as we did with the INSERT\r\n<?php\r\n\r\n/*** mysql hostname ***/\r\n$hostname = 'localhost';\r\n\r\n/*** mysql username ***/\r\n$username = 'username';\r\n\r\n/*** mysql password ***/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    /*** echo a message saying we have connected ***/\r\n    echo 'Connected to database<br />';\r\n\r\n    /*** INSERT data ***/\r\n    $count = $dbh->exec(\"UPDATE animals SET animal_name='bruce' WHERE animal_name='troy'\");\r\n\r\n    /*** echo the number of affected rows ***/\r\n    echo $count;\r\n\r\n    /*** close the database connection ***/\r\n    $dbh = null;\r\n    }\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nOnce again we see that the connection is made to the database and one row is affected as now the kiwi has become a true Australian like the rest of the creatures. PDO::exec should be used for all database queries where no result set is required.\r\nFETCH Modes\r\n\r\nThe section above showed how using PDO::query we can fetch information from the database. The PDO::query method returns a PDOStatement object that can be utilized in much the same was as mysql_fetch_object() or pg_fetch_object(). Of course there are times when an numerical index is needed or an associative index. PDO::query provides for this also by allowing the coder to set the fetch mode for via the PDOStatement object or via PDOStatement::setFetchMode().\r\nFETCH ASSOC\r\n\r\nTo fetch an associative array from our results the constant PDO::FETCH_ASSOC is used and returns the column names as indexes or keys of the resulting array.\r\n<?php\r\n/*** mysql hostname ***/\r\n$hostname = 'localhost';\r\n\r\n/*** mysql username ***/\r\n$username = 'username';\r\n\r\n/*** mysql password ***/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    /*** echo a message saying we have connected ***/\r\n    echo 'Connected to database<br />';\r\n\r\n    /*** The SQL SELECT statement ***/\r\n    $sql = \"SELECT * FROM animals\";\r\n\r\n    /*** fetch into an PDOStatement object ***/\r\n    $stmt = $dbh->query($sql);\r\n\r\n    /*** echo number of columns ***/\r\n    $result = $stmt->fetch(PDO::FETCH_ASSOC);\r\n\r\n    /*** loop over the object directly ***/\r\n    foreach($result as $key=>$val)\r\n    {\r\n    echo $key.' - '.$val.'<br />';\r\n    }\r\n\r\n    /*** close the database connection ***/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nThe above code will give a result like this:\r\nConnected to database\r\nanimal_id - 1\r\nanimal_type - emu\r\nanimal_name - bruce\r\nPDO has returned the results as a PDOStatement object that we can iterate over directly. The resulting indexes are the names of the fields within the animals database.\r\nFETCH NUM\r\n\r\nLike PDO::FETCH_ASSOC, the PDO::FETCH_NUM produces a numerical index of the result set rather than the field names.\r\n<?php\r\n/*** mysql hostname ***/\r\n$hostname = 'localhost';\r\n\r\n/*** mysql username ***/\r\n$username = 'username';\r\n\r\n/*** mysql password ***/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    /*** echo a message saying we have connected ***/\r\n    echo 'Connected to database<br />';\r\n\r\n    /*** The SQL SELECT statement ***/\r\n    $sql = \"SELECT * FROM animals\";\r\n\r\n    /*** fetch into an PDOStatement object ***/\r\n    $stmt = $dbh->query($sql);\r\n\r\n    /*** echo number of columns ***/\r\n    $result = $stmt->fetch(PDO::FETCH_NUM);\r\n\r\n    /*** loop over the object directly ***/\r\n    foreach($result as $key=>$val)\r\n    {\r\n    echo $key.' - '.$val.'<br />';\r\n    }\r\n\r\n    /*** close the database connection ***/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nThe above code will give a result like this:\r\nConnected to database\r\n0 - 1\r\n1 - emu\r\n2 - bruce\r\nAs you can see above the indexes are now numeric in the result set\r\nFETCH BOTH\r\n\r\nThere may be times you need to fetch both numerical and associative indexes. PDO::FETCH_BOTH produces a numerical and associative index of the result set so you can use either, or both.\r\n<?php\r\n/*** mysql hostname ***/\r\n$hostname = 'localhost';\r\n\r\n/*** mysql username ***/\r\n$username = 'username';\r\n\r\n/*** mysql password ***/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    /*** echo a message saying we have connected ***/\r\n    echo 'Connected to database<br />';\r\n\r\n    /*** The SQL SELECT statement ***/\r\n    $sql = \"SELECT * FROM animals\";\r\n\r\n    /*** fetch into an PDOStatement object ***/\r\n    $stmt = $dbh->query($sql);\r\n\r\n    /*** echo number of columns ***/\r\n    $result = $stmt->fetch(PDO::FETCH_BOTH);\r\n\r\n    /*** loop over the object directly ***/\r\n    foreach($result as $key=>$val)\r\n    {\r\n    echo $key.' - '.$val.'<br />';\r\n    }\r\n\r\n    /*** close the database connection ***/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nNow we see the results have included both indexes.\r\nConnected to database\r\nanimal_id - 1\r\n0 - 1\r\nanimal_type - emu\r\n1 - emu\r\nanimal_name - bruce\r\n2 - bruce\r\nFETCH OBJECT\r\n\r\nThis little gem takes the result set and returns it as an anonymous object or stdClass and maps the field names from the database as object properties with the values the values of stored in the database.\r\n<?php\r\n/*** mysql hostname ***/\r\n$hostname = 'localhost';\r\n\r\n/*** mysql username ***/\r\n$username = 'username';\r\n\r\n/*** mysql password ***/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    /*** echo a message saying we have connected ***/\r\n    echo 'Connected to database<br />';\r\n\r\n    /*** The SQL SELECT statement ***/\r\n    $sql = \"SELECT * FROM animals\";\r\n\r\n    /*** fetch into an PDOStatement object ***/\r\n    $stmt = $dbh->query($sql);\r\n\r\n    /*** echo number of columns ***/\r\n    $obj = $stmt->fetch(PDO::FETCH_OBJ);\r\n\r\n    /*** loop over the object directly ***/\r\n    echo $obj->animal_id.'<br />';\r\n    echo $obj->animal_type.'<br />';\r\n    echo $obj->animal_name;\r\n\r\n    /*** close the database connection ***/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nThe above code gives the results like this:\r\nConnected to database\r\n1\r\nemu\r\nbruce\r\nThe use of the field names as class properties makes integrating results into an Object Oriented envioronment simple.\r\nFETCH LAZY\r\n\r\nPDO::FETCH_LAZY is odd as it combines PDO::FETCH_BOTH and PDO::FETCH_OBJ. I am unsure why you would want to do this, but it must have been important enough for somebody to create it. The code below is that of PDO::FETCH_BOTH and is reproduced here for examples sake.\r\n<?php\r\n/*** mysql hostname ***/\r\n$hostname = 'localhost';\r\n\r\n/*** mysql username ***/\r\n$username = 'username';\r\n\r\n/*** mysql password ***/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    /*** echo a message saying we have connected ***/\r\n    echo 'Connected to database<br />';\r\n\r\n    /*** The SQL SELECT statement ***/\r\n    $sql = \"SELECT * FROM animals\";\r\n\r\n    /*** fetch into an PDOStatement object ***/\r\n    $stmt = $dbh->query($sql);\r\n\r\n    /*** echo number of columns ***/\r\n    $result = $stmt->fetch(PDO::FETCH_BOTH);\r\n\r\n    /*** loop over the object directly ***/\r\n    foreach($result as $key=>$val)\r\n    {\r\n    echo $key.' - '.$val.'<br />';\r\n    }\r\n\r\n    /*** close the database connection ***/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nThe above code will give a result the same as that of PDO::FETCH_BOTH. Genius!\r\nFETCH CLASS\r\n\r\nPDO::FETCH_CLASS instantiates a new instance of the specified class. The field names are mapped to properties (variables) within the class called. This saves quite a bit of code and speed is enhanced as the mappings are dealt with internally.\r\n<?php\r\nclass animals{\r\n\r\npublic $animal_id;\r\n\r\npublic $animal_type;\r\n\r\npublic $animal_name;\r\n\r\n/***\r\n *\r\n * @capitalize first words\r\n *\r\n * @access public\r\n *\r\n * @return string\r\n *\r\n */\r\npublic function capitalizeType(){\r\n return ucwords($this->animal_type);\r\n}\r\n\r\n} /*** end of class ***/\r\n\r\n/*** mysql hostname ***/\r\n$hostname = 'localhost';\r\n\r\n/*** mysql username ***/\r\n$username = 'username';\r\n\r\n/*** mysql password ***/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    /*** echo a message saying we have connected ***/\r\n    echo 'Connected to database<br />';\r\n\r\n    /*** The SQL SELECT statement ***/\r\n    $sql = \"SELECT * FROM animals\";\r\n\r\n    /*** fetch into an PDOStatement object ***/\r\n    $stmt = $dbh->query($sql);\r\n\r\n    /*** fetch into the animals class ***/\r\n    $obj = $stmt->fetchALL(PDO::FETCH_CLASS, 'animals');\r\n\r\n    /*** loop of the object directly ***/\r\n    foreach($obj as $animals)\r\n        {\r\n        /*** call the capitalizeType method ***/\r\n        echo $animals->capitalizeType().'<br />';\r\n        } \r\n    /*** close the database connection ***/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nThe code above produces a list of animal types, with the first letter capitalized like this:\r\nConnected to database\r\nEmu\r\nFunnel Web\r\nLizard\r\nDingo\r\nKangaroo\r\nWallaby\r\nWombat\r\nKoala\r\nKiwi\r\nThe PDO::FETCH_CLASS constant has fetched the results directly into the animals class where we were able to directly manipulate the results, nifty.\r\nPDO provides an alternative to PDO::fetch and PDO::FETCH_CLASS. PDOStatement::fetchObject() will bundle them together to give the same result as shown here.\r\n<?php\r\nclass animals{\r\n\r\npublic $animal_id;\r\n\r\npublic $animal_type;\r\n\r\npublic $animal_name;\r\n\r\n/***\r\n *\r\n * @capitalize first words\r\n *\r\n * @access public\r\n *\r\n * @return string\r\n *\r\n */\r\npublic function capitalizeType(){\r\n return ucwords($this->animal_type);\r\n}\r\n\r\n} /*** end of class ***/\r\n\r\n/*** mysql hostname ***/\r\n$hostname = 'localhost';\r\n\r\n/*** mysql username ***/\r\n$username = 'username';\r\n\r\n/*** mysql password ***/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    /*** echo a message saying we have connected ***/\r\n    echo 'Connected to database<br />';\r\n\r\n    /*** The SQL SELECT statement ***/\r\n    $sql = \"SELECT * FROM animals\";\r\n\r\n    /*** fetch into an PDOStatement object ***/\r\n    $stmt = $dbh->query($sql);\r\n\r\n    /*** fetch into the animals class ***/\r\n    $animals = $stmt->fetchObject('animals');\r\n\r\n    /*** echo the class properties ***/\r\n    echo $animals->animal_id.'<br />';\r\n    echo $animals->capitalizeType().'<br />';\r\n    echo $animals->animal_name;\r\n\r\n    /*** close the database connection ***/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nThe above code gives the results like this:\r\nConnected to database\r\n1\r\nEmu\r\nbruce\r\nNote that we have called the animals::capitalizeType() method to show that we are in fact working with an instance of the animals class. PDO::fetchObject() will also work as a substitute for PDO::FETCH_OBJ.\r\nFETCH INTO\r\n\r\nThe PDO::FETCH_INTO constant allows us to fetch the data into an existing instance of a class. Like PDO::FETCH_CLASS the field names are mapped to the class properties. With this in mind, we should be able to replicate the behaviour of PDO::FETCH_CLASS by instantiating the new object when setting the fetch mode. In this instance, the fetch mode is set using PDO::setFetchMode() method.\r\n<?php\r\nclass animals{\r\n\r\npublic $animal_id;\r\n\r\npublic $animal_type;\r\n\r\npublic $animal_name;\r\n\r\n\r\npublic function capitalizeType(){\r\n return ucwords($this->animal_type);\r\n}\r\n\r\n} /*** end of class ***/\r\n\r\n/*** instantiate a new animals instance ***/\r\n$animals = new animals;\r\n\r\n$animals->animal_id = 10;\r\n\r\n$animals->animal_type = 'crocodile';\r\n\r\n$animals->animal_name = 'bruce';\r\n\r\n/*** mysql hostname ***/\r\n$hostname = 'localhost';\r\n\r\n/*** mysql username ***/\r\n$username = 'username';\r\n\r\n/*** mysql password ***/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    /*** echo a message saying we have connected ***/\r\n    echo 'Connected to database<br />';\r\n\r\n    /*** The SQL SELECT statement ***/\r\n    $sql = \"SELECT * FROM animals\";\r\n\r\n    /*** fetch into an PDOStatement object ***/\r\n    $stmt = $dbh->query($sql);\r\n\r\n    /*** set the fetch mode with PDO::setFetchMode() ***/\r\n    $stmt->setFetchMode(PDO::FETCH_INTO, new animals);\r\n\r\n    /*** loop over the PDOStatement directly ***/\r\n    foreach($stmt as $animals)\r\n    {\r\n    echo $animals->capitalizeType().'<br />';\r\n    } \r\n    /*** close the database connection ***/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nOnce again, the above code produces a list of animal types, with the first letter capitalized like this:\r\nConnected to database\r\nEmu\r\nFunnel Web\r\nLizard\r\nDingo\r\nKangaroo\r\nWallaby\r\nWombat\r\nKoala\r\nKiwi\r\nError Handling\r\n\r\nPDO error handling is comes in several flavours. Previously in this tutorial we have have only used the simplest of try{} catch(){} blocks to catch an error in the database connection, but what of other errors? perhaps a field name does not exist? Lets see how we go with a simple error with the previous code.\r\n<?php\r\n/*** mysql hostname ***/\r\n$hostname = 'localhost';\r\n\r\n/*** mysql username ***/\r\n$username = 'username';\r\n\r\n/*** mysql password ***/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    /*** echo a message saying we have connected ***/\r\n    echo 'Connected to database<br />';\r\n\r\n    /*** The SQL SELECT statement with incorrect fieldname ***/\r\n    $sql = \"SELECT username FROM animals\";\r\n\r\n    foreach ($dbh->query($sql) as $row)\r\n        {\r\n        print $row['animal_type'] .' - '. $row['animal_name'] . '<br />';\r\n        }\r\n\r\n    /*** close the database connection ***/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nThe above script will produce an error such as this:\r\nConnected to database\r\n\r\nWarning: Invalid argument supplied for foreach() in /www/pdo.php on line 18\r\nThis is because there is no error handling. The SELECT statement has a field name 'username' which does not exist and an error is generated by the database. The only default error handling is done with the initial connection. Unless we deal with the error, we have a problem with displaying full path to the world. To deal with this we need to set an attribute to the type of error handling we wish to utilize. The types of error handling are\r\nException\r\nWarning\r\nSilent\r\nLets begin with exception as we have the try{} catch(){} blocks in place already.\r\n<?php\r\n/*** mysql hostname ***/\r\n$hostname = 'localhost';\r\n\r\n/*** mysql username ***/\r\n$username = 'username';\r\n\r\n/*** mysql password ***/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    /*** echo a message saying we have connected ***/\r\n    echo 'Connected to database<br />';\r\n\r\n    /*** set the error reporting attribute ***/\r\n    $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\r\n\r\n    /*** The SQL SELECT statement ***/\r\n    $sql = \"SELECT username FROM animals\";\r\n    foreach ($dbh->query($sql) as $row)\r\n        {\r\n        print $row['animal_type'] .' - '. $row['animal_name'] . '<br />';\r\n        }\r\n\r\n    /*** close the database connection ***/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nNow with the error mode set to Exception the error generated looks like this:\r\nConnected to database\r\nSQLSTATE[42S22]: Column not found: 1054 Unknown column 'username' in 'field list'\r\nNormally we would not show this type of error to the end user, and the exception would be handled perhaps with message saying No Results Found or something vague, but this does show how we can set the error mode as we wish. To set the error mode to Warning should look easy from here.\r\n<?php\r\n/*** mysql hostname ***/\r\n$hostname = 'localhost';\r\n\r\n/*** mysql username ***/\r\n$username = 'username';\r\n\r\n/*** mysql password ***/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    /*** echo a message saying we have connected ***/\r\n    echo 'Connected to database<br />';\r\n\r\n    /*** set the error reporting attribute ***/\r\n    $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_WARNING);\r\n\r\n    /*** The SQL SELECT statement ***/\r\n    $sql = \"SELECT username FROM animals\";\r\n    foreach ($dbh->query($sql) as $row)\r\n        {\r\n        print $row['animal_type'] .' - '. $row['animal_name'] . '<br />';\r\n        }\r\n\r\n    /*** close the database connection ***/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nNow a different error is displayed.\r\nConnected to database\r\n\r\nWarning: PDO::query() [function.PDO-query]: SQLSTATE[42S22]: Column not found: 1054 Unknown column 'username' in 'field list' in /www/pdo.php on line 21\r\n\r\nWarning: Invalid argument supplied for foreach() in /www/pdo.php on line 21\r\nHere and E_WARNING has been generated and if display_errors is on the error would be seen by an end user. It is hoped that if you are in a production environment this is not the case.\r\nLastly, there is the Silent mode. As the name suggests, this mode silences the errors so no output is sent from the error. However, it does not stop the code at the point of error and any further errors are still sent.\r\n<?php\r\n/*** mysql hostname ***/\r\n$hostname = 'localhost';\r\n\r\n/*** mysql username ***/\r\n$username = 'username';\r\n\r\n/*** mysql password ***/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    /*** echo a message saying we have connected ***/\r\n    echo 'Connected to database<br />';\r\n\r\n    /*** set the error reporting attribute ***/\r\n    $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_SILENT);\r\n\r\n    /*** The SQL SELECT statement ***/\r\n    $sql = \"SELECT username FROM animals\";\r\n    foreach ($dbh->query($sql) as $row)\r\n        {\r\n        print $row['animal_type'] .' - '. $row['animal_name'] . '<br />';\r\n        }\r\n\r\n    /*** close the database connection ***/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nNow we see the script above produces the following output.\r\nConnected to database\r\n\r\nWarning: Invalid argument supplied for foreach() in /www/pdo.php on line 21\r\nAs you can see, the error has been silenced, but the following error has not been attended to, and would need further checks to ensure the value passed to the foreach is a valid arguement.\r\nAs we saw with the exception code, the SQLSTATE code was part of the error message. This error code is also available with the PDO::errorCode() method.\r\n<?php\r\n/*** mysql hostname ***/\r\n$hostname = 'localhost';\r\n\r\n/*** mysql username ***/\r\n$username = 'username';\r\n\r\n/*** mysql password ***/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    /*** echo a message saying we have connected ***/\r\n    echo 'Connected to database<br />';\r\n    }\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n\r\n/*** an invalide fieldname ***/\r\n$sql = \"SELECT username FROM animals\";\r\n\r\n/*** run the query ***/\r\n$result = $dbh->query($sql);\r\n\r\n/*** show the error code ***/\r\necho $dbh->errorCode();\r\n?>\r\nThe code above shows the error code relevant to the SQLSTATE. This is a five character string as defined by the ANSI SQL standard.\r\nConnected to database\r\n42S22\r\nFurther information about an error may be gained from the PDO::errorInfo() method. This returns an array containing the SQLSTATE, the error code, and the error message.\r\n<?php\r\n/*** mysql hostname ***/\r\n$hostname = 'localhost';\r\n\r\n/*** mysql username ***/\r\n$username = 'username';\r\n\r\n/*** mysql password ***/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    /*** echo a message saying we have connected ***/\r\n    echo 'Connected to database<br />';\r\n    }\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n/*** an invalid table name ***/\r\n$sql = \"SELECT animal_id FROM users\";\r\n\r\n/*** run the query ***/\r\n$result = $dbh->query($sql);\r\n\r\n/*** show the error info ***/\r\nforeach($dbh->errorInfo() as $error)\r\n    {\r\n    echo $error.'<br />';\r\n    }\r\n?>\r\nWith this code, the error information looks like this:\r\nConnected to database\r\n42S02\r\n1146\r\nTable 'animals.users' doesn't exist\r\nIf there is no error, the SQLSTATE will be the only value shown, with a value of 00000.\r\nPrepared statements\r\n\r\nWhat is a prepared statement? A prepared statement is a pre-compiled SQL statement that accepts zero or more named parameters. Ok, so thats my attempt at describing what it is, if you have a better description, let us know.\r\nThe SQL is prepared for execution. This is especially useful when using the same statement or query multiple times with different parameters, or field values. The boost in speed is hidden from userland code as the PDO driver allows client and server side caching of the query and meta data. It also helps prevent SQL injection by calling the PDO::quote() method internally.\r\nPDO accepts two kinds of parameter markers.\r\nnamed - :name\r\nquestion mark - ?\r\nYou must choose one or the other, they cannot be mixed.\r\nLets dive in and have a look at how PDO::prepare and PDOStatement::execute work together.\r\n<?php\r\n/*** mysql hostname ***/\r\n$hostname = 'localhost';\r\n\r\n/*** mysql username ***/\r\n$username = 'username';\r\n\r\n/*** mysql password ***/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    /*** echo a message saying we have connected ***/\r\n    echo 'Connected to database<br />';\r\n\r\n    /*** set the error reporting attribute ***/\r\n    $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\r\n\r\n    /*** some variables ***/\r\n    $animal_id = 6;\r\n\r\n    $animal_name = 'bruce';\r\n\r\n    /*** prepare the SQL statement ***/\r\n    $stmt = $dbh->prepare(\"SELECT * FROM animals WHERE animal_id = :animal_id AND animal_name = :animal_name\");\r\n\r\n    /*** bind the paramaters ***/\r\n    $stmt->bindParam(':animal_id', $animal_id, PDO::PARAM_INT);\r\n    $stmt->bindParam(':animal_name', $animal_name, PDO::PARAM_STR, 5);\r\n\r\n    /*** execute the prepared statement ***/\r\n    $stmt->execute();\r\n\r\n    /*** fetch the results ***/\r\n    $result = $stmt->fetchAll();\r\n\r\n    /*** loop of the results ***/\r\n    foreach($result as $row)\r\n        {\r\n        echo $row['animal_id'].'<br />';\r\n        echo $row['animal_type'].'<br />';\r\n        echo $row['animal_name'];\r\n        }\r\n\r\n    /*** close the database connection ***/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\nThe above code will produce the following:\r\nConnected to database\r\n6\r\nwallaby\r\nbruce\r\nErrr, what was that?\r\nWhat is this name = :variable business\r\nWhat we have done is bind the variable named $animal_id and $animal_name to the statement. Remember this as many find it difficult to grasp. You are not binding the value of the variable, you are binding the variable itself. Lets change the value of the animal_id after the variable is bound and see what happens..\r\n<?php\r\n/*** mysql hostname ***/\r\n$hostname = 'localhost';\r\n\r\n/*** mysql username ***/\r\n$username = 'username';\r\n\r\n/*** mysql password ***/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    /*** echo a message saying we have connected ***/\r\n    echo 'Connected to database<br />';\r\n\r\n    /*** set the error reporting attribute ***/\r\n    $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\r\n\r\n    /*** some variables ***/\r\n    $animal_id = 6;\r\n\r\n    $animal_name = 'bruce';\r\n\r\n    /*** prepare the SQL statement ***/\r\n    $stmt = $dbh->prepare(\"SELECT * FROM animals WHERE animal_id = :animal_id AND animal_name = :animal_name\");\r\n\r\n    /*** bind the paramaters ***/\r\n    $stmt->bindParam(':animal_id', $animal_id, PDO::PARAM_INT);\r\n    $stmt->bindParam(':animal_name', $animal_name, PDO::PARAM_STR, 5);\r\n\r\n    /*** reassign the animal_id ***/\r\n    $animal_id = 3;\r\n\r\n    /*** execute the prepared statement ***/\r\n    $stmt->execute();\r\n\r\n    /*** loop over the results ***/\r\n    while($row = $stmt->fetch())\r\n        {\r\n        echo $row['animal_id'].'<br />';\r\n        echo $row['animal_type'].'<br />';\r\n        echo $row['animal_name'];\r\n        }\r\n\r\n    /*** close the database connection ***/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# Now see the results have changed\r\n# Connected to database\r\n# 3\r\n# lizard\r\n# bruce\r\n# Because we have bound the variable $animal_id to the $stmt object any change to the value of that varible will be reflected in the statement. This format can be used for both SELECT and INSERT statements. But this is a bit cumbersome for a single query and the above PDO query could have done the job equally as well, so lets run the query multiple times. Ssimply by changing the animal_id and animal_name variables we can run the query over and over without re-writing as it is already 'prepared'.\r\n<?php\r\n/*** mysql hostname ***/\r\n$hostname = 'localhost';\r\n\r\n/*** mysql username ***/\r\n$username = 'username';\r\n\r\n/*** mysql password ***/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    /*** echo a message saying we have connected ***/\r\n    echo 'Connected to database<br />';\r\n\r\n    /*** set the error reporting attribute ***/\r\n    $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\r\n\r\n    /*** some variables ***/\r\n    $animal_id = 6;\r\n    $animal_name = 'bruce';\r\n\r\n    /*** prepare the SQL statement ***/\r\n    $stmt = $dbh->prepare(\"SELECT * FROM animals WHERE animal_id = :animal_id AND animal_name = :animal_name\");\r\n\r\n    /*** bind the paramaters ***/\r\n    $stmt->bindParam(':animal_id', $animal_id, PDO::PARAM_INT);\r\n    $stmt->bindParam(':animal_name', $animal_name, PDO::PARAM_STR, 5);\r\n\r\n    /*** reassign the animal_id ***/\r\n    $animal_id = 3;\r\n    $animal_name = 'kevin';\r\n\r\n    /*** execute the prepared statement ***/\r\n    $stmt->execute();\r\n\r\n    /*** loop over the results ***/\r\n    while($row = $stmt->fetch())\r\n        {\r\n        echo $row['animal_id'].'<br />';\r\n        echo $row['animal_type'].'<br />';\r\n        echo $row['animal_name'].'<br />';\r\n        }\r\n\r\n    /*** reassign the animal_id ***/\r\n    $animal_id = 7;\r\n    $animal_name = 'bruce';\r\n\r\n    /*** execute the prepared statement ***/\r\n    $stmt->execute();\r\n\r\n    /*** loop over the results ***/\r\n    while($row = $stmt->fetch())\r\n        {\r\n        echo $row['animal_id'].'<br />';\r\n        echo $row['animal_type'].'<br />';\r\n        echo $row['animal_name'].'<br />';\r\n        }\r\n\r\n    /*** reassign the animal_id ***/\r\n    $animal_id = 4;\r\n    /*** execute the prepared statement ***/\r\n    $stmt->execute();\r\n\r\n    /*** loop over the results ***/\r\n    while($row = $stmt->fetch())\r\n        {\r\n        echo $row['animal_id'].'<br />';\r\n        echo $row['animal_type'].'<br />';\r\n        echo $row['animal_name'];\r\n        }\r\n\r\n    /*** close the database connection ***/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# Now we have run the query 3 times using the same prepared statement. The results look like this:\r\n# Connected to database\r\n# 7\r\n# wombat\r\n# bruce\r\n# 4\r\n# dingo\r\n# bruce\r\n# The second result set is missing as there is no animal named \\'kevin\\', all Australians are named \\'bruce\\'. Note also in the above code we have changed the loop from foreach and PDOStatement::fetchAll() to a while loop using PDOStatement::fetch()As has been mentioned we can run this over and over, but while it is shorter than coding the query over and over, we can also use an array of values!\r\n<?php\r\n/*** mysql hostname ***/\r\n$hostname = 'localhost';\r\n\r\n/*** mysql username ***/\r\n$username = 'username';\r\n\r\n/*** mysql password ***/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    /*** echo a message saying we have connected ***/\r\n    echo 'Connected to database<br />';\r\n\r\n    /*** set the error reporting attribute ***/\r\n    $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\r\n\r\n    /*** some variables ***/\r\n    $data = array('animal_id'=>6, 'animal_name'=>'bruce');\r\n\r\n    /*** prepare the SQL statement ***/\r\n    $stmt = $dbh->prepare(\"SELECT * FROM animals WHERE animal_id = :animal_id AND animal_name = :animal_name\");\r\n\r\n    /*** bind the paramaters ***/\r\n    $stmt->bindParam(':animal_id', $animal_id, PDO::PARAM_INT);\r\n    $stmt->bindParam(':animal_name', $animal_name, PDO::PARAM_STR, 5);\r\n\r\n    /*** reassign the variables ***/\r\n    $data = array('animal_id'=>3, 'animal_name' => 'bruce');\r\n\r\n    /*** execute the prepared statement ***/\r\n    $stmt->execute($data);\r\n\r\n    /*** loop over the results ***/\r\n    while($row = $stmt->fetch())\r\n        {\r\n        echo $row['animal_id'].'<br />';\r\n        echo $row['animal_type'].'<br />';\r\n        echo $row['animal_name'].'<br />';\r\n        }\r\n\r\n    /*** reassign the variables again ***/\r\n    $data = array('animal_id'=>4, 'animal_name' => 'bruce');\r\n\r\n    /*** execute the prepared statement ***/\r\n    $stmt->execute($data);\r\n\r\n    /*** loop over the results ***/\r\n    while($row = $stmt->fetch())\r\n        {\r\n        echo $row['animal_id'].'<br />';\r\n        echo $row['animal_type'].'<br />';\r\n        echo $row['animal_name'].'<br />';\r\n        }\r\n\r\n    /*** reassign the variables ***/\r\n    $data = array('animal_id'=>9, 'animal_name' => 'bruce');\r\n\r\n    /*** execute the prepared statement ***/\r\n    $stmt->execute($data);\r\n\r\n    /*** loop over the results ***/\r\n    while($row = $stmt->fetch())\r\n        {\r\n        echo $row['animal_id'].'<br />';\r\n        echo $row['animal_type'].'<br />';\r\n        echo $row['animal_name'];\r\n        }\r\n\r\n\r\n    /*** close the database connection ***/\r\n    $dbh = null;\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# Transactions\r\n\r\n# At the beginning of this tutorial was saw multiple INSERT statements to set up the initial database. This works fine but is code intensive and with a database like SQLite a problem arises with file locking for each access. The process can be bundled into a single access by using a transaction. Transactions are quite simple and have the benifit of rolling back changes should an error occur, perhaps a system crash.\r\n# A PDO transaction begins with the with PDO::beginTransaction() method. This method turns off auto-commit and any database statements or queries are not committed to the database until the transaction is committed with PDO::commit. When PDO::commit is called, all statements/queries are enacted and the database connection is returned to auto-commit mode.\r\n# This example shows how we might set up the animals database used in this tutorial.\r\n<?php\r\n/*** mysql hostname ***/\r\n$hostname = 'localhost';\r\n\r\n/*** mysql username ***/\r\n$username = 'username';\r\n\r\n/*** mysql password ***/\r\n$password = 'password';\r\n\r\n/*** database name ***/\r\n$dbname = 'animals';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=$dbname\", $username, $password);\r\n    /*** echo a message saying we have connected ***/\r\n    echo 'Connected to database<br />';\r\n\r\n    /*** set the PDO error mode to exception ***/\r\n    $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\r\n    /*** begin the transaction ***/\r\n    $dbh->beginTransaction();\r\n\r\n    /*** CREATE table statements ***/\r\n    $table = \"CREATE TABLE animals ( animal_id MEDIUMINT(8) NOT NULL AUTO_INCREMENT PRIMARY KEY,\r\n    animal_type VARCHAR(25) NOT NULL,\r\n    animal_name VARCHAR(25) NOT NULL \r\n    )\";\r\n    $dbh->exec($table);\r\n    /***  INSERT statements ***/\r\n    $dbh->exec(\"INSERT INTO animals (animal_type, animal_name) VALUES ('emu', 'bruce')\");\r\n    $dbh->exec(\"INSERT INTO animals (animal_type, animal_name) VALUES ('funnel web', 'bruce')\");\r\n    $dbh->exec(\"INSERT INTO animals (animal_type, animal_name) VALUES ('lizard', 'bruce')\");\r\n    $dbh->exec(\"INSERT INTO animals (animal_type, animal_name) VALUES ('dingo', 'bruce')\");\r\n    $dbh->exec(\"INSERT INTO animals (animal_type, animal_name) VALUES ('kangaroo', 'bruce')\");\r\n    $dbh->exec(\"INSERT INTO animals (animal_type, animal_name) VALUES ('wallaby', 'bruce')\");\r\n    $dbh->exec(\"INSERT INTO animals (animal_type, animal_name) VALUES ('wombat', 'bruce')\");\r\n    $dbh->exec(\"INSERT INTO animals (animal_type, animal_name) VALUES ('koala', 'bruce')\");\r\n    $dbh->exec(\"INSERT INTO animals (animal_type, animal_name) VALUES ('kiwi', 'bruce')\");\r\n\r\n    /*** commit the transaction ***/\r\n    $dbh->commit();\r\n\r\n    /*** echo a message to say the database was created ***/\r\n    echo 'Data entered successfully<br />';\r\n}\r\ncatch(PDOException $e)\r\n    {\r\n    /*** roll back the transaction if we fail ***/\r\n    $dbh->rollback();\r\n\r\n    /*** echo the sql statement and error message ***/\r\n    echo $sql . '<br />' . $e->getMessage();\r\n    }\r\n?>\r\n# Get Last Insert Id\r\n\r\n# This is a common task required when you need to get the id of the last INSERT. This is done with PDO::lastInserId() method as shown here.\r\n\r\n<?php\r\n/*** mysql hostname ***/\r\n$hostname = 'localhost';\r\n\r\n/*** mysql username ***/\r\n$username = 'username';\r\n\r\n/*** mysql password ***/\r\n$password = 'password';\r\n\r\ntry {\r\n    $dbh = new PDO(\"mysql:host=$hostname;dbname=animals\", $username, $password);\r\n    /*** echo a message saying we have connected ***/\r\n    echo 'Connected to database<br />';\r\n\r\n    /*** set the error reporting attribute ***/\r\n    $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\r\n\r\n    /*** INSERT a new row ***/\r\n    $dbh->exec(\"INSERT INTO animals(animal_type, animal_name) VALUES ('galah', 'polly')\");\r\n\r\n    /*** display the id of the last INSERT ***/\r\n    echo $dbh->lastInsertId();\r\n\r\n    /*** close the database connection ***/\r\n    $dbh = null;\r\n    }\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# A Global Instance\r\n\r\n# Ever need a global instance of your database connection? Here we achieve this with the use of the Singleton design patern. The goal of a singleton is to ensure the class has only a single instance and provide a global point of access to it. Here we use the getInstance() method to achieve this. A new instance is only created the first time it is accessed and all subsequent accesses are simply returned the existing instance.\r\n\r\n<?php\r\nclass db{\r\n\r\n/*** Declare instance ***/\r\nprivate static $instance = NULL;\r\n\r\n/**\r\n*\r\n* the constructor is set to private so\r\n* so nobody can create a new instance using new\r\n*\r\n*/\r\nprivate function __construct() {\r\n  /*** maybe set the db name here later ***/\r\n}\r\n\r\n/**\r\n*\r\n* Return DB instance or create intitial connection\r\n*\r\n* @return object (PDO)\r\n*\r\n* @access public\r\n*\r\n*/\r\npublic static function getInstance() {\r\n\r\nif (!self::$instance)\r\n    {\r\n    self::$instance = new PDO(\"mysql:host='localhost';dbname='animals'\", 'username', 'password');;\r\n    self::$instance-> setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\r\n    }\r\nreturn self::$instance;\r\n}\r\n\r\n/**\r\n*\r\n* Like the constructor, we make __clone private\r\n* so nobody can clone the instance\r\n*\r\n*/\r\nprivate function __clone(){\r\n}\r\n\r\n} /*** end of class ***/\r\n\r\ntry    {\r\n    /*** query the database ***/\r\n    $result = DB::getInstance()->query(\"SELECT * FROM animals\");\r\n\r\n    /*** loop over the results ***/\r\n    foreach($result as $row)\r\n        {\r\n        print $row['animal_type'] .' - '. $row['animal_name'] . '<br />';\r\n        }\r\n    }\r\ncatch(PDOException $e)\r\n    {\r\n    echo $e->getMessage();\r\n    }\r\n?>\r\n# The above code will produce a result like this:\r\n# emu - bruce\r\n# funnel web - bruce\r\n# lizard - bruce\r\n# dingo - bruce\r\n# kangaroo - bruce\r\n# wallaby - bruce\r\n# wombat - bruce\r\n# koala - bruce\r\n# This method of access saves the overhead created when a new instance of an object is called each time it is referenced, so you have have few references to it. Also, if you wish to pass the objects state from one reference to another there is no need to create from the initial state.\r\n# Note that the constructor and clone methods have been made private to ensure that an instance of the class cannot be instantiated or cloned.\r\n# Conclusions.\r\n# \r\n# If you have got this far you will have seen how to create a connection, prepare a statement and exceute, and to bind Params using bindParam(). This is what most folks will be using to begin with and shows the effectiveness of using PDO to make code more portable. We highly recommend you visit http://www.php.net/manual/en/ref.pdo.php and read up on all that PDO has to offer.\r\n","created_at":"2013-03-19 11:58:22 +0000","updated_at":"2013-03-19 11:58:22 +0000","private":0,"tags":"N;"},{"id":64,"category_id":5,"user_id":6,"title":"Custom Scrollbars with WebKit browsers","description":"Custom Scrollbars with WebKit browsers","content":"::-webkit-scrollbar              { /* 1 */ }\r\n::-webkit-scrollbar-button       { /* 2 */ }\r\n::-webkit-scrollbar-track        { /* 3 */ }\r\n::-webkit-scrollbar-track-piece  { /* 4 */ }\r\n::-webkit-scrollbar-thumb        { /* 5 */ }\r\n::-webkit-scrollbar-corner       { /* 6 */ }\r\n::-webkit-resizer                { /* 7 */ }","created_at":"2013-03-20 07:36:42 +0000","updated_at":"2013-03-20 07:36:42 +0000","private":0,"tags":"s:16:\"webkit,scrollbar\";"},{"id":65,"category_id":2,"user_id":6,"title":"Minimal Express framework App","description":"Minimal Express framework App","content":"var express = require('express');\r\n\r\nvar app = express.createServer(express.logger());\r\n\r\napp.get('/', function(request, response) {\r\n  response.send('Hello World!');\r\n});\r\n\r\nvar port = process.env.PORT || 5000;\r\napp.listen(port, function() {\r\n  console.log(\"Listening on \" + port);\r\n});","created_at":"2013-03-20 07:39:06 +0000","updated_at":"2013-03-20 07:39:06 +0000","private":0,"tags":"s:17:\"javascript,nodejs\";"},{"id":66,"category_id":29,"user_id":6,"title":"GITHUB SERVICE HOOKS","description":"GITHUB SERVICE HOOKS","content":"AVAILABLE SERVICE HOOKS\r\nWebHook URLs (0)\r\nActiveCollab\r\nAcunote\r\nAgileBench\r\nAgileZen\r\nAmazonSNS\r\nApoio\r\nAppHarbor\r\nAsana\r\nBacklog\r\nBamboo\r\nBasecampClassic\r\nBasecamp\r\nBoxcar\r\nbuddycloud (GitHub plugin)\r\nBugHerd\r\nBugly\r\nBugzilla\r\nCampfire\r\nCIA\r\nCodeClimate\r\nCodePorting-C#2Java\r\nCodeship\r\nCoffeeDoc.info\r\nConductor\r\nCo-Op\r\nCopperEgg\r\nCube\r\nDepending\r\nDeployHq\r\nDucksboard\r\nEmail\r\nFirebase\r\nFisheye\r\nFlowdock\r\nFogBugz\r\nFreckle\r\nFriendFeed\r\nGemini\r\nGemnasium\r\ngeocommit\r\nGetLocalization\r\ngitlive\r\nGrmble\r\nGroupTalent\r\nGrove\r\nHabitualist\r\nHall\r\nHarvest\r\nHipChat\r\nHostedgraphite\r\nHubcap\r\nNodeCI\r\nHumbug\r\nIceScrum\r\nIRC\r\nIrker\r\nIronMQ\r\nJabber\r\nJaconda\r\nJenkins (GitHub plugin)\r\nJenkins (Git plugin)\r\nJira\r\njQuery Plugins\r\nKanbanery\r\nKickoff\r\nLean-To\r\nLighthouse\r\nLingohub\r\nLoggly\r\nMantisBT\r\nMasterbranch\r\nMQTT publish\r\nNotify My Android\r\nNodejitsu\r\nNotifo\r\nOnTime\r\nPachube\r\nPackagist\r\nPivotalTracker\r\nPlanbox\r\nPlanio\r\nPresently\r\nProwl\r\nPuppetLinter\r\nPushover\r\nPythonPackages\r\nRailsbp\r\nRailsBrakeman\r\nRally\r\nRapidPush\r\nRationalTeamConcert\r\nRdocinfo\r\nReadTheDocs\r\nRedmine\r\nRubyforge\r\nScrumDo\r\nShiningPanda\r\nSlatebox\r\nSnowyEvening\r\nSocialcast\r\nSoftLayerMessaging\r\nSourcemint\r\nSplendidBacon\r\nSprintly\r\nSqsQueue\r\nStackmob\r\nStatusNet\r\nTalker\r\nTargetProcess\r\nTeamCity\r\nTender\r\nTenxer\r\nTestPilot\r\nToggl\r\nTrac\r\nTrajectory\r\nTravis\r\nTrello\r\nTwilio\r\nTwitter\r\nUnfuddle\r\nWeblate\r\nWebTranslateIt\r\nYammer\r\nYouTrack\r\nZendesk\r\nZohoProjects","created_at":"2013-03-24 08:28:10 +0000","updated_at":"2013-03-24 08:28:10 +0000","private":0,"tags":"N;"},{"id":67,"category_id":31,"user_id":6,"title":"VIM : find - replace","description":"VIM : find - replace","content":"\r\n####Jumping to previously visited locations\r\n\r\nPress Ctrl-O to jump back to the previous (older) location.\r\n\r\nPress Ctrl-I (same as Tab) to jump forward to the next (newer) location.\r\n\r\n####find - replace\r\n\r\n:%s/foo/bar/g\r\n\r\nFind each occurrence of 'foo' (in all lines), and replace it with 'bar'.","created_at":"2013-03-28 09:28:54 +0000","updated_at":"2014-09-24 02:43:21 +0000","private":0,"tags":"s:3:\"vim\";"},{"id":68,"category_id":11,"user_id":6,"title":"travis_yml","description":"travis.yml  manifest for php projects","content":"language: php\r\nphp:\r\n    - 5.3\r\n# variables d'envirronement\r\n#env:\r\n# - MARKME_DB_DRIVER= pdo_sqlite\r\n# install les packages avec composer\r\nbefore_script:\r\n    - composer install\r\n# executer phpunit\r\nscript: phpunit","created_at":"2013-04-04 09:19:01 +0000","updated_at":"2013-04-04 09:27:28 +0000","private":0,"tags":"N;"},{"id":69,"category_id":11,"user_id":6,"title":"starting a command in the background , windows","description":"starting a command in the background , windows","content":"start /B [command]","created_at":"2013-04-06 12:09:17 +0000","updated_at":"2013-04-06 12:09:17 +0000","private":0,"tags":"N;"},{"id":79,"category_id":2,"user_id":6,"title":"Simple Authentication  in Express ","description":"Simple Authentication  in Express ","content":"/**\r\n * Module dependencies.\r\n */\r\n\r\nvar express = require('../..');\r\nvar hash = require('./pass').hash;\r\nvar bodyParser = require('body-parser');\r\nvar session = require('express-session');\r\n\r\nvar app = module.exports = express();\r\n\r\n// config\r\n\r\napp.set('view engine', 'ejs');\r\napp.set('views', __dirname + '/views');\r\n\r\n// middleware\r\n\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\napp.use(session({\r\n  resave: false, // don't save session if unmodified\r\n  saveUninitialized: false, // don't create session until something stored\r\n  secret: 'shhhh, very secret'\r\n}));\r\n\r\n// Session-persisted message middleware\r\n\r\napp.use(function(req, res, next){\r\n  var err = req.session.error;\r\n  var msg = req.session.success;\r\n  delete req.session.error;\r\n  delete req.session.success;\r\n  res.locals.message = '';\r\n  if (err) res.locals.message = '<p class=\"msg error\">' + err + '</p>';\r\n  if (msg) res.locals.message = '<p class=\"msg success\">' + msg + '</p>';\r\n  next();\r\n});\r\n\r\n// dummy database\r\n\r\nvar users = {\r\n  tj: { name: 'tj' }\r\n};\r\n\r\n// when you create a user, generate a salt\r\n// and hash the password ('foobar' is the pass here)\r\n\r\nhash('foobar', function(err, salt, hash){\r\n  if (err) throw err;\r\n  // store the salt & hash in the \"db\"\r\n  users.tj.salt = salt;\r\n  users.tj.hash = hash;\r\n});\r\n\r\n\r\n// Authenticate using our plain-object database of doom!\r\n\r\nfunction authenticate(name, pass, fn) {\r\n  if (!module.parent) console.log('authenticating %s:%s', name, pass);\r\n  var user = users[name];\r\n  // query the db for the given username\r\n  if (!user) return fn(new Error('cannot find user'));\r\n  // apply the same algorithm to the POSTed password, applying\r\n  // the hash against the pass / salt, if there is a match we\r\n  // found the user\r\n  hash(pass, user.salt, function(err, hash){\r\n    if (err) return fn(err);\r\n    if (hash == user.hash) return fn(null, user);\r\n    fn(new Error('invalid password'));\r\n  });\r\n}\r\n\r\nfunction restrict(req, res, next) {\r\n  if (req.session.user) {\r\n    next();\r\n  } else {\r\n    req.session.error = 'Access denied!';\r\n    res.redirect('/login');\r\n  }\r\n}\r\n\r\napp.get('/', function(req, res){\r\n  res.redirect('/login');\r\n});\r\n\r\napp.get('/restricted', restrict, function(req, res){\r\n  res.send('Wahoo! restricted area, click to <a href=\"/logout\">logout</a>');\r\n});\r\n\r\napp.get('/logout', function(req, res){\r\n  // destroy the user's session to log them out\r\n  // will be re-created next request\r\n  req.session.destroy(function(){\r\n    res.redirect('/');\r\n  });\r\n});\r\n\r\napp.get('/login', function(req, res){\r\n  res.render('login');\r\n});\r\n\r\napp.post('/login', function(req, res){\r\n  authenticate(req.body.username, req.body.password, function(err, user){\r\n    if (user) {\r\n      // Regenerate session when signing in\r\n      // to prevent fixation\r\n      req.session.regenerate(function(){\r\n        // Store the user's primary key\r\n        // in the session store to be retrieved,\r\n        // or in this case the entire user object\r\n        req.session.user = user;\r\n        req.session.success = 'Authenticated as ' + user.name\r\n          + ' click to <a href=\"/logout\">logout</a>. '\r\n          + ' You may now access <a href=\"/restricted\">/restricted</a>.';\r\n        res.redirect('back');\r\n      });\r\n    } else {\r\n      req.session.error = 'Authentication failed, please check your '\r\n        + ' username and password.'\r\n        + ' (use \"tj\" and \"foobar\")';\r\n      res.redirect('/login');\r\n    }\r\n  });\r\n});\r\n\r\n/* istanbul ignore next */\r\nif (!module.parent) {\r\n  app.listen(3000);\r\n  console.log('Express started on port 3000');\r\n}","created_at":"2014-07-16 09:09:02 +0000","updated_at":"2014-07-16 16:45:53 +0000","private":0,"tags":null},{"id":86,"category_id":4,"user_id":6,"title":"Disable spellchecking ,autocapitalize, autocorrect in an form field","description":"Disable spellchecking ,autocapitalize, autocorrect in an form field","content":"<textarea spellcheck=\"false\" autocorrect=\"off\" autocapitalize=\"off\"></textarea>","created_at":"2014-07-16 19:38:57 +0000","updated_at":"2014-07-17 23:01:29 +0000","private":0,"tags":null},{"id":87,"category_id":31,"user_id":6,"title":"leaked phantom pain plot","description":"leaked phantom pain plot","content":"CHAPTER ONE: THE PHANTOM PAIN \r\n\r\nSnake has a flashback of Operation Snake Eater and re-lives fighting The Boss before waking in a hospital. His body is out of shape and he is weak. He is occasionally visited by a Nurse and his doctor who reveals that he has been in a coma for nine years. Snake has lost his left hand, wrist and has shrapnel lodged in his skull which will in the course of the next few months work its way out. Snake goes into a shock and reveals he has slight memory loss. Going back to sleep, he has flashbacks of how he learned of the innocence of The Boss, his decision to leave The American Philosophers. This is an organization created by his former Commander Zero due to their differences in interpreting the will of The Boss and how he came to be a mercenary in Central America. He also dreams about  his occasional violent run-ins with a rival mercenary leader Kaz Miller. Finally the two men come to peace and create MSF together. Snake wakes up in shock when an explosion rips through the hospital and machine gun fire followed by people screaming. Snake is introduced to a man who calls himself Ishmael whom reveals he has watched over Snake for the past nine years. He helps the weak Snake move through the hospital to safety. They  are then attacked by several strange figures who at first seem hostile, but then are revealed to be trying to help Snake after they rescue him from a death squad of XOF soldiers.\r\nSnake and Ishmael make it out of the hospital and try fleeing by car, but are attacked by helicopter(s). Snake is saved after the helicopter is taken out by a strange psychic figure. Snake also finds that Ishmael was just an illusion created by this Psychic to help Snake. Snake is then snatched by Revolver Ocelot who is shocked to learn that Snake does not remember him. Ocelot takes him away revealing that the people trying to kill him belong to Skullface, who has started a full-blown war against Cipher for unknown reasons. Skullface wants Snake dead because he wants Cipher’s icon and propaganda tool to be removed. Together, they fight off these strange figures who are working for Cipher before being rescued by Diamond Dog soldiers. Snake however, passes out after trying to fight them as he is still confused. In another flashback, Snake re-lives the moment he was introduced to Ocelot and remembers fighting him throughout operation Snake Eater. SNAKE is taken to an off shore plant similar to Mother Base. Ocelot reveals that when Snake was in a coma, Kaz went back to Camp Omega with the Sandinista and rescued the remaining MFS members. They began to rebuild their outfit, this time re-naming it Diamond Dogs. Ocelot lets Snake rest before his first mission. The next day, Snake is fitted with a robotic hand and wrist, which MSF took from a Russian KGB agent they killed a decade ago. Ocelot takes Snake to Afghanistan to rescue Kaz that has been captured, but kept alive over the week. Snake goes on his first ever mission since waking up and finds Kaz whom has both a leg and an arm missing. They fly back to their new home. Kaz explains what he went through in the last nine years. He reveals Ocelot came to him and helped financially as he owes Snake. Kaz also reveals that Skullface has a base in Afghanistan as he is trying to help the Soviets win the war and that is why he chose Afghanistan as a place of interest.  Snake is also warmly greeted by the Diamond dog soldiers who see Snake as a living legend. Kaz gives Snake a series of mission objectives. The base at that moment is attacked by a rival mercenary outfit and later after the fight, Kaz reveals that the base needs improvements, better protection and more firepower and men. He encourages Snake to focus on both gaining them for their revenge and doing mercenary missions on the side to fund their quest.\r\n\r\nCHAPTER TWO: DIAMOND DOGS \r\n\r\nBefore going after Cipher and XOF for revenge, Snake goes back to Afghanistan to raise money for the new Mother Base by completing mercenary missions such as capturing Soviet and Mujaheddin bases, stealing Intel, equipment, personnel, doing assassination & sabotage missions, along with  intelligence gathering missions for a corrupt CIA unit based there. They capture enemy armored vehicles and collect raw diamonds. Snake also does missions for both the Soviets and for the Mujaheddin in return for diamonds, money and resources. During one mission, Snake finds the person responsible for killing all the men protecting Kaz and the same person who captured and delivered Kaz to the Russians. Her name is Quiet and she’s an expert sharpshooter. Snake rescues her from being raped and murdered after she kills a perverted Soviet commander. After Snake’s effort to help Mother Base expand into a now fully fledged mercenary outfit, Kaz and Ocelot approach him and shows they have found the suspected Cipher spy, Huey Emmerich who resides under XOF’s close guard in a Bosnian mansion. Snake captures him and brings him back to Mother Base where he is then put through severe torture by Ocelot. Quiet was tortured also, escapes and Snake is given the mission of chasing after her since she has valuable information on Diamond Dogs. Snake tracks and locates Quiet, but she quickly turns the hunter into prey and has a sniper stand-off with Snake resulting in her being wounded. As Snake is about to mercy kill her, Kaz calls him with Intel on her background.\r\nShe’s from Ireland and her father, an IRA supporter was gunned down along with her brother in the Bloody Sunday incident by the British armed forces. She became a sniper for the IRA, but they betrayed her by attempting to hand her over to the UVF in return for some of their own men, but she killed them. She then moved to England, changed her name and joined the British Army. The trained sniper proceeds to work her way up so she could kill the men responsible for her father and brother’s death. She does so before being captured by the SAS and tortured to near death. They even go far enough to have her tongue cut off. She escaped and became a mercenary before finding herself working for the Soviets as an assassin. Snake feels sympathetic for her and offers her a place with Diamond dogs which she accepts. Back at Mother base, Diamond Dogs is given a new series of mercenary missions, similar to the ones before. During one mission in which Snake is to assassinate the leader of a rebel group known only as The Orphans, Snake discovers they are a small rag-tag group of kids who had lost family due to the ongoing war. Snake finds their leader Eli and instead of killing him, Snake recruits him and his companions. Mother Base has now expanded even further and has more men, equipment and contracts.  After returning to Mother base, it is attacked by a Soviet assault team in revenge for Snake not completing his mission of killing Eli. He then learns from torturing the last remaining Soviet that they aren’t in fact soviet, but Americans working for Skullface. They kidnapped Eli from Cipher and were using him as a bargaining chip, but after the boy escaped for the tenth time in six days, Skullface ordered the boy to be executed. Eli however, kills the man before he can say why. Snake decides to let the boy stay on Mother Base in a hope to find out why Cipher value the boy so much.\r\n\r\nCHAPTER THREE: A GHOST IN THE MACHINE \r\n\r\nHuey finally breaks and reveals he was helping cipher. He reveals that Cipher threatened to kill his fiance if he did not help. He also goes on to say that he was aware that Paz might not go through with her plans so he contacted Cipher. He then leaked information to Cipher. He created the entire fake inspection plot. He then explains that the team were to come in and simply take Metal Gear Zeke and then leave, but they instead planting explosives, killed half of MSF and kidnapped Huey before destroying MSF’s mother base altogether. Huey cries that his actions in betraying Snake has caused him PTSD and he is now a heavy drinker. The direct result of his actions has led his marriage to ruins. Snake himself then tortured Huey out of anger, but forgives him later on. Huey tells Snake that Skullface knows both Zero and Snake personally from the 1960′s and gives Snake the location of one of Skullface’s bases in Afghanistan. Snake finds the outpost and infiltrates it in an attempt to capture or kill Skullface, but is  detected by the base. As Snake’s extraction fails, he is stranded and has to fight a group of other Cipher assassins, deformed Super Soldiers. Snake barely survives, he beats them, but is surrounded by XOF soldiers, he  is rescued by The Mujaheddin who takes him to their camp. Snake, without communication helps the Mujaheddin fight off a large number of Soviet forces before Diamond Dog soldiers arrive. A battle occurs in which many Diamond dog soldiers are killed in the process. Quiet also dies during the battle after sacrificing herself to save Snake. After returning to the base, Snake and his men mourn their fallen comrades and this fuels his desire for revenge even deeper. The base is then visited by Skullface and his men unexpectedly and instead of fighting, Skullface comes to make peace. He reveals himself to be Aleksandar Antov who was once an agent with Fox alongside Snake back in the early 60s. In the mid 60s his wife and children were killed by Major Zero who was in charge of the American Philosophers in retaliation for refusing to kill Eva, a woman from Snake’s past. Skullface explains that he has been keeping his friends close, but his enemies even closer. He wishes to kill Zero who is now in charge of Cipher, but needs help doing so. Despite the protests from Kaz, Snake agrees. Skullface hands Snake a dossier before leaving. The dossier reveals that Cipher has a base in South Africa where they are developing weapons to surpass Metal Gear and that Zero will be there. Skullface continues to reveal that Eli was part of a secret project conducted by Cipher in which Zero used Snake’s genetics to create three cloned baby boys, one of them being Eli. A shocked Snake then later sends Eli off to London with fake papers and enough money to survive to lead a normal life away from both he and Zero, but Eli sees this as abandonment.  Snake then tells his men that their time in Afghanistan is over.\r\n\r\nCHAPTER FOUR: A COUNTRY WITHOUT BORDERS \r\n\r\nThe war tore the South African country of Zawbowii apart. They have no government and aren’t even recognized within the UN. It is made up of desert, a mountainous region, dense jungle and swampland with hundreds of small villages scattered all over it. Snake is told by Kaz that the country is gripped in a civil war between the Christian south and the Muslim north. Snake arrives and is given the mission of infiltrating a rebel there. After doing so, he finds that the rebels are being equipped and paid by Cipher. Snake finds civilian prisoners whom he releases, one of them begging Snake to save their children who are kept prisoners and forced to become boy soldiers. Snake agrees and goes there to find small boys being trained how to fight. Snake rescues them and takes them back to mother base. Kaz disagrees with using boy soldiers, but Snake persuades him. Snake also becomes a friend for one of the small boys named Vosoloo. Snake is given a series of mercenary missions to complete. After completing a mission, snake is suddenly attacked by a demon like fiery figure that was seen at the hospital. Snake kills the figure before heading back to mother base, which he expands even further.\r\n\r\nCHAPTER FIVE: BLOOD DIAMOND \r\n\r\nSnake gets Intel that Cipher has a large facility with compounds and decides to head toward it, in order to kill Zero once and for all. Snake comes across a village on his way to the facility and finds all the rebels dead. He finds two lone survivors, a teenage boy named Frank Jaeger and his sister Naomi. Snake saves their lives. Frank puts up a fight, but Snake wins and subdues him. He tells Frank that he can give him a real cause to fight for and sends them both back to mother base. Snake reaches and infiltrates the cipher facility where he fights the strange psychic and beats him. The Psychic reads Snake’s future before departing from the facility, but tells Snake they will meet again in another life. Snake finds Zero and is about to kill him however, he gets captured resulting in torture. Zero reveals to Snake that they have developed Nano technology and what he has in store for the world, is a future the boss would be proud of. Snake frees himself and causes a self-destruct on the facility. Snakes escapes before it explodes. It is unknown if Zero survives or not.\r\nSnake makes it to a village and discovers that Cipher is sending the entire force to get him. Snake calls in for all of his men to arrive, which they do and they all prepare for battle. This includes the child soldiers. The battle rages after Cipher and the Rebels attack. Snake and his men are heavily outnumbered and surrounded. Snake calls for air support. Napalm and cluster bombs are dropped on their location killing almost everyone. Snake then begins to execute the wounded cipher and rebel soldiers one by one before mercy killing a wounded vosoloo. Kaz and the others arrive to witness the aftermath and the bodies that Snake mutilated. Back at mother base, Snake and his men cremate and hold a ceremony for the dead. Snake then goes to extreme measures and orders his men to take the whole country by force, keeping its people on a tight leash. Snake even has some of his own men punished by death for refusing to kill civilians. Many abandon Diamond Dogs and even Kaz starts to question the cause and even the war that they are fighting. Snake goes on a series of missions in, which he and his forces go from village to jungles to even bases, wiping out everyone on sight, including civilians.\r\nOcelot leaves Diamond Dogs, stating that his mother would hate what Snake has become. The next morning, Snake wakes up to discover that half of the men at Diamond Dogs have gone up and left without warning. Snake orders Kaz to gather up as many men as possible for an assault on the country’s capital city where the ruling royal family live. Snake and his men, including Kaz, attack the city. Snake orders the deaths of the royal family and the civilian population who are rioting at them. Snake kills several of his own men who refuse to fire at the civilians, much to the shock and horror of Kaz. Back at mother base, Kaz questions Snake and Snake reveals that Cipher is planning on taking over the world, not by force, but within, via the brain through technology and he wishes to put an end to it. When asked how Snake will accomplish this, Snake suggests that they acquire nuclear weapons and simply reduce the Earth’s population.This will result in the destruction of every capital city in the most powerful countries. Kaz, now sickened by what Snake has become secretly plans a takeover with the diamond dog soldiers who all agree. Snake is attacked by his own men who try to subdue him, but Snake kills them and launches a one man assault on his own base, killing his own men. Kaz and the others try to fight back, but Skullface and his unit arrive. Skullface launches the same type of devastation on Mother Base as they did a decade earlier, but only this time is helped by Snake himself. Kaz escapes along with a traumatized Huey. Skullface accept Snake for who he is and even agrees with Snake’s plan on saving the world from Cipher.\r\n\r\nCHAPTER SIX: OUTER HEAVEN \r\n\r\nSnake is taken to an abandoned missile site where Skullface has molded this to his own personal mother base. There, Snake is introduced to a Metal Gear, which his men have built based on Zeke. Both Skullface and Snake form an alliance. They decide to take over the country for themselves and use it as an F.O.B in their war against Cipher. Snake now has a series of missions to complete in order to impress and win over Skullface. Snake is accepted as one of them. Snake realizes he will always be a target of Cipher whom will stop at nothing. So Snake comes up with a plan. He kills Skullface and takes over as commander or “General Saladin” as his new army call him. Snake then orders his men to build a wall around the small country, expanding the base and started development on nuclear weapons. He then arranges to meet with Zero. Snake meets with an aged and weak Zero whom is with Ocelot and gives Zero Skullfaces head as a gift. He begs Zero to forgive him and give him another chance. Zero is quick to accept and allows Snake to have his own Special Forces Unit that Snake named Foxhound. Zero also introduces his adopted son David Pliskin to Snake. Zero then reveals to Snake in private that David is actually his and will even allow Snake to be there for him, but only as a mentor. Snake agrees. Zero has no idea that the General Saladin who is now the leader of the mercenary state, Outer Heaven is Snake. Snake arrives at the Foxhound base facility in Colorado in dress uniform. He meets Major Roy Campbell who becomes the units second in command. Snake is later visited by Ocelot who asks what Snake is trying to accomplish. Snake simply smiles and replies with, “Keep your friends close, but your enemies even closer”. Arriving at the base are the first ever batch of recruits, among them is Frank Jaeger.\r\nThe game ends with the sentence, “To be continued in, Metal Gear Solid: Outer Heaven”. Suggesting that the next game will not only be a follow-up but will actually be a full re-telling/Remake of Metal Gear and Metal Gear 2.","created_at":"2014-07-17 01:16:26 +0000","updated_at":"2014-07-17 01:18:01 +0000","private":0,"tags":null},{"id":88,"category_id":2,"user_id":6,"title":"Promise Based event emitter ","description":"Promise Based event emitter in Typescript.","content":"///<reference path=\"node.d.ts\"/>\r\n\r\nmodule qevent {\r\n\r\n    export interface IEventEmitter {\r\n        on: (event: Event) => void;\r\n        off: (eventName: string, listener: Function) => void;\r\n        emit: (eventName, ...args) => Promise;\r\n        once: (event: Event) => void;\r\n        has: (eventName: string, listener: Function) => void;\r\n    }\r\n\r\n    export interface Event {\r\n        name: string;\r\n        listener: Function;\r\n        priority: number;\r\n    }\r\n\r\n    export interface Promise {\r\n        then: (callback: Function) => Promise;\r\n    }\r\n\r\n/**\r\n * Copyright © 2014 mparaiso <mparaiso@online.fr>. All Rights Reserved.\r\n * qevent-emitter.ts\r\n */\r\nexport class EventEmitter implements IEventEmitter {\r\n        private _eventList: Event[];\r\n        private _Q;\r\n        /**\r\n         * @param {Q} promise\r\n         */\r\n        constructor(Q) {\r\n            this._eventList = [];\r\n            this._Q = Q;\r\n        }\r\n        on(eventName: string, listener: Function);\r\n    on(event: Event)\r\n    on(event: any, listener?: Function) {\r\n            if (typeof event === \"string\")\r\n                event = { name: event, listener: listener };\r\n            this._eventList.push(event)\r\n    }\r\n        /**\r\n         * remove listeners\r\n         * @chainable\r\n         * @exemple\r\n         *  qEvent.off('myEvent'); // will remove all event listeners for 'myEvent'\r\n         *  qEvent.off('myEvent,myListenerFunction); // will remove a specific event listener\r\n         */\r\n        off(eventName: string, listener: Function): EventEmitter {\r\n            this._eventList\r\n                .filter((el) => el.name == eventName && listener ? el.listener == listener : true)\r\n                .forEach((el) => this._eventList.splice(this._eventList.indexOf(el), 1));\r\n            return this;\r\n        }\r\n        /**\r\n         * emit event\r\n         * @exemple\r\n         *\r\n         */\r\n        emit(eventName: string, ...args): Promise {\r\n            return this._eventList\r\n                .filter((e) => e.name === eventName)\r\n                .sort((a, b) => b.priority - a.priority)\r\n                .reduce((q: Promise, next: Event) => { q.then(next.listener.bind.apply(next.listener, args)) }, this._Q());\r\n        }\r\n        /**\r\n         * @register an event listener once\r\n         */\r\n        once(event: Event);\r\n    once(eventName: string, listener: Function)\r\n    once(eventName: any, listener?: Function) {\r\n            var _evName;\r\n            if (typeof eventName !== \"string\") {\r\n                _evName = eventName.name;\r\n            } else {\r\n                _evName = eventName;\r\n            }\r\n            var _listener = () => {\r\n                this.off(eventName, listener);\r\n                return listener.apply(this, [].slice.call(arguments));\r\n            }\r\n        this.on(eventName, _listener);\r\n        }\r\n\r\n        has(eventName: string, listener: Function) {\r\n            return this._eventList.some((event) => event.name == eventName && event.listener == listener);\r\n        }\r\n    }\r\n\r\nexport var create = function(Q) {\r\n        if (!Q) {\r\n            Q = require('q');\r\n        }\r\n        return new EventEmitter(Q);\r\n    }\r\n\r\n    }\r\n\r\nmodule.exports = qevent;\r\n","created_at":"2014-07-18 16:26:47 +0000","updated_at":"2014-07-22 23:53:29 +0000","private":0,"tags":null},{"id":89,"category_id":4,"user_id":6,"title":"Bootstrap 3 pagination.","description":"Bootstrap 3 pagination.","content":"<!-- Default pagination -->\r\n<ul class=\"pagination\">\r\n  <li><a href=\"#\">«</a></li>\r\n  <li><a href=\"#\">1</a></li>\r\n  <li><a href=\"#\">2</a></li>\r\n  <li><a href=\"#\">3</a></li>\r\n  <li><a href=\"#\">4</a></li>\r\n  <li><a href=\"#\">5</a></li>\r\n  <li><a href=\"#\">»</a></li>\r\n</ul>\r\n<!-- Disabled and active states -->\r\n\r\n<ul class=\"pagination\">\r\n  <li class=\"disabled\"><a href=\"#\">«</a></li>\r\n  <li class=\"active\"><a href=\"#\">1 <span class=\"sr-only\">(current)</span></a></li>\r\n  ...\r\n</ul>\r\n<!-- sizing -->\r\n\r\n<ul class=\"pagination pagination-lg\">...</ul>\r\n<ul class=\"pagination\">...</ul>\r\n<ul class=\"pagination pagination-sm\">...</ul>\r\n\r\n<!-- pager -->\r\n\r\n<ul class=\"pager\">\r\n  <li><a href=\"#\">Previous</a></li>\r\n  <li><a href=\"#\">Next</a></li>\r\n</ul>\r\n","created_at":"2014-07-23 22:44:17 +0000","updated_at":"2014-07-23 22:47:04 +0000","private":0,"tags":null},{"id":90,"category_id":4,"user_id":6,"title":"Bootstrap 3 navbar","description":"Bootstrap 3 navbar","content":"<!-- default -->\r\n<nav class=\"navbar navbar-default\" role=\"navigation\">\r\n  <div class=\"container-fluid\">\r\n    <!-- Brand and toggle get grouped for better mobile display -->\r\n    <div class=\"navbar-header\">\r\n      <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\"#bs-example-navbar-collapse-1\">\r\n        <span class=\"sr-only\">Toggle navigation</span>\r\n        <span class=\"icon-bar\"></span>\r\n        <span class=\"icon-bar\"></span>\r\n        <span class=\"icon-bar\"></span>\r\n      </button>\r\n      <a class=\"navbar-brand\" href=\"#\">Brand</a>\r\n    </div>\r\n\r\n    <!-- Collect the nav links, forms, and other content for toggling -->\r\n    <div class=\"collapse navbar-collapse\" id=\"bs-example-navbar-collapse-1\">\r\n      <ul class=\"nav navbar-nav\">\r\n        <li class=\"active\"><a href=\"#\">Link</a></li>\r\n        <li><a href=\"#\">Link</a></li>\r\n        <li class=\"dropdown\">\r\n          <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">Dropdown <span class=\"caret\"></span></a>\r\n          <ul class=\"dropdown-menu\" role=\"menu\">\r\n            <li><a href=\"#\">Action</a></li>\r\n            <li><a href=\"#\">Another action</a></li>\r\n            <li><a href=\"#\">Something else here</a></li>\r\n            <li class=\"divider\"></li>\r\n            <li><a href=\"#\">Separated link</a></li>\r\n            <li class=\"divider\"></li>\r\n            <li><a href=\"#\">One more separated link</a></li>\r\n          </ul>\r\n        </li>\r\n      </ul>\r\n      <form class=\"navbar-form navbar-left\" role=\"search\">\r\n        <div class=\"form-group\">\r\n          <input type=\"text\" class=\"form-control\" placeholder=\"Search\">\r\n        </div>\r\n        <button type=\"submit\" class=\"btn btn-default\">Submit</button>\r\n      </form>\r\n      <ul class=\"nav navbar-nav navbar-right\">\r\n        <li><a href=\"#\">Link</a></li>\r\n        <li class=\"dropdown\">\r\n          <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">Dropdown <span class=\"caret\"></span></a>\r\n          <ul class=\"dropdown-menu\" role=\"menu\">\r\n            <li><a href=\"#\">Action</a></li>\r\n            <li><a href=\"#\">Another action</a></li>\r\n            <li><a href=\"#\">Something else here</a></li>\r\n            <li class=\"divider\"></li>\r\n            <li><a href=\"#\">Separated link</a></li>\r\n          </ul>\r\n        </li>\r\n      </ul>\r\n    </div><!-- /.navbar-collapse -->\r\n  </div><!-- /.container-fluid -->\r\n</nav>\r\n\r\n<!--\r\nForms\r\nPlace form content within .navbar-form for proper vertical alignment and collapsed behavior in narrow viewports. Use the alignment options to decide where it resides within the navbar content.\r\n\r\nAs a heads up, .navbar-form shares much of its code with .form-inline via mixin. Some form controls, like input groups, may require fixed widths to be show up properly within a navbar.\r\n-->\r\n\r\n<form class=\"navbar-form navbar-left\" role=\"search\">\r\n  <div class=\"form-group\">\r\n    <input type=\"text\" class=\"form-control\" placeholder=\"Search\">\r\n  </div>\r\n  <button type=\"submit\" class=\"btn btn-default\">Submit</button>\r\n</form>\r\n\r\n<!-- Buttons -->\r\n\r\n<button type=\"button\" class=\"btn btn-default navbar-btn\">Sign in</button>\r\n\r\n<!-- Text -->\r\n\r\n<p class=\"navbar-text\">Signed in as Mark Otto</p>\r\n\r\n<!-- Non-nav links -->\r\n\r\n<p class=\"navbar-text navbar-right\">Signed in as <a href=\"#\" class=\"navbar-link\">Mark Otto</a></p>\r\n\r\n\r\n","created_at":"2014-07-24 00:57:55 +0000","updated_at":"2014-07-24 01:23:04 +0000","private":0,"tags":null},{"id":91,"category_id":2,"user_id":6,"title":"Express redis cache middleware","description":"Express redis cache middleware","content":"module.exports = function(options) {\r\n    options = options || {};\r\n    options.redis = options.redis || {};\r\n\r\n    var redis = require('redis').createClient(options.redis.port, options.redishost, options.redis.options);\r\n\r\n    if (options.redis.password) {\r\n        redis.auth(redis.options.password);\r\n    }\r\n\r\n    return function(req, res, next) {\r\n        if (options.testMode) {\r\n            res.cache = function() {\r\n                return this;\r\n            }\r\n            return next();\r\n        }\r\n\r\n        var end = res.end,\r\n            write = res.write,\r\n            cache = [],\r\n            key = req.originalUrl;\r\n\r\n        redis.get(key, function(error, reply) {\r\n            if (error) {\r\n                return next();\r\n            } else if (reply) {\r\n                res.set('Content-Type', 'application/json');\r\n                res.end(reply);\r\n            } else {\r\n                res.cache = function(timeout) {\r\n\r\n                    if (!timeout) {\r\n                        return this;\r\n                    }\r\n\r\n                    res.write = function(chunk, encoding) {\r\n                        cache.push(chunk)\r\n                        write.call(res, chunk, encoding);\r\n                    }\r\n\r\n                    res.end = function(chunk, encoding) {\r\n                        if (chunk) this.write(chunk, encoding);\r\n\r\n                        redis.setex(key, timeout, cache.join(''));\r\n\r\n                        end.call(res);\r\n                    };\r\n                    return this;\r\n                };\r\n                return next();\r\n            }\r\n        });\r\n    }\r\n}","created_at":"2014-07-24 08:28:54 +0000","updated_at":"2014-07-24 08:28:54 +0000","private":0,"tags":null},{"id":92,"category_id":31,"user_id":9,"title":"You're Missing the Point of Promises","description":"You're Missing the Point of Promises\r\n","content":"*This article has been given a [more permanent home](http://domenic.me/2012/10/14/youre-missing-the-point-of-promises/) on my blog. Also, since it was first written, the development of the Promises/A+ specification has made the original emphasis on Promises/A seem somewhat outdated.*\r\n\r\n# You're Missing the Point of Promises\r\n\r\n*Promises* are a software abstraction that makes working with asynchronous operations much more pleasant. In the most\r\nbasic definition, your code will move from continuation-passing style:\r\n\r\n```js\r\ngetTweetsFor(\"domenic\", function (err, results) {\r\n    // the rest of your code goes here.\r\n});\r\n```\r\n\r\nto one where your functions return a value, called a *promise*, which represents the eventual results of that operation.\r\n\r\n```js\r\nvar promiseForTweets = getTweetsFor(\"domenic\");\r\n```\r\n\r\nThis is powerful since you can now treat these promises as first-class objects, passing them around, aggregating them,\r\nand so on, instead of inserting dummy callbacks that tie together other callbacks in order to do the same.\r\n\r\nI've talked about how cool I think promises are [at length][presentation]. This essay isn't about that. Instead, it's\r\nabout a disturbing trend I am seeing in recent JavaScript libraries that have added promise support: *they completely\r\nmiss the point of promises*.\r\n\r\n\r\n[presentation]: http://www.slideshare.net/domenicdenicola/callbacks-promises-and-coroutines-oh-my-the-evolution-of-asynchronicity-in-javascript\r\n\r\n\r\n## Thenables and CommonJS Promises/A\r\n\r\nWhen someone says \"promise\" in a JavaScript context, usually they mean—or at least *think* they\r\nmean—[CommonJS Promises/A][]. This is one of the smallest \"specs\" I've seen. The meat of it is entirely about specifying\r\nthe behavior of a single function, `then`:\r\n\r\n> A promise is defined as an object that has a function as the value for the property `then`:\r\n\r\n> `then(fulfilledHandler, errorHandler, progressHandler)`\r\n\r\n> Adds a `fulfilledHandler`, `errorHandler`, and `progressHandler` to be called for completion of a promise. The\r\n> `fulfilledHandler` is called when the promise is fulfilled. The `errorHandler` is called when a promise fails. The\r\n> `progressHandler` is called for progress events. All arguments are optional and non-function values are ignored. The\r\n> `progressHandler` is not only an optional argument, but progress events are purely optional. Promise implementors are\r\n> not required to ever call a `progressHandler` (the `progressHandler` may be ignored), this parameter exists so that\r\n> implementors may call it if they have progress events to report.\r\n\r\n> This function should return a new promise that is fulfilled when the given `fulfilledHandler` or `errorHandler`\r\n> callback is finished. This allows promise operations to be chained together. The value returned from the callback\r\n> handler is the fulfillment value for the returned promise. If the callback throws an error, the returned promise will\r\n> be moved to failed state.\r\n\r\nPeople mostly understand the first paragraph. It boils down to *callback aggregation*. You use `then` to attach\r\ncallbacks to a promise, whether for success or for errors (or even progress). When the promise transitions state—which\r\nis out of scope of this very small spec!—your callbacks will be called. This is pretty useful, I guess.\r\n\r\nWhat people don't seem to notice is the second paragraph. Which is a shame, since it's the most important one.\r\n\r\n\r\n[CommonJS Promises/A]: http://wiki.commonjs.org/wiki/Promises/A\r\n\r\n\r\n## What is the Point of Promises?\r\n\r\nThe thing is, promises are not *about* callback aggregation. That's a simple utility. Promises are about something\r\nmuch deeper, namely providing a direct correspondence between synchronous functions and asynchronous functions.\r\n\r\nWhat does this mean? Well, there are two very important aspects of synchronous functions:\r\n\r\n- They *return values*\r\n- They *throw exceptions*\r\n\r\nBoth of these are essentially about composition. That is, you can feed the return value of one function straight into\r\nanother, and keep doing this indefinitely. *More importantly*, if at any point that process fails, one function in the\r\ncomposition chain can throw an exception, which then bypasses all further compositional layers until it comes into the\r\nhands of someone who can handle it with a `catch`.\r\n\r\nNow, in an asynchronous world, you can no longer return values: they simply aren't ready in time. Similarly, you can't\r\nthrow exceptions, because nobody's there to catch them. So we descend into the so-called \"callback hell,\" where\r\ncomposition of return values involves nested callbacks, and composition of errors involves passing them up the chain\r\nmanually, and oh by the way you'd better *never* throw an exception or else you'll need to introduce something crazy\r\nlike [domains][].\r\n\r\n*The point of promises is to give us back functional composition and error bubbling in the async world.* They do this\r\nby saying that your functions should return a promise, which can do one of two things:\r\n\r\n- Become *fulfilled by a value*\r\n- Become *rejected with an exception*\r\n\r\nAnd, *if* you have a correctly implemented `then` function that follows Promises/A, then fulfillment and rejection will\r\ncompose just like their synchronous counterparts, with fulfillments flowing up a compositional chain, but being\r\ninterrupted at any time by a rejection that is only handled by someone who declares they are ready to handle it.\r\n\r\nIn other words, the following asynchronous code:\r\n\r\n```js\r\ngetTweetsFor(\"domenic\") // promise-returning async function\r\n    .then(function (tweets) {\r\n        var shortUrls = parseTweetsForUrls(tweets);\r\n        var mostRecentShortUrl = shortUrls[0];\r\n        return expandUrlUsingTwitterApi(mostRecentShortUrl); // promise-returning async function\r\n    })\r\n    .then(doHttpRequest) // promise-returning async function\r\n    .then(\r\n        function (responseBody) {\r\n            console.log(\"Most recent link text:\", responseBody);\r\n        },\r\n        function (error) {\r\n            console.error(\"Error with the twitterverse:\", error);\r\n        }\r\n    );\r\n```\r\n\r\nparallels<sup>[*][]</sup> the synchronous code:\r\n\r\n```js\r\ntry {\r\n    var tweets = getTweetsFor(\"domenic\"); // blocking\r\n    var shortUrls = parseTweetsForUrls(tweets);\r\n    var mostRecentShortUrl = shortUrls[0];\r\n    var responseBody = doHttpRequest(expandUrlUsingTwitterApi(mostRecentShortUrl)); // blocking x 2\r\n    console.log(\"Most recent link text:\", responseBody);\r\n} catch (error) {\r\n    console.error(\"Error with the twitterverse: \", error);\r\n}\r\n```\r\n\r\nNote in particular how errors flowed from any step in the process to our `catch` handler, without explicit by-hand\r\nbubbling code. And with the upcoming ECMAScript 6 revision of JavaScript, plus some [party tricks][], the code becomes\r\nnot only parallel but almost identical.\r\n\r\n[domains]: http://nodejs.org/api/domain.html\r\n[*]: https://github.com/kriskowal/q/wiki/On-Exceptions\r\n[party tricks]: http://taskjs.org/\r\n\r\n## That Second Paragraph\r\n\r\nAll of this is essentially enabled by that second paragraph:\r\n\r\n> This function should return a new promise that is fulfilled when the given `fulfilledHandler` or `errorHandler`\r\n> callback is finished. This allows promise operations to be chained together. The value returned from the callback\r\n> handler is the fulfillment value for the returned promise. If the callback throws an error, the returned promise will\r\n> be moved to failed state.\r\n\r\nIn other words, `then` is *not* a mechanism for attaching callbacks to an aggregate collection. It's a mechanism for\r\n*applying a transformation* to a promise, and yielding a *new* promise from that transformation.\r\n\r\nThis explains the crucial first phrase: \"this function should return a new promise.\" Libraries like jQuery (before 1.8)\r\ndon't do this: they simply mutate the state of the existing promise. That means if you give a promise out to multiple\r\nconsumers, they can interfere with its state. To realize how ridiculous that is, consider the synchronous parallel: if\r\nyou gave out a function's return value to two people, and one of them could somehow change it into a thrown exception!\r\nIndeed, Promises/A points this out explicitly:\r\n\r\n> Once a promise is fulfilled or failed, the promise's value MUST not be changed, just as a values in JavaScript,\r\n> primitives and object identities, can not change (although objects themselves may always be mutable even if their\r\n> identity isn't).\r\n\r\nNow consider the last two sentences. They inform how this new promise is created. In short:\r\n\r\n- If either handler returns a value, the new promise is fulfilled with that value.\r\n- If either handler throws an exception, the new promise is rejected with that exception.\r\n\r\nThis breaks down into four scenarios, depending on the state of the promise. Here we give their synchronous parallels so\r\nyou can see why it's crucially important to have semantics for all four:\r\n\r\n1. Fulfilled, fulfillment handler returns a value: simple functional transformation\r\n2. Fulfilled, fulfillment handler throws an exception: getting data, and throwing an exception in response to it\r\n3. Rejected, rejection handler returns a value: a `catch` clause got the error and handled it\r\n4. Rejected, rejection handler throws an exception: a `catch` clause got the error and re-threw it (or a new one)\r\n\r\nWithout these transformations being applied, you lose all the power of the synchronous/asynchronous parallel, and your\r\nso-called \"promises\" become simple callback aggregators. This is the problem with jQuery's current \"promises\": they only\r\nsupport scenario 1 above, omitting entirely support for scenarios 2–4. This was also the problem with Node.js 0.1's\r\n`EventEmitter`-based \"promises\" (which weren't even `then`able).\r\n\r\nFurthermore, note that by catching exceptions and transforming them into rejections, we take care of both intentional\r\nand unintentional exceptions, just like in sync code. That is, if you write `aFunctionThatDoesNotExist()` in either\r\nhandler, your promise becomes rejected and that error will bubble up the chain to the nearest rejection handler just as\r\nif you had written `throw new Error(\"bad data\")`. Look ma, no domains!\r\n\r\n\r\n## So What?\r\n\r\nMaybe you're breathlessly taken by my inexorable logic and explanatory powers. More likely, you're asking yourself why\r\nthis guy is raging so hard over some poorly-behaved libraries.\r\n\r\nHere's the problem:\r\n\r\n> A promise is defined as an object that has a function as the value for the property `then`\r\n\r\nAs authors of Promises/A-consuming libraries, we would like to assume this statement to be true: that something that\r\nis \"thenable\" actually behaves as a Promises/A promise, with all the power that entails.\r\n\r\nIf you can make this assumption, you can write [very extensive libraries][chai-as-promised] that are entirely agnostic\r\nto the implementation of the promises they accept! Whether they be from [Q][], [when.js][], or even [WinJS][], you can\r\nuse the simple composition rules of the Promises/A spec to build on promise behavior. For example, here's a generalized\r\n[retry function][] that works with any Promises/A implementation.\r\n\r\nUnfortunately, libraries like jQuery break this. This necessitates [ugly hacks][] to detect the presence of objects\r\nmasquerading as promises, and who call themselves in their API documentation promises, but aren't really Promises/A\r\npromises. If the consumers of your API start trying to pass you jQuery promises, you have two choices: fail in\r\nmysterious and hard-to-decipher ways when your compositional techniques fail, or fail up-front and block them from using\r\nyour library entirely. This sucks.\r\n\r\n\r\n[chai-as-promised]: https://github.com/domenic/chai-as-promised/\r\n[Q]: https://github.com/kriskowal/q\r\n[when.js]: https://github.com/cujojs/when\r\n[WinJS]: http://msdn.microsoft.com/en-us/library/windows/apps/br211867.aspx\r\n[retry function]: https://gist.github.com/2936696\r\n[ugly hacks]: https://github.com/domenic/chai-as-promised/blob/4bc1d6b217acde85c8af56dc3cd09f05bb752549/lib/chai-as-promised.js#L28-30\r\n\r\n\r\n## The Way Forward\r\n\r\nSo this is why I want to avoid an unfortunate [callback aggregator solution][ember] ending up in Ember. That's why I\r\nwrote this essay, with some prompting from @felixge for which I am thankful. And that's why, in the hours following\r\nwriting this essay, I worked up [a general Promises/A compliance suite][tests] that we can all use to get on the same\r\npage in the future.\r\n\r\nFor example, at current time of writing, the latest jQuery version is 1.8.2, and its promises implementation is\r\ncompletely broken with regard to the error handling semantics. Hopefully, with the above explanation to set the stage\r\nand the test suite in place, this problem can be corrected in jQuery 2.0.\r\n\r\nSince the release of that test suite, we've already seen one library, @wycats's [rsvp.js][], be released with the\r\nexplicit goal of providing these features of Promises/A. I'm hopeful others will [follow suit][]. In the meantime, here\r\nare the libraries that pass the test suite, and that I can unreservedly recommend:\r\n\r\n- [Q][] by @kriskowal and myself: a full-featured promise library with a large, powerful API surface, adapters for\r\n  Node.js, progress support, and preliminary support for long stack traces.\r\n- [rsvp.js][] by @wycats: a very small and lightweight, but still fully compliant, promise library.\r\n- [when.js][] by @briancavalier: an intermediate library with utilities for managing collections of eventual tasks,\r\n  as well as support for both progress and cancellation. Does *not* [guarantee asynchronous resolution][].\r\n\r\nIf you are stuck with a crippled \"promise\" from a library like jQuery, I recommend using one of the above libraries'\r\nassimilation utilities (usually under the name `when`) to convert to a real promise as soon as possible. For example:\r\n\r\n```js\r\nvar promise = Q.when($.get(\"https://github.com/kriskowal/q\"));\r\n// aaaah, much better\r\n```\r\n\r\n[ember]: https://github.com/emberjs/ember.js/commit/f7ac080db3a2a15f5814dc26fc86712cf7d252c8\r\n[tests]: https://github.com/domenic/promise-tests\r\n[rsvp.js]: https://github.com/tildeio/rsvp.js\r\n[follow suit]: https://twitter.com/wookiehangover/status/258641272913412096\r\n[guarantee asynchronous resolution]: https://github.com/domenic/promise-tests#always-async","created_at":"2014-07-24 18:56:25 +0000","updated_at":"2014-07-24 18:56:25 +0000","private":0,"tags":null},{"id":93,"category_id":2,"user_id":9,"title":"Using cluster module in nodejs","description":"Using cluster module in nodejs","content":"/* parrallel server */\r\n\"use strict\";\r\nvar cluster = require('cluster');\r\nvar http=require('http');\r\nvar numCPUs = require('os').cpus().length;\r\nvar container = require('./server');\r\nvar i;\r\nif (cluster.isMaster){\r\n    for(i =0;i<numCPUs;i++){\r\n        cluster.fork();\r\n    }\r\n cluster.on('exit', function(worker, code, signal) {\r\n    console.log('worker ' + worker.process.pid + ' died');\r\n  });\r\n}else{\r\n   http.createServer(container.app).listen(container.port,container.ip,function  () {\r\n            console.log('listening on %s:%s',container.ip,container.port);\r\n        });\r\n\r\n}\r\n","created_at":"2014-07-25 13:26:04 +0000","updated_at":"2014-07-25 13:26:04 +0000","private":0,"tags":null},{"id":94,"category_id":14,"user_id":9,"title":"MongoDB session store","description":"MongoDB session store","content":"stores = exports \r\nexpress = require 'express'\r\n\r\n###\r\n    Store Session in a mongoose model \r\n###\r\nclass stores.MongooseSessionStore extends express.session.Store\r\n        constructor:(options,@model)->\r\n            super\r\n        all:(callback)->\r\n            @model.find((err,sessions)->\r\n                if sessions then callback(null,sessions.map (s)->s.session)\r\n                else callback(err,sessions))\r\n        get:(sid,callback)->\r\n            @model.findOne({sid},(err,session)->\r\n                if session then callback(null,session.session)\r\n                else callback(err,session))\r\n        set:(sid,session,callback)->\r\n            @model.findOneAndUpdate({sid},{session:session},{upsert:true})\r\n            .exec(callback)\r\n        destroy:(sid,callback)->\r\n            @model.findOneAndRemove({sid},callback)\r\n        length:(callback)->\r\n            @model.count(callback)\r\n        clear:(callback)->\r\n            @model.remove(callback)\r\n        toString:->\"[object MongooseSessionStore]\"\r\n","created_at":"2014-07-25 14:26:39 +0000","updated_at":"2014-07-25 14:26:39 +0000","private":0,"tags":null},{"id":95,"category_id":31,"user_id":9,"title":"nodejs request package","description":"nodejs request package","content":"# Request -- Simplified HTTP client\r\n\r\n## Super simple to use\r\n\r\nRequest is designed to be the simplest way possible to make http calls. It supports HTTPS and follows redirects by default.\r\n\r\n```javascript\r\nvar request = require('request');\r\nrequest('http://www.google.com', function (error, response, body) {\r\n  if (!error && response.statusCode == 200) {\r\n    console.log(body) // Print the google web page.\r\n  }\r\n})\r\n```\r\n\r\n## Streaming\r\n\r\nYou can stream any response to a file stream.\r\n\r\n```javascript\r\nrequest('http://google.com/doodle.png').pipe(fs.createWriteStream('doodle.png'))\r\n```\r\n\r\nYou can also stream a file to a PUT or POST request. This method will also check the file extension against a mapping of file extensions to content-types (in this case `application/json`) and use the proper `content-type` in the PUT request (if the headers don’t already provide one).\r\n\r\n```javascript\r\nfs.createReadStream('file.json').pipe(request.put('http://mysite.com/obj.json'))\r\n```\r\n\r\nRequest can also `pipe` to itself. When doing so, `content-type` and `content-length` are preserved in the PUT headers.\r\n\r\n```javascript\r\nrequest.get('http://google.com/img.png').pipe(request.put('http://mysite.com/img.png'))\r\n```\r\n\r\nNow let’s get fancy.\r\n\r\n```javascript\r\nhttp.createServer(function (req, resp) {\r\n  if (req.url === '/doodle.png') {\r\n    if (req.method === 'PUT') {\r\n      req.pipe(request.put('http://mysite.com/doodle.png'))\r\n    } else if (req.method === 'GET' || req.method === 'HEAD') {\r\n      request.get('http://mysite.com/doodle.png').pipe(resp)\r\n    }\r\n  }\r\n})\r\n```\r\n\r\nYou can also `pipe()` from `http.ServerRequest` instances, as well as to `http.ServerResponse` instances. The HTTP method, headers, and entity-body data will be sent. Which means that, if you don't really care about security, you can do:\r\n\r\n```javascript\r\nhttp.createServer(function (req, resp) {\r\n  if (req.url === '/doodle.png') {\r\n    var x = request('http://mysite.com/doodle.png')\r\n    req.pipe(x)\r\n    x.pipe(resp)\r\n  }\r\n})\r\n```\r\n\r\nAnd since `pipe()` returns the destination stream in ≥ Node 0.5.x you can do one line proxying. :)\r\n\r\n```javascript\r\nreq.pipe(request('http://mysite.com/doodle.png')).pipe(resp)\r\n```\r\n\r\nAlso, none of this new functionality conflicts with requests previous features, it just expands them.\r\n\r\n```javascript\r\nvar r = request.defaults({'proxy':'http://localproxy.com'})\r\n\r\nhttp.createServer(function (req, resp) {\r\n  if (req.url === '/doodle.png') {\r\n    r.get('http://google.com/doodle.png').pipe(resp)\r\n  }\r\n})\r\n```\r\n\r\nYou can still use intermediate proxies, the requests will still follow HTTP forwards, etc.\r\n\r\n## Forms\r\n\r\n`request` supports `application/x-www-form-urlencoded` and `multipart/form-data` form uploads. For `multipart/related` refer to the `multipart` API.\r\n\r\nURL-encoded forms are simple.\r\n\r\n```javascript\r\nrequest.post('http://service.com/upload', {form:{key:'value'}})\r\n// or\r\nrequest.post('http://service.com/upload').form({key:'value'})\r\n```\r\n\r\nFor `multipart/form-data` we use the [form-data](https://github.com/felixge/node-form-data) library by [@felixge](https://github.com/felixge). You don’t need to worry about piping the form object or setting the headers, `request` will handle that for you.\r\n\r\n```javascript\r\nvar r = request.post('http://service.com/upload')\r\nvar form = r.form()\r\nform.append('my_field', 'my_value')\r\nform.append('my_buffer', new Buffer([1, 2, 3]))\r\nform.append('my_file', fs.createReadStream(path.join(__dirname, 'doodle.png'))\r\nform.append('remote_file', request('http://google.com/doodle.png'))\r\n```\r\n\r\n## HTTP Authentication\r\n\r\n```javascript\r\nrequest.get('http://some.server.com/').auth('username', 'password', false);\r\n// or\r\nrequest.get('http://some.server.com/', {\r\n  'auth': {\r\n    'user': 'username',\r\n    'pass': 'password',\r\n    'sendImmediately': false\r\n  }\r\n});\r\n```\r\n\r\nIf passed as an option, `auth` should be a hash containing values `user` || `username`, `password` || `pass`, and `sendImmediately` (optional).  The method form takes parameters `auth(username, password, sendImmediately)`.\r\n\r\n`sendImmediately` defaults to `true`, which causes a basic authentication header to be sent.  If `sendImmediately` is `false`, then `request` will retry with a proper authentication header after receiving a `401` response from the server (which must contain a `WWW-Authenticate` header indicating the required authentication method).\r\n\r\nDigest authentication is supported, but it only works with `sendImmediately` set to `false`; otherwise `request` will send basic authentication on the initial request, which will probably cause the request to fail.\r\n\r\n## OAuth Signing\r\n\r\n```javascript\r\n// Twitter OAuth\r\nvar qs = require('querystring')\r\n  , oauth =\r\n    { callback: 'http://mysite.com/callback/'\r\n    , consumer_key: CONSUMER_KEY\r\n    , consumer_secret: CONSUMER_SECRET\r\n    }\r\n  , url = 'https://api.twitter.com/oauth/request_token'\r\n  ;\r\nrequest.post({url:url, oauth:oauth}, function (e, r, body) {\r\n  // Ideally, you would take the body in the response\r\n  // and construct a URL that a user clicks on (like a sign in button).\r\n  // The verifier is only available in the response after a user has\r\n  // verified with twitter that they are authorizing your app.\r\n  var access_token = qs.parse(body)\r\n    , oauth =\r\n      { consumer_key: CONSUMER_KEY\r\n      , consumer_secret: CONSUMER_SECRET\r\n      , token: access_token.oauth_token\r\n      , verifier: access_token.oauth_verifier\r\n      }\r\n    , url = 'https://api.twitter.com/oauth/access_token'\r\n    ;\r\n  request.post({url:url, oauth:oauth}, function (e, r, body) {\r\n    var perm_token = qs.parse(body)\r\n      , oauth =\r\n        { consumer_key: CONSUMER_KEY\r\n        , consumer_secret: CONSUMER_SECRET\r\n        , token: perm_token.oauth_token\r\n        , token_secret: perm_token.oauth_token_secret\r\n        }\r\n      , url = 'https://api.twitter.com/1.1/users/show.json?'\r\n      , params =\r\n        { screen_name: perm_token.screen_name\r\n        , user_id: perm_token.user_id\r\n        }\r\n      ;\r\n    url += qs.stringify(params)\r\n    request.get({url:url, oauth:oauth, json:true}, function (e, r, user) {\r\n      console.log(user)\r\n    })\r\n  })\r\n})\r\n```\r\n\r\n### Custom HTTP Headers\r\n\r\nHTTP Headers, such as `User-Agent`, can be set in the `options` object.\r\nIn the example below, we call the github API to find out the number\r\nof stars and forks for the request repository. This requires a\r\ncustom `User-Agent` header as well as https.\r\n\r\n```javascript\r\nvar request = require('request');\r\n\r\nvar options = {\r\n\turl: 'https://api.github.com/repos/mikeal/request',\r\n\theaders: {\r\n\t\t'User-Agent': 'request'\r\n\t}\r\n};\r\n\r\nfunction callback(error, response, body) {\r\n\tif (!error && response.statusCode == 200) {\r\n\t\tvar info = JSON.parse(body);\r\n\t\tconsole.log(info.stargazers_count + \" Stars\");\r\n\t\tconsole.log(info.forks_count + \" Forks\");\r\n\t}\r\n}\r\n\r\nrequest(options, callback);\r\n```\r\n\r\n### request(options, callback)\r\n\r\nThe first argument can be either a `url` or an `options` object. The only required option is `uri`; all others are optional.\r\n\r\n* `uri` || `url` - fully qualified uri or a parsed url object from `url.parse()`\r\n* `qs` - object containing querystring values to be appended to the `uri`\r\n* `method` - http method (default: `\"GET\"`)\r\n* `headers` - http headers (default: `{}`)\r\n* `body` - entity body for PATCH, POST and PUT requests. Must be a `Buffer` or `String`.\r\n* `form` - when passed an object, this sets `body` to a querystring representation of value, and adds `Content-type: application/x-www-form-urlencoded; charset=utf-8` header. When passed no options, a `FormData` instance is returned (and is piped to request).\r\n* `auth` - A hash containing values `user` || `username`, `password` || `pass`, and `sendImmediately` (optional).  See documentation above.\r\n* `json` - sets `body` but to JSON representation of value and adds `Content-type: application/json` header.  Additionally, parses the response body as JSON.\r\n* `multipart` - (experimental) array of objects which contains their own headers and `body` attribute. Sends `multipart/related` request. See example below.\r\n* `followRedirect` - follow HTTP 3xx responses as redirects (default: `true`)\r\n* `followAllRedirects` - follow non-GET HTTP 3xx responses as redirects (default: `false`)\r\n* `maxRedirects` - the maximum number of redirects to follow (default: `10`)\r\n* `encoding` - Encoding to be used on `setEncoding` of response data. If `null`, the `body` is returned as a `Buffer`.\r\n* `pool` - A hash object containing the agents for these requests. If omitted, the request will use the global pool (which is set to node's default `maxSockets`)\r\n* `pool.maxSockets` - Integer containing the maximum amount of sockets in the pool.\r\n* `timeout` - Integer containing the number of milliseconds to wait for a request to respond before aborting the request\r\n* `proxy` - An HTTP proxy to be used. Supports proxy Auth with Basic Auth, identical to support for the `url` parameter (by embedding the auth info in the `uri`)\r\n* `oauth` - Options for OAuth HMAC-SHA1 signing. See documentation above.\r\n* `hawk` - Options for [Hawk signing](https://github.com/hueniverse/hawk). The `credentials` key must contain the necessary signing info, [see hawk docs for details](https://github.com/hueniverse/hawk#usage-example).\r\n* `strictSSL` - If `true`, requires SSL certificates be valid. **Note:** to use your own certificate authority, you need to specify an agent that was created with that CA as an option.\r\n* `jar` - If `true`, remember cookies for future use (or define your custom cookie jar; see examples section)\r\n* `aws` - `object` containing AWS signing information. Should have the properties `key`, `secret`. Also requires the property `bucket`, unless you’re specifying your `bucket` as part of the path, or the request doesn’t use a bucket (i.e. GET Services)\r\n* `httpSignature` - Options for the [HTTP Signature Scheme](https://github.com/joyent/node-http-signature/blob/master/http_signing.md) using [Joyent's library](https://github.com/joyent/node-http-signature). The `keyId` and `key` properties must be specified. See the docs for other options.\r\n* `localAddress` - Local interface to bind for network connections.\r\n\r\n\r\nThe callback argument gets 3 arguments: \r\n\r\n1. An `error` when applicable (usually from [`http.ClientRequest`](http://nodejs.org/api/http.html#http_class_http_clientrequest) object)\r\n2. An [`http.IncomingMessage`](http://nodejs.org/api/http.html#http_http_incomingmessage) object\r\n3. The third is the `response` body (`String` or `Buffer`, or JSON object if the `json` option is supplied)\r\n\r\n## Convenience methods\r\n\r\nThere are also shorthand methods for different HTTP METHODs and some other conveniences.\r\n\r\n### request.defaults(options)\r\n\r\nThis method returns a wrapper around the normal request API that defaults to whatever options you pass in to it.\r\n\r\n### request.put\r\n\r\nSame as `request()`, but defaults to `method: \"PUT\"`.\r\n\r\n```javascript\r\nrequest.put(url)\r\n```\r\n\r\n### request.patch\r\n\r\nSame as `request()`, but defaults to `method: \"PATCH\"`.\r\n\r\n```javascript\r\nrequest.patch(url)\r\n```\r\n\r\n### request.post\r\n\r\nSame as `request()`, but defaults to `method: \"POST\"`.\r\n\r\n```javascript\r\nrequest.post(url)\r\n```\r\n\r\n### request.head\r\n\r\nSame as request() but defaults to `method: \"HEAD\"`.\r\n\r\n```javascript\r\nrequest.head(url)\r\n```\r\n\r\n### request.del\r\n\r\nSame as `request()`, but defaults to `method: \"DELETE\"`.\r\n\r\n```javascript\r\nrequest.del(url)\r\n```\r\n\r\n### request.get\r\n\r\nSame as `request()` (for uniformity).\r\n\r\n```javascript\r\nrequest.get(url)\r\n```\r\n### request.cookie\r\n\r\nFunction that creates a new cookie.\r\n\r\n```javascript\r\nrequest.cookie('cookie_string_here')\r\n```\r\n### request.jar\r\n\r\nFunction that creates a new cookie jar.\r\n\r\n```javascript\r\nrequest.jar()\r\n```\r\n\r\n\r\n## Examples:\r\n\r\n```javascript\r\n  var request = require('request')\r\n    , rand = Math.floor(Math.random()*100000000).toString()\r\n    ;\r\n  request(\r\n    { method: 'PUT'\r\n    , uri: 'http://mikeal.iriscouch.com/testjs/' + rand\r\n    , multipart:\r\n      [ { 'content-type': 'application/json'\r\n        ,  body: JSON.stringify({foo: 'bar', _attachments: {'message.txt': {follows: true, length: 18, 'content_type': 'text/plain' }}})\r\n        }\r\n      , { body: 'I am an attachment' }\r\n      ]\r\n    }\r\n  , function (error, response, body) {\r\n      if(response.statusCode == 201){\r\n        console.log('document saved as: http://mikeal.iriscouch.com/testjs/'+ rand)\r\n      } else {\r\n        console.log('error: '+ response.statusCode)\r\n        console.log(body)\r\n      }\r\n    }\r\n  )\r\n```\r\n\r\nCookies are disabled by default (else, they would be used in subsequent requests). To enable cookies, set `jar` to `true` (either in `defaults` or `options`).\r\n\r\n```javascript\r\nvar request = request.defaults({jar: true})\r\nrequest('http://www.google.com', function () {\r\n  request('http://images.google.com')\r\n})\r\n```\r\n\r\nTo use a custom cookie jar (instead `request`’s global cookie jar), set `jar` to an instance of `request.jar()` (either in `defaults` or `options`)\r\n\r\n```javascript\r\nvar j = request.jar()\r\nvar request = request.defaults({jar:j})\r\nrequest('http://www.google.com', function () {\r\n  request('http://images.google.com')\r\n})\r\n```\r\nOR\r\n\r\nNote that `setCookie` requires at least three parameters, and the last is required to be a callback.\r\n\r\n```javascript\r\nvar j = request.jar()\r\nvar cookie = request.cookie('your_cookie_here')\r\nj.setCookie(cookie, uri, function (err, cookie){})\r\nrequest({url: 'http://www.google.com', jar: j}, function () {\r\n  request('http://images.google.com')\r\n})\r\n```","created_at":"2014-07-25 16:17:13 +0000","updated_at":"2014-07-25 17:31:52 +0000","private":0,"tags":null},{"id":96,"category_id":1,"user_id":9,"title":"CSS ellipsis","description":"CSS ellipsis","content":".truncate{\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    line-height:1.5em;\r\n    text-overflow: ellipsis;\r\n}","created_at":"2014-07-26 00:10:01 +0000","updated_at":"2014-07-26 00:10:01 +0000","private":0,"tags":null},{"id":97,"category_id":14,"user_id":6,"title":"QEventEmitter in Coffeescript","description":"QEventEmitter in Coffeescript","content":"    class QEventEmitter\r\n        constructor:(@_Q,@_eventList=[])->\r\n\r\n        on:(event, listener)->\r\n            if typeof event is \"string\"\r\n                event = { name: event, listener: listener ,priority:0}\r\n            @_eventList.push(event);\r\n\r\n        off:(eventName, listener)->\r\n            @_eventList.filter (el)-> if el.name == eventName and listener then el.listener == listener else true\r\n            .forEach (el)=> @_eventList.splice(@_eventList.indexOf(el), 1)\r\n            return this\r\n\r\n        emit:(eventName,args...)->\r\n            @_eventList.filter  (e)-> e.name is eventName;\r\n            .sort (a, b)-> b.priority - a.priority;\r\n            .reduce(\r\n                ((q, next)-> q.then(next.listener.bind(next.listener, args...))),\r\n                @_Q()\r\n            )\r\n\r\n        once:(eventName, listener)->\r\n            if typeof eventName != \"string\"\r\n                _evName = eventName.name\r\n            else\r\n                _evName = eventName\r\n            _listener = =>\r\n                @off(eventName, listener)\r\n                listener(arguments...)\r\n            @on(eventName, _listener)\r\n\r\n        has:(eventName, listener)->\r\n            @._eventList.some  (event)-> event.name == eventName && event.listener == listener\r\n","created_at":"2014-07-29 16:39:32 +0000","updated_at":"2014-07-29 16:39:32 +0000","private":0,"tags":null},{"id":98,"category_id":31,"user_id":6,"title":"Bootstrap 3 Helper classes","description":"Bootstrap 3 Helper classes","content":"##Helper classes\r\n\r\n###Contextual colors\r\n\r\nConvey meaning through color with a handful of emphasis utility classes. These may also be applied to links and will darken on hover just like our default link styles.\r\n\r\n\r\n    <p class=\"text-muted\">...</p>\r\n    <p class=\"text-primary\">...</p>\r\n    <p class=\"text-success\">...</p>\r\n    <p class=\"text-info\">...</p>\r\n    <p class=\"text-warning\">...</p>\r\n    <p class=\"text-danger\">...</p>\r\n    \r\n###Dealing with specificity\r\n\r\nSometimes emphasis classes cannot be applied due to the specificity of another selector. In most cases, a sufficient workaround is to wrap your text in a <span> with the class.\r\nContextual backgrounds\r\nSimilar to the contextual text color classes, easily set the background of an element to any contextual class. Anchor components will darken on hover, just like the text classes.\r\n\r\n\r\n    <p class=\"bg-primary\">...</p>\r\n    <p class=\"bg-success\">...</p>\r\n    <p class=\"bg-info\">...</p>\r\n    <p class=\"bg-warning\">...</p>\r\n    <p class=\"bg-danger\">...</p>\r\n    \r\n###Dealing with specificity\r\n\r\nSometimes contextual background classes cannot be applied due to the specificity of another selector. In some cases, a sufficient workaround is to wrap your element's content in a <div> with the class.\r\nClose icon\r\nUse the generic close icon for dismissing content like modals and alerts.\r\n\r\n    <button type=\"button\" class=\"close\"><span aria-hidden=\"true\">×</span><span class=\"sr-only\">Close</span></button>\r\n    \r\n###Carets\r\n\r\nUse carets to indicate dropdown functionality and direction. Note that the default caret will reverse automatically in dropup menus.\r\n\r\n\r\n    <span class=\"caret\"></span>\r\n    \r\n###Quick floats\r\n\r\nFloat an element to the left or right with a class. !important is included to avoid specificity issues. Classes can also be used as mixins.\r\n\r\n    <div class=\"pull-left\">...</div>\r\n    <div class=\"pull-right\">...</div>\r\n\r\n\r\n    // Classes\r\n    .pull-left {\r\n      float: left !important;\r\n    }\r\n    .pull-right {\r\n      float: right !important;\r\n    }\r\n\r\n    // Usage as mixins\r\n    .element {\r\n      .pull-left();\r\n    }\r\n    .another-element {\r\n      .pull-right();\r\n    }\r\n    \r\n###Not for use in navbars\r\n\r\nTo align components in navbars with utility classes, use .navbar-left or .navbar-right instead. See the navbar docs for details.\r\n\r\n###Center content blocks\r\n\r\nSet an element to display: block and center via margin. Available as a mixin and class.\r\n\r\n    <div class=\"center-block\">...</div>\r\n    \r\n    // Classes\r\n    .center-block {\r\n      display: block;\r\n      margin-left: auto;\r\n      margin-right: auto;\r\n    }\r\n    \r\n    // Usage as mixins\r\n    .element {\r\n      .center-block();\r\n    }\r\n    \r\n###Clearfix\r\n\r\nEasily clear floats by adding .clearfix to the parent element. Utilizes the micro clearfix as popularized by Nicolas Gallagher. Can also be used as a mixin.\r\n\r\n    <!-- Usage as a class -->\r\n    <div class=\"clearfix\">...</div>\r\n    Copy\r\n    // Mixin itself\r\n    .clearfix() {\r\n      &:before,\r\n      &:after {\r\n        content: \" \";\r\n        display: table;\r\n      }\r\n      &:after {\r\n        clear: both;\r\n      }\r\n    }\r\n    \r\n    // Usage as a Mixin\r\n    .element {\r\n      .clearfix();\r\n    }\r\n    \r\n###Showing and hiding content\r\n\r\nForce an element to be shown or hidden (including for screen readers) with the use of .show and .hidden classes. These classes use !important to avoid specificity conflicts, just like the quick floats. They are only available for block level toggling. They can also be used as mixins.\r\n\r\n.hide is available, but it does not always affect screen readers and is deprecated as of v3.0.1. Use .hidden or .sr-only instead.\r\n\r\nFurthermore, .invisible can be used to toggle only the visibility of an element, meaning its display is not modified and the element can still affect the flow of the document.\r\n\r\n    <div class=\"show\">...</div>\r\n    <div class=\"hidden\">...</div>\r\n\r\n    // Classes\r\n    .show {\r\n      display: block !important;\r\n    }\r\n    .hidden {\r\n      display: none !important;\r\n      visibility: hidden !important;\r\n    }\r\n    .invisible {\r\n      visibility: hidden;\r\n    }\r\n    \r\n    // Usage as mixins\r\n    .element {\r\n      .show();\r\n    }\r\n    .another-element {\r\n      .hidden();\r\n    }\r\n    \r\n###Screen reader and keyboard navigation content\r\n\r\nHide an element to all devices except screen readers with .sr-only. Combine .sr-only with .sr-only-focusable to show the element again when it's focused (e.g. by a keyboard-only user). Necessary for following accessibility best practices. Can also be used as mixins.\r\n\r\n    <a class=\"sr-only sr-only-focusable\" href=\"#content\">Skip to main content</a>\r\n    \r\n    // Usage as a Mixin\r\n    .skip-navigation {\r\n      .sr-only();\r\n      .sr-only-focusable();\r\n    }\r\n    \r\n###Image replacement\r\n    \r\nUtilize the .text-hide class or mixin to help replace an element's text content with a background image.\r\n    \r\n    Copy\r\n    <h1 class=\"text-hide\">Custom heading</h1>\r\n    Copy\r\n    // Usage as a Mixin\r\n    .heading {\r\n      .text-hide();\r\n    }","created_at":"2014-07-31 18:07:26 +0000","updated_at":"2014-08-30 14:02:03 +0000","private":0,"tags":null},{"id":99,"category_id":31,"user_id":6,"title":"Correct way to run nodejs on a existing apache server","description":"Correct way to run nodejs on a existing apache server","content":"There are many websites and free web apps implemented in PHP that run on Apache, lots of people use it so you can mash up something pretty easy and besides, its a no-brainer way of serving static content. Node is fast, powerful, elegant, and a sexy tool with the raw power of V8 and a flat stack with no in-built dependencies. \r\n\r\nI also want the ease/flexibility of Apache and yet the grunt and elegance of Node.JS, *why cant I have both*?\r\n\r\nFortunately with the [ProxyPass](http://httpd.apache.org/docs/2.2/mod/mod_proxy.html#proxypass) directive in the Apache `httpd.conf` its not too hard to pipe all requests on a particular URL to your Node.JS application.\r\n\r\n    ProxyPass /node http://localhost:8000/\r\n\r\nAlso, make sure the following lines are NOT commented out so you get the right proxy and submodule to reroute http requests:\r\n\r\n    LoadModule proxy_module modules/mod_proxy.so\r\n    LoadModule proxy_http_module modules/mod_proxy_http.so\r\n\r\nThen run your Node app on port 8000!\r\n\r\n    var http = require('http');\r\n    http.createServer(function (req, res) {\r\n      res.writeHead(200, {'Content-Type': 'text/plain'});\r\n      res.end('Hello Apache!\\n');\r\n    }).listen(8000, '127.0.0.1');\r\n\r\nThen you can access all Node.JS logic using the `/node/` path on your url, the rest of the website can be left to Apache to host your existing PHP pages:\r\n\r\n![enter image description here][1]\r\n\r\nNow the only thing left is convincing your hosting company let your run with this configuration!!!\r\n\r\n  [1]: http://i.stack.imgur.com/xmjco.png","created_at":"2014-07-31 22:08:10 +0000","updated_at":"2014-07-31 22:08:10 +0000","private":0,"tags":null},{"id":100,"category_id":31,"user_id":6,"title":"Nodejs Stream handbook","description":"Nodejs Stream handbook","content":"# stream-handbook\r\n\r\nThis document covers the basics of how to write [node.js](http://nodejs.org/)\r\nprograms with [streams](http://nodejs.org/docs/latest/api/stream.html).\r\n\r\n[![cc-by-3.0](http://i.creativecommons.org/l/by/3.0/80x15.png)](http://creativecommons.org/licenses/by/3.0/)\r\n\r\n# node packaged manuscript\r\n\r\nYou can install this handbook with npm. Just do:\r\n\r\n```\r\nnpm install -g stream-handbook\r\n```\r\n\r\nNow you will have a `stream-handbook` command that will open this readme file in\r\nyour `$PAGER`. Otherwise, you may continue reading this document as you are\r\npresently doing.\r\n\r\n# introduction\r\n\r\n```\r\n\"We should have some ways of connecting programs like garden hose--screw in\r\nanother segment when it becomes necessary to massage data in\r\nanother way. This is the way of IO also.\"\r\n```\r\n\r\n[Doug McIlroy. October 11, 1964](http://cm.bell-labs.com/who/dmr/mdmpipe.html)\r\n\r\n***\r\n\r\nStreams come to us from the\r\n[earliest days of unix](http://www.youtube.com/watch?v=tc4ROCJYbm0)\r\nand have proven themselves over the decades as a dependable way to compose large\r\nsystems out of small components that\r\n[do one thing well](http://www.faqs.org/docs/artu/ch01s06.html).\r\nIn unix, streams are implemented by the shell with `|` pipes.\r\nIn node, the built-in\r\n[stream module](http://nodejs.org/docs/latest/api/stream.html)\r\nis used by the core libraries and can also be used by user-space modules.\r\nSimilar to unix, the node stream module's primary composition operator is called\r\n`.pipe()` and you get a backpressure mechanism for free to throttle writes for\r\nslow consumers.\r\n\r\nStreams can help to\r\n[separate your concerns](http://www.c2.com/cgi/wiki?SeparationOfConcerns)\r\nbecause they restrict the implementation surface area into a consistent\r\ninterface that can be\r\n[reused](http://www.faqs.org/docs/artu/ch01s06.html#id2877537).\r\nYou can then plug the output of one stream to the input of another and\r\n[use libraries](http://npmjs.org) that operate abstractly on streams to\r\ninstitute higher-level flow control.\r\n\r\nStreams are an important component of\r\n[small-program design](https://michaelochurch.wordpress.com/2012/08/15/what-is-spaghetti-code/)\r\nand [unix philosophy](http://www.faqs.org/docs/artu/ch01s06.html)\r\nbut there are many other important abstractions worth considering.\r\nJust remember that [technical debt](http://c2.com/cgi/wiki?TechnicalDebt)\r\nis the enemy and to seek the best abstractions for the problem at hand.\r\n\r\n***\r\n\r\n# why you should use streams\r\n\r\nI/O in node is asynchronous, so interacting with the disk and network involves\r\npassing callbacks to functions. You might be tempted to write code that serves\r\nup a file from disk like this:\r\n\r\n``` js\r\nvar http = require('http');\r\nvar fs = require('fs');\r\n\r\nvar server = http.createServer(function (req, res) {\r\n    fs.readFile(__dirname + '/data.txt', function (err, data) {\r\n        res.end(data);\r\n    });\r\n});\r\nserver.listen(8000);\r\n```\r\n\r\nThis code works but it's bulky and buffers up the entire `data.txt` file into\r\nmemory for every request before writing the result back to clients. If\r\n`data.txt` is very large, your program could start eating a lot of memory as it\r\nserves lots of users concurrently, particularly for users on slow connections.\r\n\r\nThe user experience is poor too because users will need to wait for the whole\r\nfile to be buffered into memory on your server before they can start receiving\r\nany contents.\r\n\r\nLuckily both of the `(req, res)` arguments are streams, which means we can write\r\nthis in a much better way using `fs.createReadStream()` instead of\r\n`fs.readFile()`:\r\n\r\n``` js\r\nvar http = require('http');\r\nvar fs = require('fs');\r\n\r\nvar server = http.createServer(function (req, res) {\r\n    var stream = fs.createReadStream(__dirname + '/data.txt');\r\n    stream.pipe(res);\r\n});\r\nserver.listen(8000);\r\n```\r\n\r\nHere `.pipe()` takes care of listening for `'data'` and `'end'` events from the\r\n`fs.createReadStream()`. This code is not only cleaner, but now the `data.txt`\r\nfile will be written to clients one chunk at a time immediately as they are\r\nreceived from the disk.\r\n\r\nUsing `.pipe()` has other benefits too, like handling backpressure automatically\r\nso that node won't buffer chunks into memory needlessly when the remote client\r\nis on a really slow or high-latency connection.\r\n\r\nWant compression? There are streaming modules for that too!\r\n\r\n``` js\r\nvar http = require('http');\r\nvar fs = require('fs');\r\nvar oppressor = require('oppressor');\r\n\r\nvar server = http.createServer(function (req, res) {\r\n    var stream = fs.createReadStream(__dirname + '/data.txt');\r\n    stream.pipe(oppressor(req)).pipe(res);\r\n});\r\nserver.listen(8000);\r\n```\r\n\r\nNow our file is compressed for browsers that support gzip or deflate! We can\r\njust let [oppressor](https://github.com/substack/oppressor) handle all that\r\ncontent-encoding stuff.\r\n\r\nOnce you learn the stream api, you can just snap together these streaming\r\nmodules like lego bricks or garden hoses instead of having to remember how to push\r\ndata through wonky non-streaming custom APIs.\r\n\r\nStreams make programming in node simple, elegant, and composable.\r\n\r\n# basics\r\n\r\nThere are 5 kinds of streams: readable, writable, transform, duplex, and\r\n\"classic\".\r\n\r\n## pipe\r\n\r\nAll the different types of streams use `.pipe()` to pair inputs with outputs.\r\n\r\n`.pipe()` is just a function that takes a readable source stream `src` and hooks\r\nthe output to a destination writable stream `dst`:\r\n\r\n```\r\nsrc.pipe(dst)\r\n```\r\n\r\n`.pipe(dst)` returns `dst` so that you can chain together multiple `.pipe()`\r\ncalls together:\r\n\r\n``` js\r\na.pipe(b).pipe(c).pipe(d)\r\n```\r\nwhich is the same as:\r\n\r\n``` js\r\na.pipe(b);\r\nb.pipe(c);\r\nc.pipe(d);\r\n```\r\n\r\nThis is very much like what you might do on the command-line to pipe programs\r\ntogether:\r\n\r\n```\r\na | b | c | d\r\n```\r\n\r\nexcept in node instead of the shell!\r\n\r\n## readable streams\r\n\r\nReadable streams produce data that can be fed into a writable, transform, or\r\nduplex stream by calling `.pipe()`:\r\n\r\n``` js\r\nreadableStream.pipe(dst)\r\n```\r\n\r\n### creating a readable stream\r\n\r\nLet's make a readable stream!\r\n\r\n``` js\r\nvar Readable = require('stream').Readable;\r\n\r\nvar rs = new Readable;\r\nrs.push('beep ');\r\nrs.push('boop\\n');\r\nrs.push(null);\r\n\r\nrs.pipe(process.stdout);\r\n```\r\n\r\n```\r\n$ node read0.js\r\nbeep boop\r\n```\r\n\r\n`rs.push(null)` tells the consumer that `rs` is done outputting data.\r\n\r\nNote here that we pushed content to the readable stream `rs` before piping to\r\n`process.stdout`, but the complete message was still written.\r\n\r\nThis is because when you `.push()` to a readable stream, the chunks you push are\r\nbuffered until a consumer is ready to read them.\r\n\r\nHowever, it would be even better in many circumstances if we could avoid\r\nbuffering data altogether and only generate the data when the consumer asks for\r\nit.\r\n\r\nWe can push chunks on-demand by defining a `._read` function:\r\n\r\n``` js\r\nvar Readable = require('stream').Readable;\r\nvar rs = Readable();\r\n\r\nvar c = 97;\r\nrs._read = function () {\r\n    rs.push(String.fromCharCode(c++));\r\n    if (c > 'z'.charCodeAt(0)) rs.push(null);\r\n};\r\n\r\nrs.pipe(process.stdout);\r\n```\r\n\r\n```\r\n$ node read1.js\r\nabcdefghijklmnopqrstuvwxyz\r\n```\r\n\r\nHere we push the letters `'a'` through `'z'`, inclusive, but only when the\r\nconsumer is ready to read them.\r\n\r\nThe `_read` function will also get a provisional `size` parameter as its first\r\nargument that specifies how many bytes the consumer wants to read, but your\r\nreadable stream can ignore the `size` if it wants.\r\n\r\nNote that you can also use `util.inherits()` to subclass a Readable stream, but\r\nthat approach doesn't lend itself very well to comprehensible examples.\r\n\r\nTo show that our `_read` function is only being called when the consumer\r\nrequests, we can modify our readable stream code slightly to add a delay:\r\n\r\n```\r\nvar Readable = require('stream').Readable;\r\nvar rs = Readable();\r\n\r\nvar c = 97 - 1;\r\n\r\nrs._read = function () {\r\n    if (c >= 'z'.charCodeAt(0)) return rs.push(null);\r\n    \r\n    setTimeout(function () {\r\n        rs.push(String.fromCharCode(++c));\r\n    }, 100);\r\n};\r\n\r\nrs.pipe(process.stdout);\r\n\r\nprocess.on('exit', function () {\r\n    console.error('\\n_read() called ' + (c - 97) + ' times');\r\n});\r\nprocess.stdout.on('error', process.exit);\r\n```\r\n\r\nRunning this program we can see that `_read()` is only called 5 times when we\r\nonly request 5 bytes of output:\r\n\r\n```\r\n$ node read2.js | head -c5\r\nabcde\r\n_read() called 5 times\r\n```\r\n\r\nThe setTimeout delay is necessary because the operating system requires some\r\ntime to send us the relevant signals to close the pipe.\r\n\r\nThe `process.stdout.on('error', fn)` handler is also necessary because the\r\noperating system will send a SIGPIPE to our process when `head` is no longer\r\ninterested in our program's output, which gets emitted as an EPIPE error on\r\n`process.stdout`.\r\n\r\nThese extra complications are necessary when interfacing with the external\r\noperating system pipes but are automatic when we interface directly with node\r\nstreams the whole time.\r\n\r\nIf you want to create a readable stream that pushes arbitrary values instead of\r\njust strings and buffers, make sure to create your readable stream with\r\n`Readable({ objectMode: true })`.\r\n\r\n### consuming a readable stream\r\n\r\nMost of the time it's much easier to just pipe a readable stream into another\r\nkind of stream or a stream created with a module like\r\n[through](https://npmjs.org/package/through)\r\nor [concat-stream](https://npmjs.org/package/concat-stream),\r\nbut occasionally it might be useful to consume a readable stream directly.\r\n\r\n``` js\r\nprocess.stdin.on('readable', function () {\r\n    var buf = process.stdin.read();\r\n    console.dir(buf);\r\n});\r\n```\r\n\r\n```\r\n$ (echo abc; sleep 1; echo def; sleep 1; echo ghi) | node consume0.js \r\n<Buffer 61 62 63 0a>\r\n<Buffer 64 65 66 0a>\r\n<Buffer 67 68 69 0a>\r\nnull\r\n```\r\n\r\nWhen data is available, the `'readable'` event fires and you can call `.read()`\r\nto fetch some data from the buffer.\r\n\r\nWhen the stream is finished, `.read()` returns `null` because there are no more\r\nbytes to fetch.\r\n\r\nYou can also tell `.read(n)` to return `n` bytes of data. Reading a number of\r\nbytes is merely advisory and does not work for object streams, but all of the\r\ncore streams support it.\r\n\r\nHere's an example of using `.read(n)` to buffer stdin into 3-byte chunks:\r\n\r\n``` js\r\nprocess.stdin.on('readable', function () {\r\n    var buf = process.stdin.read(3);\r\n    console.dir(buf);\r\n});\r\n```\r\n\r\nRunning this example gives us incomplete data!\r\n\r\n```\r\n$ (echo abc; sleep 1; echo def; sleep 1; echo ghi) | node consume1.js \r\n<Buffer 61 62 63>\r\n<Buffer 0a 64 65>\r\n<Buffer 66 0a 67>\r\n```\r\n\r\nThis is because there is extra data left in internal buffers and we need to give\r\nnode a \"kick\" to tell it that we are interested in more data past the 3 bytes\r\nthat we've already read. A simple `.read(0)` will do this:\r\n\r\n``` js\r\nprocess.stdin.on('readable', function () {\r\n    var buf = process.stdin.read(3);\r\n    console.dir(buf);\r\n    process.stdin.read(0);\r\n});\r\n```\r\n\r\nNow our code works as expected in 3-byte chunks!\r\n\r\n``` js\r\n$ (echo abc; sleep 1; echo def; sleep 1; echo ghi) | node consume2.js \r\n<Buffer 61 62 63>\r\n<Buffer 0a 64 65>\r\n<Buffer 66 0a 67>\r\n<Buffer 68 69 0a>\r\n```\r\n\r\nYou can also use `.unshift()` to put back data so that the same read logic will\r\nfire when `.read()` gives you more data than you wanted.\r\n\r\nUsing `.unshift()` prevents us from making unnecessary buffer copies. Here we\r\ncan build a readable parser to split on newlines:\r\n\r\n``` js\r\nvar offset = 0;\r\n\r\nprocess.stdin.on('readable', function () {\r\n    var buf = process.stdin.read();\r\n    if (!buf) return;\r\n    for (; offset < buf.length; offset++) {\r\n        if (buf[offset] === 0x0a) {\r\n            console.dir(buf.slice(0, offset).toString());\r\n            buf = buf.slice(offset + 1);\r\n            offset = 0;\r\n            process.stdin.unshift(buf);\r\n            return;\r\n        }\r\n    }\r\n    process.stdin.unshift(buf);\r\n});\r\n```\r\n\r\n```\r\n$ tail -n +50000 /usr/share/dict/american-english | head -n10 | node lines.js \r\n'hearties'\r\n'heartiest'\r\n'heartily'\r\n'heartiness'\r\n'heartiness\\'s'\r\n'heartland'\r\n'heartland\\'s'\r\n'heartlands'\r\n'heartless'\r\n'heartlessly'\r\n```\r\n\r\nHowever, there are modules on npm such as\r\n[split](https://npmjs.org/package/split) that you should use instead of rolling\r\nyour own line-parsing logic.\r\n\r\n## writable streams\r\n\r\nA writable stream is a stream you can `.pipe()` to but not from:\r\n\r\n``` js\r\nsrc.pipe(writableStream)\r\n```\r\n\r\n### creating a writable stream\r\n\r\nJust define a `._write(chunk, enc, next)` function and then you can pipe a\r\nreadable stream in:\r\n\r\n``` js\r\nvar Writable = require('stream').Writable;\r\nvar ws = Writable();\r\nws._write = function (chunk, enc, next) {\r\n    console.dir(chunk);\r\n    next();\r\n};\r\n\r\nprocess.stdin.pipe(ws);\r\n```\r\n\r\n```\r\n$ (echo beep; sleep 1; echo boop) | node write0.js \r\n<Buffer 62 65 65 70 0a>\r\n<Buffer 62 6f 6f 70 0a>\r\n```\r\n\r\nThe first argument, `chunk` is the data that is written by the producer.\r\n\r\nThe second argument `enc` is a string with the string encoding, but only when\r\n`opts.decodeString` is `false` and you've been written a string.\r\n\r\nThe third argument, `next(err)` is the callback that tells the consumer that\r\nthey can write more data. You can optionally pass an error object `err`, which\r\nemits an `'error'` event on the stream instance.\r\n\r\nIf the readable stream you're piping from writes strings, they will be converted\r\ninto `Buffer`s unless you create your writable stream with\r\n`Writable({ decodeStrings: false })`.\r\n\r\nIf the readable stream you're piping from writes objects, create your writable\r\nstream with `Writable({ objectMode: true })`.\r\n\r\n### writing to a writable stream\r\n\r\nTo write to a writable stream, just call `.write(data)` with the `data` you want\r\nto write!\r\n\r\n``` js\r\nprocess.stdout.write('beep boop\\n');\r\n```\r\n\r\nTo tell the destination writable stream that you're done writing, just call\r\n`.end()`. You can also give `.end(data)` some `data` to write before ending:\r\n\r\n``` js\r\nvar fs = require('fs');\r\nvar ws = fs.createWriteStream('message.txt');\r\n\r\nws.write('beep ');\r\n\r\nsetTimeout(function () {\r\n    ws.end('boop\\n');\r\n}, 1000);\r\n```\r\n\r\n```\r\n$ node writing1.js \r\n$ cat message.txt\r\nbeep boop\r\n```\r\n\r\nIf you care about high water marks and buffering, `.write()` returns false when\r\nthere is more data than the `opts.highWaterMark` option passed to `Writable()`\r\nin the incoming buffer.\r\n\r\nIf you want to wait for the buffer to empty again, listen for a `'drain'` event.\r\n\r\n## transform\r\n\r\nTransform streams are\r\n\r\nYou might also hear transform streams referred to as \"through streams\".\r\n\r\nThrough streams are simple readable/writable filters that transform input and\r\nproduce output.\r\n\r\n## duplex\r\n\r\nDuplex streams are readable/writable and both ends of the stream engage\r\nin a two-way interaction, sending back and forth messages like a telephone. An\r\nrpc exchange is a good example of a duplex stream. Any time you see something\r\nlike:\r\n\r\n``` js\r\na.pipe(b).pipe(a)\r\n```\r\n\r\nyou're probably dealing with a duplex stream.\r\n\r\n## classic streams\r\n\r\nClassic streams are the old interface that first appeared in node 0.4.\r\nYou will probably encounter this style of stream for a long time so it's good to\r\nknow how they work.\r\n\r\nWhenever a stream has a `\"data\"` listener registered, it switches into\r\n`\"classic\"` mode and behaves according to the old API.\r\n\r\n### classic readable streams\r\n\r\nClassic readable streams are just event emitters that emit `\"data\"` events when\r\nthey have data for their consumers and emit `\"end\"` events when they are done\r\nproducing data for their consumers.\r\n\r\n`.pipe()` checks whether a classic stream is readable by checking the truthiness\r\nof `stream.readable`.\r\n\r\nHere is a super simple readable stream that prints `A` through `J`, inclusive:\r\n\r\n``` js\r\nvar Stream = require('stream');\r\nvar stream = new Stream;\r\nstream.readable = true;\r\n\r\nvar c = 64;\r\nvar iv = setInterval(function () {\r\n    if (++c >= 75) {\r\n        clearInterval(iv);\r\n        stream.emit('end');\r\n    }\r\n    else stream.emit('data', String.fromCharCode(c));\r\n}, 100);\r\n\r\nstream.pipe(process.stdout);\r\n```\r\n\r\n```\r\n$ node classic0.js\r\nABCDEFGHIJ\r\n```\r\n\r\nTo read from a classic readable stream, you register `\"data\"` and `\"end\"`\r\nlisteners. Here's an example reading from `process.stdin` using the old readable\r\nstream style:\r\n\r\n``` js\r\nprocess.stdin.on('data', function (buf) {\r\n    console.log(buf);\r\n});\r\nprocess.stdin.on('end', function () {\r\n    console.log('__END__');\r\n});\r\n```\r\n\r\n```\r\n$ (echo beep; sleep 1; echo boop) | node classic1.js \r\n<Buffer 62 65 65 70 0a>\r\n<Buffer 62 6f 6f 70 0a>\r\n__END__\r\n```\r\n\r\nNote that whenever you register a `\"data\"` listener, you put the stream into\r\ncompatability mode so you lose the benefits of the new streams2 api.\r\n\r\nYou should pretty much never register `\"data\"` and `\"end\"` handlers yourself\r\nanymore. If you need to interact with legacy streams, use libraries that you can\r\n`.pipe()` to instead where possible.\r\n\r\nFor example, you can use [through](https://npmjs.org/package/through)\r\nto avoid setting up explicit `\"data\"` and `\"end\"` listeners:\r\n\r\n``` js\r\nvar through = require('through');\r\nprocess.stdin.pipe(through(write, end));\r\n\r\nfunction write (buf) {\r\n    console.log(buf);\r\n}\r\nfunction end () {\r\n    console.log('__END__');\r\n}\r\n```\r\n\r\n```\r\n$ (echo beep; sleep 1; echo boop) | node through.js \r\n<Buffer 62 65 65 70 0a>\r\n<Buffer 62 6f 6f 70 0a>\r\n__END__\r\n```\r\n\r\nor use [concat-stream](https://npmjs.org/package/concat-stream) to buffer up an\r\nentire stream's contents:\r\n\r\n``` js\r\nvar concat = require('concat-stream');\r\nprocess.stdin.pipe(concat(function (body) {\r\n    console.log(JSON.parse(body));\r\n}));\r\n```\r\n\r\n```\r\n$ echo '{\"beep\":\"boop\"}' | node concat.js \r\n{ beep: 'boop' }\r\n```\r\n\r\nClassic readable streams have `.pause()` and `.resume()` logic for provisionally\r\npausing a stream, but this was merely advisory. If you are going to use\r\n`.pause()` and `.resume()` with classic readable streams, you should use\r\n[through](https://npmjs.org/package/through) to handle buffering instead of\r\nwriting that yourself.\r\n\r\n### classic writable streams\r\n\r\nClassic writable streams are very simple. Just define `.write(buf)`, `.end(buf)`\r\nand `.destroy()`.\r\n\r\n`.end(buf)` may or may not get a `buf`, but node people will expect `stream.end(buf)`\r\nto mean `stream.write(buf); stream.end()` and you shouldn't violate their\r\nexpectations.\r\n\r\n## read more\r\n\r\n* [core stream documentation](http://nodejs.org/docs/latest/api/stream.html#stream_stream)\r\n* You can use the [readable-stream](https://npmjs.org/package/readable-stream)\r\nmodule to make your streams2 code compliant with node 0.8 and below. Just\r\n`require('readable-stream')` instead of `require('stream')` after you\r\n`npm install readable-stream`.\r\n\r\n***\r\n\r\n# built-in streams\r\n\r\nThese streams are built into node itself.\r\n\r\n## process\r\n\r\n### [process.stdin](http://nodejs.org/docs/latest/api/process.html#process_process_stdin)\r\n\r\nThis readable stream contains the standard system input stream for your program.\r\n\r\nIt is paused by default but the first time you refer to it `.resume()` will be\r\ncalled implicitly on the\r\n[next tick](http://nodejs.org/docs/latest/api/process.html#process_process_nexttick_callback).\r\n\r\nIf process.stdin is a tty (check with\r\n[`tty.isatty()`](http://nodejs.org/docs/latest/api/tty.html#tty_tty_isatty_fd))\r\nthen input events will be line-buffered. You can turn off line-buffering by\r\ncalling `process.stdin.setRawMode(true)` BUT the default handlers for key\r\ncombinations such as `^C` and `^D` will be removed.\r\n\r\n### [process.stdout](http://nodejs.org/api/process.html#process_process_stdout)\r\n\r\nThis writable stream contains the standard system output stream for your program.\r\n\r\n`write` to it if you want to send data to stdout\r\n\r\n### [process.stderr](http://nodejs.org/api/process.html#process_process_stderr)\r\n\r\nThis writable stream contains the standard system error stream for your program.\r\n\r\n`write` to it if you want to send data to stderr\r\n\r\n## child_process.spawn()\r\n\r\n## fs\r\n\r\n### fs.createReadStream()\r\n\r\n### fs.createWriteStream()\r\n\r\n## net\r\n\r\n### [net.connect()](http://nodejs.org/docs/latest/api/net.html#net_net_connect_options_connectionlistener)\r\n\r\nThis function returns a [duplex stream] that connects over tcp to a remote\r\nhost.\r\n\r\nYou can start writing to the stream right away and the writes will be buffered\r\nuntil the `'connect'` event fires.\r\n\r\n### net.createServer()\r\n\r\n## http\r\n\r\n### http.request()\r\n\r\n### http.createServer()\r\n\r\n## zlib\r\n\r\n### zlib.createGzip()\r\n\r\n### zlib.createGunzip()\r\n\r\n### zlib.createDeflate()\r\n\r\n### zlib.createInflate()\r\n\r\n***\r\n\r\n# control streams\r\n\r\n## [through](https://github.com/dominictarr/through)\r\n\r\n## [from](https://github.com/dominictarr/from)\r\n\r\n## [pause-stream](https://github.com/dominictarr/pause-stream)\r\n\r\n## [concat-stream](https://github.com/maxogden/node-concat-stream)\r\n\r\nconcat-stream will buffer up stream contents into a single buffer.\r\n`concat(cb)` just takes a single callback `cb(body)` with the buffered\r\n`body` when the stream has finished.\r\n\r\nFor example, in this program, the concat callback fires with the body string\r\n`\"beep boop\"` once `cs.end()` is called.\r\nThe program takes the body and upper-cases it, printing `BEEP BOOP.`\r\n\r\n``` js\r\nvar concat = require('concat-stream');\r\n\r\nvar cs = concat(function (body) {\r\n    console.log(body.toUpperCase());\r\n});\r\ncs.write('beep ');\r\ncs.write('boop.');\r\ncs.end();\r\n```\r\n\r\n```\r\n$ node concat.js\r\nBEEP BOOP.\r\n```\r\n\r\nHere's an example usage of concat-stream that will parse incoming url-encoded\r\nform data and reply with a stringified JSON version of the form parameters:\r\n\r\n``` js\r\nvar http = require('http');\r\nvar qs = require('querystring');\r\nvar concat = require('concat-stream');\r\n\r\nvar server = http.createServer(function (req, res) {\r\n    req.pipe(concat(function (body) {\r\n        var params = qs.parse(body.toString());\r\n        res.end(JSON.stringify(params) + '\\n');\r\n    }));\r\n});\r\nserver.listen(5005);\r\n```\r\n\r\n```\r\n$ curl -X POST -d 'beep=boop&dinosaur=trex' http://localhost:5005\r\n{\"beep\":\"boop\",\"dinosaur\":\"trex\"}\r\n```\r\n\r\n## [duplex](https://github.com/dominictarr/duplex)\r\n\r\n## [duplexer](https://github.com/Raynos/duplexer)\r\n\r\n## [emit-stream](https://github.com/substack/emit-stream)\r\n\r\n## [invert-stream](https://github.com/dominictarr/invert-stream)\r\n\r\n## [map-stream](https://github.com/dominictarr/map-stream)\r\n\r\n## [remote-events](https://github.com/dominictarr/remote-events)\r\n\r\n## [buffer-stream](https://github.com/Raynos/buffer-stream)\r\n\r\n## [event-stream](https://github.com/dominictarr/event-stream)\r\n\r\n## [auth-stream](https://github.com/Raynos/auth-stream)\r\n\r\n***\r\n\r\n# meta streams\r\n\r\n## [mux-demux](https://github.com/dominictarr/mux-demux)\r\n\r\n## [stream-router](https://github.com/Raynos/stream-router)\r\n\r\n## [multi-channel-mdm](https://github.com/Raynos/multi-channel-mdm)\r\n\r\n***\r\n\r\n# state streams\r\n\r\n## [crdt](https://github.com/dominictarr/crdt)\r\n\r\n## [delta-stream](https://github.com/Raynos/delta-stream)\r\n\r\n## [scuttlebutt](https://github.com/dominictarr/scuttlebutt)\r\n\r\n[scuttlebutt](https://github.com/dominictarr/scuttlebutt) can be used for\r\npeer-to-peer state synchronization with a mesh topology where nodes might only\r\nbe connected through intermediaries and there is no node with an authoritative\r\nversion of all the data.\r\n\r\nThe kind of distributed peer-to-peer network that\r\n[scuttlebutt](https://github.com/dominictarr/scuttlebutt) provides is especially\r\nuseful when nodes on different sides of network barriers need to share and\r\nupdate the same state. An example of this kind of network might be browser\r\nclients that send messages through an http server to each other and backend\r\nprocesses that the browsers can't directly connect to. Another use-case might be\r\nsystems that span internal networks since IPv4 addresses are scarce.\r\n\r\n[scuttlebutt](https://github.com/dominictarr/scuttlebutt) uses a\r\n[gossip protocol](https://en.wikipedia.org/wiki/Gossip_protocol)\r\nto pass messages between connected nodes so that state across all the nodes will\r\n[eventually converge](https://en.wikipedia.org/wiki/Eventual_consistency)\r\non the same value everywhere.\r\n\r\nUsing the `scuttlebutt/model` interface, we can create some nodes and pipe them\r\nto each other to create whichever sort of network we want:\r\n\r\n``` js\r\nvar Model = require('scuttlebutt/model');\r\nvar am = new Model;\r\nvar as = am.createStream();\r\n\r\nvar bm = new Model;\r\nvar bs = bm.createStream();\r\n\r\nvar cm = new Model;\r\nvar cs = cm.createStream();\r\n\r\nvar dm = new Model;\r\nvar ds = dm.createStream();\r\n\r\nvar em = new Model;\r\nvar es = em.createStream();\r\n\r\nas.pipe(bs).pipe(as);\r\nbs.pipe(cs).pipe(bs);\r\nbs.pipe(ds).pipe(bs);\r\nds.pipe(es).pipe(ds);\r\n\r\nem.on('update', function (key, value, source) {\r\n    console.log(key + ' => ' + value + ' from ' + source);\r\n});\r\n\r\nam.set('x', 555);\r\n```\r\n\r\nThe network we've created is an undirected graph that looks like:\r\n\r\n```\r\na <-> b <-> c\r\n      ^\r\n      |\r\n      v\r\n      d <-> e\r\n```\r\n\r\nNote that nodes `a` and `e` aren't directly connected, but when we run this\r\nscript:\r\n\r\n```\r\n$ node model.js\r\nx => 555 from 1347857300518\r\n```\r\n\r\nthe value that node `a` set finds its way to node `e` by way of nodes `b` and\r\n`d`. Here all the nodes are in the same process but because\r\n[scuttlebutt](https://github.com/dominictarr/scuttlebutt) uses a\r\nsimple streaming interface, the nodes can be placed on any process or server and\r\nconnected with any streaming transport that can handle string data.\r\n\r\nNext we can make a more realistic example that connects over the network and\r\nincrements a counter variable.\r\n\r\nHere's the server which will set the initial `count` value to 0 and `count ++`\r\nevery 320 milliseconds, printing all updates to count:\r\n\r\n``` js\r\nvar Model = require('scuttlebutt/model');\r\nvar net = require('net');\r\n\r\nvar m = new Model;\r\nm.set('count', '0');\r\nm.on('update', function (key, value) {\r\n    console.log(key + ' = ' + m.get('count'));\r\n});\r\n\r\nvar server = net.createServer(function (stream) {\r\n    stream.pipe(m.createStream()).pipe(stream);\r\n});\r\nserver.listen(8888);\r\n\r\nsetInterval(function () {\r\n    m.set('count', Number(m.get('count')) + 1);\r\n}, 320);\r\n```\r\n\r\nNow we can make a client that connects to this server, updates the count on an\r\ninterval, and prints all the updates it receives:\r\n\r\n``` js\r\nvar Model = require('scuttlebutt/model');\r\nvar net = require('net');\r\n\r\nvar m = new Model;\r\nvar s = m.createStream();\r\n\r\ns.pipe(net.connect(8888, 'localhost')).pipe(s);\r\n\r\nm.on('update', function cb (key) {\r\n    // wait until we've gotten at least one count value from the network\r\n    if (key !== 'count') return;\r\n    m.removeListener('update', cb);\r\n    \r\n    setInterval(function () {\r\n        m.set('count', Number(m.get('count')) + 1);\r\n    }, 100);\r\n});\r\n\r\nm.on('update', function (key, value) {\r\n    console.log(key + ' = ' + value);\r\n});\r\n```\r\n\r\nThe client is slightly trickier since it should wait until it has an update from\r\nsomebody else to start updating the counter itself or else its counter would be\r\nzeroed.\r\n\r\nOnce we get the server and some clients running we should see a sequence like this:\r\n\r\n```\r\ncount = 183\r\ncount = 184\r\ncount = 185\r\ncount = 186\r\ncount = 187\r\ncount = 188\r\ncount = 189\r\n```\r\n\r\nOccasionally on some of the nodes we might see a sequence with repeated values like:\r\n\r\n```\r\ncount = 147\r\ncount = 148\r\ncount = 149\r\ncount = 149\r\ncount = 150\r\ncount = 151\r\n```\r\n\r\nThese values are due to\r\n[scuttlebutt's](https://github.com/dominictarr/scuttlebutt)\r\nhistory-based conflict resolution algorithm which is hard at work ensuring that the state of the system across all nodes is eventually consistent.\r\n\r\nNote that the server in this example is just another node with the same\r\nprivledges as the clients connected to it. The terms \"client\" and \"server\" here\r\ndon't affect how the state synchronization proceeds, just who initiates the\r\nconnection. Protocols with this property are often called symmetric protocols.\r\nSee [dnode](https://github.com/substack/dnode) for another example of a\r\nsymmetric protocol.\r\n\r\n## [append-only](http://github.com/Raynos/append-only)\r\n\r\n***\r\n\r\n# http streams\r\n\r\n## [request](https://github.com/mikeal/request)\r\n\r\n## [oppressor](https://github.com/substack/oppressor)\r\n\r\n## [response-stream](https://github.com/substack/response-stream)\r\n\r\n***\r\n\r\n# io streams\r\n\r\n## [reconnect](https://github.com/dominictarr/reconnect)\r\n\r\n## [kv](https://github.com/dominictarr/kv)\r\n\r\n## [discovery-network](https://github.com/Raynos/discovery-network)\r\n\r\n***\r\n\r\n# parser streams\r\n\r\n## [tar](https://github.com/creationix/node-tar)\r\n\r\n## [trumpet](https://github.com/substack/node-trumpet)\r\n\r\n## [JSONStream](https://github.com/dominictarr/JSONStream)\r\n\r\nUse this module to parse and stringify json data from streams.\r\n\r\nIf you need to pass a large json collection through a slow connection or you\r\nhave a json object that will populate slowly this module will let you parse data\r\nincrementally as it arrives.\r\n\r\n## [json-scrape](https://github.com/substack/json-scrape)\r\n\r\n## [stream-serializer](https://github.com/dominictarr/stream-serializer)\r\n\r\n***\r\n\r\n# browser streams\r\n\r\n## [shoe](https://github.com/substack/shoe)\r\n\r\n## [domnode](https://github.com/maxogden/domnode)\r\n\r\n## [sorta](https://github.com/substack/sorta)\r\n\r\n## [graph-stream](https://github.com/substack/graph-stream)\r\n\r\n## [arrow-keys](https://github.com/Raynos/arrow-keys)\r\n\r\n## [attribute](https://github.com/Raynos/attribute)\r\n\r\n## [data-bind](https://github.com/travis4all/data-bind)\r\n\r\n***\r\n\r\n# html streams\r\n\r\n## [hyperstream](https://github.com/substack/hyperstream)\r\n\r\n\r\n# audio streams\r\n\r\n## [baudio](https://github.com/substack/baudio)\r\n\r\n# rpc streams\r\n\r\n## [dnode](https://github.com/substack/dnode)\r\n\r\n[dnode](https://github.com/substack/dnode) lets you call remote functions\r\nthrough any kind of stream.\r\n\r\nHere's a basic dnode server:\r\n\r\n``` js\r\nvar dnode = require('dnode');\r\nvar net = require('net');\r\n\r\nvar server = net.createServer(function (c) {\r\n    var d = dnode({\r\n        transform : function (s, cb) {\r\n            cb(s.replace(/[aeiou]{2,}/, 'oo').toUpperCase())\r\n        }\r\n    });\r\n    c.pipe(d).pipe(c);\r\n});\r\n\r\nserver.listen(5004);\r\n```\r\n\r\nthen you can hack up a simple client that calls the server's `.transform()`\r\nfunction:\r\n\r\n``` js\r\nvar dnode = require('dnode');\r\nvar net = require('net');\r\n\r\nvar d = dnode();\r\nd.on('remote', function (remote) {\r\n    remote.transform('beep', function (s) {\r\n        console.log('beep => ' + s);\r\n        d.end();\r\n    });\r\n});\r\n\r\nvar c = net.connect(5004);\r\nc.pipe(d).pipe(c);\r\n```\r\n\r\nFire up the server, then when you run the client you should see:\r\n\r\n```\r\n$ node client.js\r\nbeep => BOOP\r\n```\r\n\r\nThe client sent `'beep'` to the server's `transform()` function and the server\r\ncalled the client's callback with the result, neat!\r\n\r\nThe streaming interface that dnode provides here is a duplex stream since both\r\nthe client and server are piped to each other (`c.pipe(d).pipe(c)`) with\r\nrequests and responses coming from both sides.\r\n\r\nThe craziness of dnode begins when you start to pass function arguments to\r\nstubbed callbacks. Here's an updated version of the previous server with a\r\nmulti-stage callback passing dance:\r\n\r\n``` js\r\nvar dnode = require('dnode');\r\nvar net = require('net');\r\n\r\nvar server = net.createServer(function (c) {\r\n    var d = dnode({\r\n        transform : function (s, cb) {\r\n            cb(function (n, fn) {\r\n                var oo = Array(n+1).join('o');\r\n                fn(s.replace(/[aeiou]{2,}/, oo).toUpperCase());\r\n            });\r\n        }\r\n    });\r\n    c.pipe(d).pipe(c);\r\n});\r\n\r\nserver.listen(5004);\r\n```\r\n\r\nHere's the updated client:\r\n\r\n``` js\r\nvar dnode = require('dnode');\r\nvar net = require('net');\r\n\r\nvar d = dnode();\r\nd.on('remote', function (remote) {\r\n    remote.transform('beep', function (cb) {\r\n        cb(10, function (s) {\r\n            console.log('beep:10 => ' + s);\r\n            d.end();\r\n        });\r\n    });\r\n});\r\n\r\nvar c = net.connect(5004);\r\nc.pipe(d).pipe(c);\r\n```\r\n\r\nAfter we spin up the server, when we run the client now we get:\r\n\r\n```\r\n$ node client.js\r\nbeep:10 => BOOOOOOOOOOP\r\n```\r\n\r\nIt just works!™\r\n\r\nThe basic idea is that you just put functions in objects and you call them from\r\nthe other side of a stream and the functions will be stubbed out on the other\r\nend to do a round-trip back to the side that had the original function in the\r\nfirst place. The best thing is that when you pass functions to a stubbed\r\nfunction as arguments, those functions get stubbed out on the *other* side!\r\n\r\nThis approach of stubbing function arguments recursively shall henceforth be\r\nknown as the \"turtles all the way down\" gambit. The return values of any of your\r\nfunctions will be ignored and only enumerable properties on objects will be\r\nsent, json-style.\r\n\r\nIt's turtles all the way down!\r\n\r\nSince dnode works in node or on the browser over any stream it's easy to call\r\nfunctions defined anywhere and especially useful when paired up with\r\n[mux-demux](https://github.com/dominictarr/mux-demux) to multiplex an rpc stream\r\nfor control alongside some bulk data streams.\r\n\r\n## [rpc-stream](https://github.com/dominictarr/rpc-stream)\r\n\r\n***\r\n\r\n# test streams\r\n\r\n## [tap](https://github.com/isaacs/node-tap)\r\n\r\n## [stream-spec](https://github.com/dominictarr/stream-spec)\r\n\r\n***\r\n\r\n# power combos\r\n\r\n## distributed partition-tolerant chat\r\n\r\nThe [append-only](http://github.com/Raynos/append-only) module can give us a\r\nconvenient append-only array on top of\r\n[scuttlebutt](https://github.com/dominictarr/scuttlebutt)\r\nwhich makes it really easy to write an eventually-consistent, distributed chat\r\nthat can replicate with other nodes and survive network partitions.\r\n\r\nTODO: the rest\r\n\r\n## roll your own socket.io\r\n\r\nWe can build a socket.io-style event emitter api over streams using some of the\r\nlibraries mentioned earlier in this document.\r\n\r\nFirst  we can use [shoe](http://github.com/substack/shoe)\r\nto create a new websocket handler server-side and\r\n[emit-stream](https://github.com/substack/emit-stream)\r\nto turn an event emitter into a stream that emits objects.\r\nThe object stream can then be fed into\r\n[JSONStream](https://github.com/dominictarr/JSONStream)\r\nto serialize the objects and from there the serialized stream can be piped into\r\nthe remote browser.\r\n\r\n``` js\r\nvar EventEmitter = require('events').EventEmitter;\r\nvar shoe = require('shoe');\r\nvar emitStream = require('emit-stream');\r\nvar JSONStream = require('JSONStream');\r\n\r\nvar sock = shoe(function (stream) {\r\n    var ev = new EventEmitter;\r\n    emitStream(ev)\r\n        .pipe(JSONStream.stringify())\r\n        .pipe(stream)\r\n    ;\r\n    ...\r\n});\r\n```\r\n\r\nInside the shoe callback we can emit events to the `ev` function.  Here we'll\r\njust emit different kinds of events on intervals:\r\n\r\n``` js\r\nvar intervals = [];\r\n\r\nintervals.push(setInterval(function () {\r\n    ev.emit('upper', 'abc');\r\n}, 500));\r\n\r\nintervals.push(setInterval(function () {\r\n    ev.emit('lower', 'def');\r\n}, 300));\r\n\r\nstream.on('end', function () {\r\n    intervals.forEach(clearInterval);\r\n});\r\n```\r\n\r\nFinally the shoe instance just needs to be bound to an http server:\r\n\r\n``` js\r\nvar http = require('http');\r\nvar server = http.createServer(require('ecstatic')(__dirname));\r\nserver.listen(8080);\r\n\r\nsock.install(server, '/sock');\r\n```\r\n\r\nMeanwhile on the browser side of things just parse the json shoe stream and pass\r\nthe resulting object stream to `eventStream()`. `eventStream()` just returns an\r\nevent emitter that emits the server-side events:\r\n\r\n``` js\r\nvar shoe = require('shoe');\r\nvar emitStream = require('emit-stream');\r\nvar JSONStream = require('JSONStream');\r\n\r\nvar parser = JSONStream.parse([true]);\r\nvar stream = parser.pipe(shoe('/sock')).pipe(parser);\r\nvar ev = emitStream(stream);\r\n\r\nev.on('lower', function (msg) {\r\n    var div = document.createElement('div');\r\n    div.textContent = msg.toLowerCase();\r\n    document.body.appendChild(div);\r\n});\r\n\r\nev.on('upper', function (msg) {\r\n    var div = document.createElement('div');\r\n    div.textContent = msg.toUpperCase();\r\n    document.body.appendChild(div);\r\n});\r\n```\r\n\r\nUse [browserify](https://github.com/substack/node-browserify) to build this\r\nbrowser source code so that you can `require()` all these nifty modules\r\nbrowser-side:\r\n\r\n```\r\n$ browserify main.js -o bundle.js\r\n```\r\n\r\nThen drop a `<script src=\"/bundle.js\"></script>` into some html and open it up\r\nin a browser to see server-side events streamed through to the browser side of\r\nthings.\r\n\r\nWith this streaming approach you can rely more on tiny reusable components that\r\nonly need to know how to talk streams. Instead of routing messages through a\r\nglobal event system socket.io-style, you can focus more on breaking up your\r\napplication into tinier units of functionality that can do exactly one thing\r\nwell.\r\n\r\nFor instance you can trivially swap out JSONStream in this example for\r\n[stream-serializer](https://github.com/dominictarr/stream-serializer)\r\nto get a different take on serialization with a different set of tradeoffs.\r\nYou could bolt layers over top of shoe to handle\r\n[reconnections](https://github.com/dominictarr/reconnect) or heartbeats\r\nusing simple streaming interfaces.\r\nYou could even add a stream into the chain to use namespaced events with\r\n[eventemitter2](https://npmjs.org/package/eventemitter2) instead of the\r\nEventEmitter in core.\r\n\r\nIf you want some different streams that act in different ways it would likewise\r\nbe pretty simple to run the shoe stream in this example through mux-demux to\r\ncreate separate channels for each different kind of stream that you need.\r\n\r\nAs the requirements of your system evolve over time, you can swap out each of\r\nthese streaming pieces as necessary without as many of the all-or-nothing risks\r\nthat more opinionated framework approaches necessarily entail.\r\n\r\n## html streams for the browser and the server\r\n\r\nWe can use some streaming modules to reuse the same html rendering logic for the\r\nclient and the server! This approach is indexable, SEO-friendly, and gives us\r\nrealtime updates.\r\n\r\nOur renderer takes lines of json as input and returns html strings as its\r\noutput. Text, the universal interface!\r\n\r\nrender.js:\r\n\r\n``` js\r\nvar through = require('through');\r\nvar hyperglue = require('hyperglue');\r\nvar fs = require('fs');\r\nvar html = fs.readFileSync(__dirname + '/static/row.html');\r\n\r\nmodule.exports = function () {\r\n    return through(function (line) {\r\n        try { var row = JSON.parse(line) }\r\n        catch (err) { return this.emit('error', err) }\r\n        \r\n        this.queue(hyperglue(html, {\r\n            '.who': row.who,\r\n            '.message': row.message\r\n        }).outerHTML);\r\n    });\r\n};\r\n```\r\n\r\nWe can use [brfs](http://github.com/substack/brfs) to inline the\r\n`fs.readFileSync()` call for browser code\r\nand [hyperglue](https://github.com/substack/hyperglue) to update html based on\r\ncss selectors. You don't need to use hyperglue necessarily here; anything that\r\ncan return a string with html in it will work.\r\n\r\nThe `row.html` used is just a really simple stub thing:\r\n\r\nrow.html:\r\n\r\n``` html\r\n<div class=\"row\">\r\n  <div class=\"who\"></div>\r\n  <div class=\"message\"></div>\r\n</div>\r\n```\r\n\r\nThe server will just use [slice-file](https://github.com/substack/slice-file) to\r\nkeep everything simple. [slice-file](https://github.com/substack/slice-file) is\r\nlittle more than a glorified `tail/tail -f` api but the interfaces map well to\r\ndatabases with regular results plus a changes feed like couchdb.\r\n\r\nserver.js:\r\n\r\n``` js\r\nvar http = require('http');\r\nvar fs = require('fs');\r\nvar hyperstream = require('hyperstream');\r\nvar ecstatic = require('ecstatic')(__dirname + '/static');\r\n\r\nvar sliceFile = require('slice-file');\r\nvar sf = sliceFile(__dirname + '/data.txt');\r\n\r\nvar render = require('./render');\r\n\r\nvar server = http.createServer(function (req, res) {\r\n    if (req.url === '/') {\r\n        var hs = hyperstream({\r\n            '#rows': sf.slice(-5).pipe(render())\r\n        });\r\n        hs.pipe(res);\r\n        fs.createReadStream(__dirname + '/static/index.html').pipe(hs);\r\n    }\r\n    else ecstatic(req, res)\r\n});\r\nserver.listen(8000);\r\n\r\nvar shoe = require('shoe');\r\nvar sock = shoe(function (stream) {\r\n    sf.follow(-1,0).pipe(stream);\r\n});\r\nsock.install(server, '/sock');\r\n```\r\n\r\nThe first part of the server handles the `/` route and streams the last 5 lines\r\nfrom `data.txt` into the `#rows` div.\r\n\r\nThe second part of the server handles realtime updates to `#rows` using\r\n[shoe](http://github.com/substack/shoe), a simple streaming websocket polyfill.\r\n\r\nNext we can write some simple browser code to populate the realtime updates\r\nfrom [shoe](http://github.com/substack/shoe) into the `#rows` div:\r\n\r\n``` js\r\nvar through = require('through');\r\nvar render = require('./render');\r\n\r\nvar shoe = require('shoe');\r\nvar stream = shoe('/sock');\r\n\r\nvar rows = document.querySelector('#rows');\r\nstream.pipe(render()).pipe(through(function (html) {\r\n    rows.innerHTML += html;\r\n}));\r\n```\r\n\r\nJust compile with [browserify](http://browserify.org) and\r\n[brfs](http://github.com/substack/brfs):\r\n\r\n```\r\n$ browserify -t brfs browser.js > static/bundle.js\r\n```\r\n\r\nAnd that's it! Now we can populate `data.txt` with some silly data:\r\n\r\n```\r\n$ echo '{\"who\":\"substack\",\"message\":\"beep boop.\"}' >> data.txt\r\n$ echo '{\"who\":\"zoltar\",\"message\":\"COWER PUNY HUMANS\"}' >> data.txt\r\n```\r\n\r\nthen spin up the server:\r\n\r\n```\r\n$ node server.js\r\n```\r\n\r\nthen navigate to `localhost:8000` where we will see our content. If we add some\r\nmore content:\r\n\r\n```\r\n$ echo '{\"who\":\"substack\",\"message\":\"oh hello.\"}' >> data.txt\r\n$ echo '{\"who\":\"zoltar\",\"message\":\"HEAR ME!\"}' >> data.txt\r\n```\r\n\r\nthen the page updates automatically with the realtime updates, hooray!\r\n\r\nWe're now using exactly the same rendering logic on both the client and the\r\nserver to serve up SEO-friendly, indexable realtime content. Hooray!","created_at":"2014-08-01 08:08:52 +0000","updated_at":"2014-08-01 08:10:48 +0000","private":0,"tags":null},{"id":101,"category_id":2,"user_id":6,"title":"firewall with express and virgen-acl on nodejs","description":"firewall with express and virgen-acl on nodejs","content":" middlewares.firewall =(req,res,next)->\r\n            # test current route against acl\r\n            {path} = req.app._router.match(req.method,req.originalUrl) or {}\r\n            c.acl.query (req.isAuthenticated() and req.user),c.resources.ROUTE,path,(err,isAllowed)->\r\n                if isAllowed is true then next()\r\n                else if not req.isAuthenticated()\r\n                    res.redirect('/login')\r\n                else next(err or (path and c.errors.Forbidden(\"Forbidden : User '#{req.user}' with role '#{req.user.role}' tried to access #{req.originalUrl}\")) or c.errors.NotFound(\"url #{req.originalUrl} not found \"))\r\n","created_at":"2014-08-02 12:49:11 +0000","updated_at":"2014-08-02 12:49:11 +0000","private":0,"tags":null},{"id":102,"category_id":2,"user_id":6,"title":"Using restify with express","description":"Using restify with express","content":"var express = require('express'),\r\n    restify = require('restify'),\r\n    expressApp = express(),\r\n    restifyApp = restify.createServer();\r\n\r\nexpressApp.use('/api', restifyApp); // use your restify server as a handler in express\r\nexpressApp.get('/', homePage);\r\n\r\nexpressApp.listen(8000);","created_at":"2014-08-02 14:22:04 +0000","updated_at":"2014-08-30 14:09:08 +0000","private":0,"tags":null},{"id":103,"category_id":2,"user_id":6,"title":"Twitter OAuth with node-oauth for node.js+express","description":"Twitter OAuth with node-oauth for node.js+express\r\n","content":"/* \r\n    Node.js, express, oauth example using Twitters API\r\n    \r\n    Install Node.js:\r\n        curl -0 http://nodejs.org/dist/v0.6.11/node-v0.6.11.tar.gz\r\n        tar -zxf node-v0.6.11.tar.gz\r\n        cd node-v0.6.11\r\n        ./configure\r\n        make\r\n        make install\r\n    \r\n    Install Dependencies:\r\n        npm install express\r\n        npm install oauth\r\n    \r\n    Create App File:\r\n        Save this file to app.js\r\n    \r\n    Start Server:\r\n        node app.js\r\n    \r\n    Navigate to the page:\r\n        Local host: http://127.0.0.1:8080\r\n        Remote host: http://yourserver.com:8080\r\n    \r\n*/\r\n\r\nvar express = require('express');\r\nvar util = require('util');\r\nvar oauth = require('oauth');\r\n\r\nvar app = express.createServer();\r\n\r\n// Get your credentials here: https://dev.twitter.com/apps\r\nvar _twitterConsumerKey = \"twitterConsumerKey\";\r\nvar _twitterConsumerSecret = \"twitterConsumerSecret\";\r\n\r\nvar consumer = new oauth.OAuth(\r\n    \"https://twitter.com/oauth/request_token\", \"https://twitter.com/oauth/access_token\", \r\n    _twitterConsumerKey, _twitterConsumerSecret, \"1.0A\", \"http://127.0.0.1:8080/sessions/callback\", \"HMAC-SHA1\");\r\n\r\napp.configure('development', function(){\r\n    app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));\r\n    app.use(express.logger());\r\n    app.use(express.cookieParser());\r\n    app.use(express.session({ secret: \"very secret\" }));\r\n});\r\n\r\napp.dynamicHelpers({\r\n    session: function(req, res){\r\n        return req.session;\r\n    }\r\n});\r\n\r\napp.get('/sessions/connect', function(req, res){\r\n  consumer.getOAuthRequestToken(function(error, oauthToken, oauthTokenSecret, results){\r\n    if (error) {\r\n      res.send(\"Error getting OAuth request token : \" + util.inspect(error), 500);\r\n    } else {  \r\n      req.session.oauthRequestToken = oauthToken;\r\n      req.session.oauthRequestTokenSecret = oauthTokenSecret;\r\n      res.redirect(\"https://twitter.com/oauth/authorize?oauth_token=\"+req.session.oauthRequestToken);      \r\n    }\r\n  });\r\n});\r\n\r\napp.get('/sessions/callback', function(req, res){\r\n  util.puts(\">>\"+req.session.oauthRequestToken);\r\n  util.puts(\">>\"+req.session.oauthRequestTokenSecret);\r\n  util.puts(\">>\"+req.query.oauth_verifier);\r\n  consumer.getOAuthAccessToken(req.session.oauthRequestToken, req.session.oauthRequestTokenSecret, req.query.oauth_verifier, function(error, oauthAccessToken, oauthAccessTokenSecret, results) {\r\n    if (error) {\r\n      res.send(\"Error getting OAuth access token : \" + util.inspect(error) + \"[\"+oauthAccessToken+\"]\"+ \"[\"+oauthAccessTokenSecret+\"]\"+ \"[\"+util.inspect(results)+\"]\", 500);\r\n    } else {\r\n      req.session.oauthAccessToken = oauthAccessToken;\r\n      req.session.oauthAccessTokenSecret = oauthAccessTokenSecret;\r\n      \r\n      res.redirect('/home');\r\n    }\r\n  });\r\n});\r\n\r\napp.get('/home', function(req, res){\r\n    consumer.get(\"http://twitter.com/account/verify_credentials.json\", req.session.oauthAccessToken, req.session.oauthAccessTokenSecret, function (error, data, response) {\r\n      if (error) {\r\n          res.redirect('/sessions/connect');\r\n          // res.send(\"Error getting twitter screen name : \" + util.inspect(error), 500);\r\n      } else {\r\n          var parsedData = JSON.parse(data);\r\n\r\n        // req.session.twitterScreenName = response.screen_name;    \r\n        res.send('You are signed in: ' + parsedData.screen_name);\r\n      } \r\n    });\r\n});\r\n\r\napp.get('*', function(req, res){\r\n    res.redirect('/home');\r\n});\r\n\r\napp.listen(8080);","created_at":"2014-08-02 14:31:02 +0000","updated_at":"2014-08-02 14:31:02 +0000","private":0,"tags":null},{"id":105,"category_id":31,"user_id":6,"title":"Bootstrap 3 input groups","description":"Bootstrap 3 input groups","content":"##Input groups\r\n\r\nExtend form controls by adding text or buttons before, after, or on both sides of any text-based input. Use .input-group with an .input-group-addon to prepend or append elements to a single .form-control.\r\n\r\nCross-browser compatibility\r\nAvoid using select elements here as they cannot be fully styled in WebKit browsers.\r\nTooltips & popovers in input groups require special setting\r\nWhen using tooltips or popovers on elements within an .input-group, you'll have to specify the option container: 'body' to avoid unwanted side effects (such as the element growing wider and/or losing its rounded corners when the tooltip or popover is triggered).\r\nDon't mix with other components\r\nDo not mix form groups or grid column classes directly with input groups. Instead, nest the input group inside of the form group or grid-related element.\r\n\r\nBasic example\r\nPlace one add-on or button on either side of an input. You may also place one on both sides of an input.\r\n\r\nWe do not support multiple add-ons on a single side.\r\n\r\nWe do not support multiple form-controls in a single input group.\r\n\r\n    <div class=\"input-group\">\r\n      <span class=\"input-group-addon\">@</span>\r\n      <input type=\"text\" class=\"form-control\" placeholder=\"Username\">\r\n    </div>\r\n\r\n    <div class=\"input-group\">\r\n      <input type=\"text\" class=\"form-control\">\r\n      <span class=\"input-group-addon\">.00</span>\r\n    </div>\r\n\r\n    <div class=\"input-group\">\r\n      <span class=\"input-group-addon\">$</span>\r\n      <input type=\"text\" class=\"form-control\">\r\n      <span class=\"input-group-addon\">.00</span>\r\n    </div>\r\n\r\n###Sizing\r\n\r\nAdd the relative form sizing classes to the .input-group itself and contents within will automatically resize—no need for repeating the form control size classes on each element.\r\n\r\n\r\n    <div class=\"input-group input-group-lg\">\r\n      <span class=\"input-group-addon\">@</span>\r\n      <input type=\"text\" class=\"form-control\" placeholder=\"Username\">\r\n    </div>\r\n\r\n    <div class=\"input-group\">\r\n      <span class=\"input-group-addon\">@</span>\r\n      <input type=\"text\" class=\"form-control\" placeholder=\"Username\">\r\n    </div>\r\n\r\n    <div class=\"input-group input-group-sm\">\r\n      <span class=\"input-group-addon\">@</span>\r\n      <input type=\"text\" class=\"form-control\" placeholder=\"Username\">\r\n    </div>\r\n\r\n###Checkboxes and radio addons\r\n\r\nPlace any checkbox or radio option within an input group's addon instead of text.\r\n\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-6\">\r\n        <div class=\"input-group\">\r\n          <span class=\"input-group-addon\">\r\n            <input type=\"checkbox\">\r\n          </span>\r\n          <input type=\"text\" class=\"form-control\">\r\n        </div><!-- /input-group -->\r\n      </div><!-- /.col-lg-6 -->\r\n      <div class=\"col-lg-6\">\r\n        <div class=\"input-group\">\r\n          <span class=\"input-group-addon\">\r\n            <input type=\"radio\">\r\n          </span>\r\n          <input type=\"text\" class=\"form-control\">\r\n        </div><!-- /input-group -->\r\n      </div><!-- /.col-lg-6 -->\r\n    </div><!-- /.row -->\r\n\r\n###Button addons\r\n\r\nButtons in input groups are a bit different and require one extra level of nesting. Instead of .input-group-addon, you'll need to use .input-group-btn to wrap the buttons. This is required due to default browser styles that cannot be overridden.\r\n\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-6\">\r\n        <div class=\"input-group\">\r\n          <span class=\"input-group-btn\">\r\n            <button class=\"btn btn-default\" type=\"button\">Go!</button>\r\n          </span>\r\n          <input type=\"text\" class=\"form-control\">\r\n        </div><!-- /input-group -->\r\n      </div><!-- /.col-lg-6 -->\r\n      <div class=\"col-lg-6\">\r\n        <div class=\"input-group\">\r\n          <input type=\"text\" class=\"form-control\">\r\n          <span class=\"input-group-btn\">\r\n            <button class=\"btn btn-default\" type=\"button\">Go!</button>\r\n          </span>\r\n        </div><!-- /input-group -->\r\n      </div><!-- /.col-lg-6 -->\r\n    </div><!-- /.row -->\r\n\r\n###Buttons with dropdowns\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-6\">\r\n        <div class=\"input-group\">\r\n          <div class=\"input-group-btn\">\r\n            <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">Action <span class=\"caret\"></span></button>\r\n            <ul class=\"dropdown-menu\" role=\"menu\">\r\n              <li><a href=\"#\">Action</a></li>\r\n              <li><a href=\"#\">Another action</a></li>\r\n              <li><a href=\"#\">Something else here</a></li>\r\n              <li class=\"divider\"></li>\r\n              <li><a href=\"#\">Separated link</a></li>\r\n            </ul>\r\n          </div><!-- /btn-group -->\r\n          <input type=\"text\" class=\"form-control\">\r\n        </div><!-- /input-group -->\r\n      </div><!-- /.col-lg-6 -->\r\n      <div class=\"col-lg-6\">\r\n        <div class=\"input-group\">\r\n          <input type=\"text\" class=\"form-control\">\r\n          <div class=\"input-group-btn\">\r\n            <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">Action <span class=\"caret\"></span></button>\r\n            <ul class=\"dropdown-menu dropdown-menu-right\" role=\"menu\">\r\n              <li><a href=\"#\">Action</a></li>\r\n              <li><a href=\"#\">Another action</a></li>\r\n              <li><a href=\"#\">Something else here</a></li>\r\n              <li class=\"divider\"></li>\r\n              <li><a href=\"#\">Separated link</a></li>\r\n            </ul>\r\n          </div><!-- /btn-group -->\r\n        </div><!-- /input-group -->\r\n      </div><!-- /.col-lg-6 -->\r\n    </div><!-- /.row -->\r\n\r\n###Segmented buttons\r\n\r\n    <div class=\"input-group\">\r\n      <div class=\"input-group-btn\">\r\n        <!-- Button and dropdown menu -->\r\n      </div>\r\n      <input type=\"text\" class=\"form-control\">\r\n    </div>\r\n\r\n    <div class=\"input-group\">\r\n      <input type=\"text\" class=\"form-control\">\r\n      <div class=\"input-group-btn\">\r\n        <!-- Button and dropdown menu -->\r\n      </div>\r\n    </div>","created_at":"2014-08-20 15:29:35 +0000","updated_at":"2014-08-20 15:29:35 +0000","private":0,"tags":null},{"id":107,"category_id":1,"user_id":6,"title":"Regexp with named groups","description":"Regexp with named groups","content":"<?php\r\n$regexp = \"/(\\/?)resource\\/(?P<foo>\\w+)\\/(?P<bar>\\w+)/\";\r\n$match = preg_match($regexp,\"/resource/foob/abar\",$result);\r\nvar_export($result);\r\nvar_export((bool) $match);\r\n\r\n/*\r\narray (\r\n  0 => '/resource/foob/abar',\r\n  1 => '/',\r\n  'foo' => 'foob',\r\n  2 => 'foob',\r\n  'bar' => 'abar',\r\n  3 => 'abar',\r\n)true\r\n*/","created_at":"2014-08-26 00:05:13 +0000","updated_at":"2014-08-26 00:05:13 +0000","private":0,"tags":null},{"id":108,"category_id":10,"user_id":6,"title":"reading xml document with DOM api ","description":"reading xml document with DOM api ","content":"import javax.xml.parsers.DocumentBuilderFactory;\r\nimport javax.xml.parsers.DocumentBuilder;\r\nimport org.w3c.dom.Document;\r\nimport org.w3c.dom.NodeList;\r\nimport org.w3c.dom.Node;\r\nimport org.w3c.dom.Element;\r\nimport java.io.File;\r\n\r\npublic class Main{\r\n     // reading xml document with DOM api \r\n     public static void main(String []args){\r\n        try{\r\n            File xmlFile = new File(\"input.txt\");\r\n            DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\r\n            DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\r\n            Document doc = documentBuilder.parse(xmlFile);\r\n            doc.getDocumentElement().normalize();\r\n            System.out.println(\"Root element: \"+doc.getDocumentElement().getNodeName());\r\n            NodeList nodeList=doc.getElementsByTagName(\"staff\");\r\n            for(int i=0;i<nodeList.getLength();i++){\r\n                Node node = nodeList.item(i);\r\n                System.out.println(\"\\n current element: \"+ node.getNodeName());\r\n            }\r\n            \r\n        }catch(Exception e){\r\n            \r\n        }\r\n     }\r\n}\r\n","created_at":"2014-08-26 04:01:40 +0000","updated_at":"2014-08-26 04:01:40 +0000","private":0,"tags":null},{"id":109,"category_id":11,"user_id":6,"title":"Cloning a git repository into the current directory","description":"Cloning a git repository into the current directory","content":"git clone git@github.com.user/my-project.git .","created_at":"2014-08-28 03:47:58 +0000","updated_at":"2014-08-28 03:47:58 +0000","private":0,"tags":null},{"id":110,"category_id":11,"user_id":6,"title":"Git - commit to new branch","description":"Git - commit to new branch","content":"git checkout -b my_new_branch\r\ngit commit","created_at":"2014-08-31 03:26:27 +0000","updated_at":"2014-08-31 03:26:27 +0000","private":0,"tags":null},{"id":111,"category_id":1,"user_id":6,"title":"How to Flatten a Multidimensional Array?","description":"How to Flatten a Multidimensional Array?","content":"$a = array(1,2,array(3,4, array(5,6,7), 8), 9);\r\n$it = new RecursiveIteratorIterator(new RecursiveArrayIterator($a));\r\nforeach($it as $v) {\r\n  echo $v, \" \";\r\n}","created_at":"2014-08-31 06:12:02 +0000","updated_at":"2014-08-31 06:12:02 +0000","private":0,"tags":null},{"id":112,"category_id":9,"user_id":6,"title":"Glob","description":"Glob","content":"import glob\r\nprint glob.glob(\"/home/adam/*.txt\")","created_at":"2014-09-09 03:52:32 +0000","updated_at":"2014-09-09 03:52:32 +0000","private":0,"tags":null},{"id":113,"category_id":31,"user_id":6,"title":"Windows Experience Index","description":"Windows Experience Index","content":"###Windows Experience Index\r\n\r\n1. search for cme.exe\r\n2. open cmd.exe (command prompt)\r\n3. write: winsat prepop\r\n4. press enter\r\n5. search for powershell.exe\r\n6. open powershell.exe\r\n7. write: `Get-WmiObject -class win32_winsat`\r\n8. press enter\r\n9. you will see your scores listed in the results","created_at":"2014-09-12 02:11:51 +0000","updated_at":"2014-09-14 22:23:19 +0000","private":0,"tags":null},{"id":114,"category_id":9,"user_id":6,"title":"Image compression","description":"Image compression","content":"#!/usr/bin/env python\r\n\r\nimport os,sys,math,glob,Image\r\n# compress image\r\n# ------------------------\r\n# When saving as JPEG, you can set the quality parameter to control the amount of compression:\r\n# newImg.save(path, 'JPEG', dpi=[300,300], quality=90)\r\n# Or, save in a lossless format, such as PNG:\r\n# newImg.save(path, 'PNG', dpi=[300,300])\r\n\r\ndirectory = sys.argv[1]\r\n\r\nfiles = glob.glob(directory+\"/*.jpg\")\r\n#target_directory = os.normpath(join(os.getcwd(), '/out'))\r\n\r\nfor file in files:\r\n\timage = Image.open(file)\r\n\twidth = 1024\r\n\theight = int((768.0/1024.0)*image.size[1])\r\n\timage.thumbnail((width,height),Image.ANTIALIAS)\r\n\timage.save(file+\".thumb.jpg\",'JPEG',dpi=[75,75],quality=60)\r\n\tprint file\r\n","created_at":"2014-09-16 07:40:44 +0000","updated_at":"2014-09-16 07:40:44 +0000","private":0,"tags":null},{"id":115,"category_id":9,"user_id":6,"title":"Managing envirronment variables","description":"Managing envirronment variables","content":"import os\r\n\r\nos.environ['MyVar'] = 'Hello World!'       # set the environment variable 'MyVar' \r\nprint os.getenv('MyVar') # Hello World!\r\n","created_at":"2014-09-16 19:34:39 +0000","updated_at":"2014-09-16 19:34:39 +0000","private":0,"tags":null},{"id":116,"category_id":31,"user_id":6,"title":"CURL","description":"CURL","content":"Exemple of curl request : \r\n\r\n    curl \"http://example.com/\" -H \"Accept:  text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\" -H \"Connection: keep-alive\" -H \"DNT: 1\" -H \"Accept-Encoding: gzip,deflate,sdch\" -H \"Accept-Language: fr-FR,fr;q=0.8,en-US;q=0.6,en;q=0.4,es;q=0.2,ru;q=0.2,pt;q=0.2\" -H \"User-Agent: Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.120 Safari/537.36\" --compressed","created_at":"2014-09-23 05:45:50 +0000","updated_at":"2014-09-23 05:45:50 +0000","private":0,"tags":null},{"id":117,"category_id":1,"user_id":6,"title":"Permanent redirect","description":"Permanent redirect","content":"<?php \r\n\r\nheader(\"HTTP/1.1 301 Moved Permanently\"); \r\nheader(\"Location: http://www.New-Website.com\"); \r\n\r\n// http://joshhighland.com/blog/2010/11/27/using-curl-and-php-to-upload-files-through-a-form-post/ ","created_at":"2014-09-29 22:32:10 +0000","updated_at":"2014-09-29 22:33:31 +0000","private":0,"tags":null},{"id":118,"category_id":2,"user_id":6,"title":"md5 with nodejs","description":"md5 with nodejs","content":"var crypto = require('crypto');\r\nvar name = 'I love Node.js';\r\nvar hash = crypto.createHash('md5').update(name).digest(\"hex\");\r\nconsole.log(hash);","created_at":"2014-10-01 04:01:39 +0000","updated_at":"2014-10-01 04:01:39 +0000","private":0,"tags":null},{"id":119,"category_id":1,"user_id":6,"title":"Optimage","description":"PHP commandline image optimizer","content":"<?php\r\n/**\r\n * PHP commandline image optimizer (using GD extension)\r\n * @see http://www.php.net/manual/fr/reserved.variables.argv.php\r\n * @see http://php.net/manual/fr/function.getopt.php\r\n */\r\n\r\nconst DEFAULT_QUALITY=50;\r\nconst DEFAULT_OUTPUT_FILE=\"out.jpg\";\r\n\r\nfunction displayHelp(){\r\n\techo \"\r\nOPTIMAGE image optimizer\r\n========================\r\nauthor mparaiso mparaiso@online.fr\r\nUsage: [-q] input [output]\r\nOptions:\r\n-q quality A number between 0 and 100\r\n\";\r\n}\r\n\r\nfunction getQuality(){\r\n\t$options=getopt(\"q:\");\r\n\tif(isset($options['q']) && $options['q'] && (0 <= $options['q'] && $options['q'] <= 100)){\r\n\t\treturn (int)$options['q'];\r\n\t}else{\r\n\t\treturn DEFAULT_QUALITY;\r\n\t}\r\n}\r\n\r\nfunction getInputFile($argv){\r\n\t$options_count=count(getopt('q:'));\r\n\t$inputFile = $argv[$options_count+1];\r\n\tif(! $inputFile){\r\n\t\tthrow new \\Exception(\"Input option not found\");\r\n\t}\r\n\treturn $inputFile;\r\n}\r\n\r\nfunction getOutputFile($argv){\r\n\t$options_count=count(getopt('q:'));\r\n\tif(isset($argv[$options_count+2])){\r\n\t\treturn $argv[$options_count+2];\r\n\t}else{\r\n\t\treturn DEFAULT_OUTPUT_FILE;\r\n\t}\r\n}\r\n\r\nfunction optimize($quality,$input,$output){\r\n\t$info=getimagesize($input);\r\n\tif ($info['mime'] == 'image/jpeg') $image = imagecreatefromjpeg($input);\r\n\telseif ($info['mime'] == 'image/gif') $image = imagecreatefromgif($input);\r\n\telseif ($info['mime'] == 'image/png') $image = imagecreatefrompng($input);\r\n\t# save file\r\n\timagejpeg($image,$output,$quality);\r\n\r\n}\r\n\r\ntry{\r\n\tif(count($argv)<=1){\r\n\t\tthrow new Exception(\"Error Processing Request\", 1);\r\n\t}else{\r\n\t\t$quality=getQuality();\r\n\t\t$inputFile=getInputFile($argv);\r\n\t\t$outputFile=getOutputFile($argv);\r\n\t\toptimize($quality,$inputFile,$outputFile);\r\n\t}\r\n}catch(\\Exception $e){\r\n\tdisplayHelp();\r\n}\r\n","created_at":"2014-10-28 09:52:38 +0000","updated_at":"2014-10-28 09:52:38 +0000","private":0,"tags":null}]